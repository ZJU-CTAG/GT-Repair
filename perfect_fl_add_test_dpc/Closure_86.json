{
  "patch": "\n  /**\n   * @param locals A predicate to apply to unknown local values.\n   * @return Whether the node is known to be a value that is not a reference\n   *     outside the expression scope.\n   */\n  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch (value.getType()) {\n      case Token.ASSIGN:\n        // A result that is aliased by a non-local name, is the effectively the\n        // same as returning a non-local name, but this doesn't matter if the\n        // value is immutable.\n        return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value)\n                && evaluatesToLocalValue(value.getLastChild(), locals));\n      case Token.COMMA:\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n          return evaluatesToLocalValue(value.getFirstChild(), locals);\n        } else {\n          return true;\n        }\n      case Token.THIS:\n        return locals.apply(value);\n      case Token.NAME:\n        return isImmutableValue(value) || locals.apply(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // There is no information about the locality of object properties.\n        return locals.apply(value);\n      case Token.CALL:\n        return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);\n      case Token.NEW:\n        // Modified to return false for side-effects analysis\n        return false;\n      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Literals objects with non-literal children are allowed.\n        return true;\n      case Token.IN:\n        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?\n        return true;\n      default:\n        // Other op force a local value:\n        //  x = '' + g (x is now an local string)\n        //  x -= g (x is now an local number)\n        if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value)) {\n          return true;\n        }\n\n        throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());\n    }\n  }\n",
  "index": 0,
  "validation": "plausible",
  "validation_wo": "plausible",
  "errors": [],
  "total_trigger": 7,
  "passing_trigger": 7,
  "total_relevant": 143,
  "failing_relevant": 0,
  "passing_tests": [
    "com.google.javascript.jscomp.NodeUtilTest::testLocalValue1",
    "com.google.javascript.jscomp.PureFunctionIdentifierTest::testLocalizedSideEffects8",
    "com.google.javascript.jscomp.PureFunctionIdentifierTest::testLocalizedSideEffects9",
    "com.google.javascript.jscomp.PureFunctionIdentifierTest::testAnnotationInExterns_new4",
    "com.google.javascript.jscomp.PureFunctionIdentifierTest::testAnnotationInExterns_new6",
    "com.google.javascript.jscomp.PureFunctionIdentifierTest::testIssue303b",
    "com.google.javascript.jscomp.PureFunctionIdentifierTest::testIssue303"
  ],
  "failing_tests": [],
  "sum_entropy": -5.4837763868272305,
  "mean_entropy": -0.00737066718659574,
  "test_for_prompt": "Closure_86_n44.txt"
}