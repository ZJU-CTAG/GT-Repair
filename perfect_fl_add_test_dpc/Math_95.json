{
  "patch": "\n    /**\n     * Access the initial domain value, based on <code>p</code>, used to\n     * bracket a CDF root.  This method is used by\n     * {@link #inverseCumulativeProbability(double)} to find critical values.\n     * \n     * @param p the desired probability for the critical value\n     * @return initial domain value\n     */\n    protected double getInitialDomain(double p) {\n        double ret;\n        double d = getDenominatorDegreesOfFreedom();\n        // use mean\n        if(d > 2.0){\n            ret = d / (d - 2.0);\n        }else{\n            ret = 1.0; // or a suitable value based on your needs\n        }\n        return ret;\n    }\n",
  "index": 10,
  "validation": "plausible",
  "validation_wo": "plausible",
  "errors": [],
  "total_trigger": 1,
  "passing_trigger": 1,
  "total_relevant": 3,
  "failing_relevant": 0,
  "passing_tests": [
    "org.apache.commons.math.distribution.FDistributionTest::testSmallDegreesOfFreedom"
  ],
  "failing_tests": [],
  "sum_entropy": -14.56904924288392,
  "mean_entropy": -0.07790935424002096,
  "test_for_prompt": "Math_95_n41.txt"
}