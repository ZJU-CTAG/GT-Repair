{
  "patch": "\n    /**\n     * Return the sum of this complex number and the given complex number.\n     * <p>\n     * Uses the definitional formula\n     * <pre>\n     * (a + bi) + (c + di) = (a+c) + (b+d)i\n     * </pre></p>\n     * <p>\n     * If either this or <code>rhs</code> has a NaN value in either part,\n     * {@link #NaN} is returned; otherwise Infinite and NaN values are\n     * returned in the parts of the result according to the rules for\n     * {@link java.lang.Double} arithmetic.</p>\n     *\n     * @param rhs the other complex number\n     * @return the complex number sum\n     * @throws NullArgumentException if <code>rhs</code> is null\n     */\n    public Complex add(Complex rhs)\n        throws NullArgumentException {\n        MathUtils.checkNotNull(rhs);\n        if (isNaN() || rhs.isNaN()) {\n            return Complex.NaN;\n        }\n        return createComplex(real + rhs.getReal(),\n            imaginary + rhs.getImaginary());\n    }\n",
  "index": 2,
  "validation": "plausible",
  "validation_wo": "plausible",
  "errors": [],
  "total_trigger": 1,
  "passing_trigger": 1,
  "total_relevant": 9,
  "failing_relevant": 0,
  "passing_tests": [
    "org.apache.commons.math.complex.ComplexTest::testAddNaN"
  ],
  "failing_tests": [],
  "sum_entropy": -2.701702654361725,
  "mean_entropy": -0.009648938051291875,
  "pass_FIB_num": 1,
  "pass_FIB": [
    "Math_53_n43.txt"
  ]
}