{
  "patch": "\n    /**\n     * <p>\n     * Gets the greatest common divisor of the absolute value of two numbers,\n     * using the \"binary gcd\" method which avoids division and modulo\n     * operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef\n     * Stein (1961).\n     * </p>\n     * \n     * @param u a non-zero number\n     * @param v a non-zero number\n     * @return the greatest common divisor, never zero\n     * @since 1.1\n     */\n    public static int gcd(int u, int v) {\n        if (u == 0 || v == 0) {\n            return (Math.abs(u) + Math.abs(v));\n        }\n        // keep u and v negative, as negative integers range down to\n        // -2^31, while positive numbers can only be as large as 2^31-1\n        // (i.e. we can't necessarily negate a negative number without\n        // overflow)\n        /* assert u!=0 && v!=0; */\n        if (u > 0) {\n            u = -u;\n        } // make u negative\n        if (v > 0) {\n            v = -v;\n        } // make v negative\n        // B1. [Find power of 2]\n        int k = 0;\n        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are\n                                                            // both even...\n            u /= 2;\n            v /= 2;\n            k++; // cast out twos.\n        }\n        if (k == 31) {\n            throw new ArithmeticException(\"overflow: gcd is 2^31\");\n        }\n        // B2. Initialize: u and v have been divided by 2^k and at least\n        // one is odd.\n        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;\n        // t negative: u was odd, v may be even (t replaces v)\n        // t positive: u was even, v is odd (t replaces u)\n        do {\n            /* assert u<0 && v<0; */\n            // B4/B3: cast out twos from t.\n            while ((t & 1) == 0) { // while t is even..\n                t /= 2; // cast out twos\n            }\n            // B5 [reset max(u,v)]\n            if (t > 0) {\n                u = -t;\n            } else {\n                v = t;\n            }\n            // B6/B3. at this point both u and v should be odd.\n            t = (v - u) / 2;\n            // |u| larger: t positive (replace u)\n            // |v| larger: t negative (replace v)\n        } while (t != 0);\n        return -u * (1 << k); // gcd is u*2^k\n    }\n",
  "index": 7,
  "validation": "plausible",
  "validation_wo": "plausible",
  "errors": [],
  "total_trigger": 1,
  "passing_trigger": 1,
  "total_relevant": 40,
  "failing_relevant": 0,
  "passing_tests": [
    "org.apache.commons.math.util.MathUtilsTest::testGcd"
  ],
  "failing_tests": [],
  "sum_entropy": -0.6991002559661865,
  "mean_entropy": -0.0009409155531173439,
  "pass_FIB_num": 41,
  "pass_FIB": [
    "Math_94_n8.txt",
    "Math_94_n12.txt",
    "Math_94_n5.txt",
    "Math_94_n43.txt",
    "Math_94_n2.txt",
    "Math_94_n35.txt",
    "Math_94_n34.txt",
    "Math_94_n16.txt",
    "Math_94_n38.txt",
    "Math_94_n36.txt",
    "Math_94_n42.txt",
    "Math_94_n18.txt",
    "Math_94_n0.txt",
    "Math_94_n19.txt",
    "Math_94_n48.txt",
    "Math_94_n24.txt",
    "Math_94_n31.txt",
    "Math_94_n49.txt",
    "Math_94_n30.txt",
    "Math_94_n21.txt",
    "Math_94_n44.txt",
    "Math_94_n3.txt",
    "Math_94_n41.txt",
    "Math_94_n37.txt",
    "Math_94_n46.txt",
    "Math_94_n6.txt",
    "Math_94_n45.txt",
    "Math_94_n33.txt",
    "Math_94_n13.txt",
    "Math_94_n7.txt",
    "Math_94_n22.txt",
    "Math_94_n26.txt",
    "Math_94_n14.txt",
    "Math_94_n28.txt",
    "Math_94_n17.txt",
    "Math_94_n10.txt",
    "Math_94_n25.txt",
    "Math_94_n9.txt",
    "Math_94_n20.txt",
    "Math_94_n32.txt",
    "Math_94_n29.txt"
  ]
}