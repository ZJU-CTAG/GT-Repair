{
  "Jsoup_42_src/main/java/org/jsoup/nodes/FormElement.java_69_107": {
    "patches": [
      {
        "patch": "\n    /**\n     * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the\n     * list will not be reflected in the DOM.\n     * @return a list of key vals\n     */\n    public List<Connection.KeyVal> formData() {\n        ArrayList<Connection.KeyVal> data = new ArrayList<Connection.KeyVal>();\n\n        // iterate the form control elements and accumulate their values\n        for (Element el: elements) {\n            if (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable\n            String name = el.attr(\"name\");\n            if (name.length() == 0) continue;\n            String type = el.attr(\"type\");\n\n            if (\"select\".equals(el.tagName())) {\n                Elements options = el.select(\"option[selected]\");\n                boolean set = false;\n                for (Element option: options) {\n                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n                    set = true;\n                }\n                if (!set) {\n                    Element option = el.select(\"option\").first();\n                    if (option != null)\n                        data.add(HttpConnection.KeyVal.create(name, option.val()));\n                }\n            } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n                // only add checkbox or radio if they have the checked attribute\n                if (el.hasAttr(\"checked\")) {\n                    if (!el.hasAttr(\"value\")) {\n                        data.add(HttpConnection.KeyVal.create(name, \"on\"));\n                    } else {\n                        final String val = el.val();\n                        data.add(HttpConnection.KeyVal.create(name, val));\n                    }\n                }\n            } else if (\"input\".equals(el.tagName())) {\n                // Not disabled? Ignore disabled inputs.\n                if(!el.hasAttr(\"disabled\")) {\n\n                    // Deal with checkbox and radio (not checked should not be added to avoid sending to server)\n                    if(\"checkbox\".equals(el.attr(\"type\")) || \"radio\".equals(el.attr(\"type\"))) {\n\n                        // Checked, but no value? Default should be \"on\".\n                        if(el.hasAttr(\"checked\") && !el.hasAttr(\"value\")) {\n                            data.add(HttpConnection.KeyVal.create(name, \"on\"));\n                        } \n                        // Checked? Add it's value\n                        else if(el.hasAttr(\"checked\")) {\n                            data.add(HttpConnection.KeyVal.create(name, el.val()));\n                        }\n                    } \n                    // Buttons should be ignored.\n                    else if(!\"button\".equals(el.attr(\"type\"))){\n                        data.add(HttpConnection.KeyVal.create(name, el.val()));\n                    }\n                }\n            } else {\n                data.add(HttpConnection.KeyVal.create(name, el.val()));\n            }\n        }\n        return data;\n    }\n",
        "index": 37,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 2,
        "passing_trigger": 2,
        "total_relevant": 18,
        "failing_relevant": 0,
        "passing_tests": [
          "org.jsoup.nodes.FormElementTest::createsFormData",
          "org.jsoup.nodes.FormElementTest::usesOnForCheckboxValueIfNoValueSet"
        ],
        "failing_tests": [],
        "sum_entropy": -7.07539839757844,
        "mean_entropy": -0.012456687319680353,
        "pass_FIB_num": 2,
        "pass_FIB": [
          "Jsoup_42_n14.txt",
          "Jsoup_42_n49.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the\n     * list will not be reflected in the DOM.\n     * @return a list of key vals\n     */\n    public List<Connection.KeyVal> formData() {\n        ArrayList<Connection.KeyVal> data = new ArrayList<Connection.KeyVal>();\n\n        // iterate the form control elements and accumulate their values\n        for (Element el: elements) {\n            if (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable\n            String name = el.attr(\"name\");\n            if (name.length() == 0) continue;\n            String type = el.attr(\"type\");\n\n            if (\"select\".equals(el.tagName())) {\n                Elements options = el.select(\"option[selected]\");\n                boolean set = false;\n                for (Element option: options) {\n                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n                    set = true;\n                }\n                if (!set) {\n                    Element option = el.select(\"option\").first();\n                    if (option != null)\n                        data.add(HttpConnection.KeyVal.create(name, option.val()));\n                }\n            } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n                // only add checkbox or radio if they have the checked attribute\n                if (el.hasAttr(\"checked\")) {\n                    // Checked, but no value? Default should be \"on\".\n                    if (!el.hasAttr(\"value\")) {\n                        data.add(HttpConnection.KeyVal.create(name, \"on\"));\n                    } else {\n                        final String val = el.val();\n                        data.add(HttpConnection.KeyVal.create(name, val));\n                    }\n                }\n            } else if (\"input\".equals(el.tagName())) {\n                // Not disabled? Ignore disabled inputs.\n                if (!el.hasAttr(\"disabled\")) {\n                    // Deal with checkbox and radio (not checked should not be added to avoid sending to server)\n                    if (\"checkbox\".equals(el.attr(\"type\")) || \"radio\".equals(el.attr(\"type\"))){\n                        // Checked, but no value? Default should be \"on\".\n                        if (el.hasAttr(\"checked\") && !el.hasAttr(\"value\")) {\n                            data.add(HttpConnection.KeyVal.create(name, \"on\"));\n                        } \n                        // Checked? Add its value\n                        else if (el.hasAttr(\"checked\")) {\n                            data.add(HttpConnection.KeyVal.create(name, el.val()));\n                        }\n                    } \n                    // Buttons should be ignored.\n                    else if (!\"button\".equals(el.attr(\"type\"))) {\n                        data.add(HttpConnection.KeyVal.create(name, el.val()));\n                    }\n                }\n            } else {\n                data.add(HttpConnection.KeyVal.create(name, el.val()));\n            }\n        }\n        return data;\n    }\n",
        "index": 19,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 2,
        "passing_trigger": 2,
        "total_relevant": 18,
        "failing_relevant": 0,
        "passing_tests": [
          "org.jsoup.nodes.FormElementTest::createsFormData",
          "org.jsoup.nodes.FormElementTest::usesOnForCheckboxValueIfNoValueSet"
        ],
        "failing_tests": [],
        "sum_entropy": -7.550430096435505,
        "mean_entropy": -0.012950995019614933,
        "pass_FIB_num": 2,
        "pass_FIB": [
          "Jsoup_42_n14.txt",
          "Jsoup_42_n49.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the\n     * list will not be reflected in the DOM.\n     * @return a list of key vals\n     */\n    public List<Connection.KeyVal> formData() {\n        ArrayList<Connection.KeyVal> data = new ArrayList<Connection.KeyVal>();\n\n        // iterate the form control elements and accumulate their values\n        for (Element el: elements) {\n            if (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable\n            String name = el.attr(\"name\");\n            if (name.length() == 0) continue;\n            String type = el.attr(\"type\");\n\n            if (\"select\".equals(el.tagName())) {\n                Elements options = el.select(\"option[selected]\");\n                boolean set = false;\n                for (Element option: options) {\n                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n                    set = true;\n                }\n                if (!set) {\n                    Element option = el.select(\"option\").first();\n                    if (option != null)\n                        data.add(HttpConnection.KeyVal.create(name, option.val()));\n                }\n            } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n                // only add checkbox or radio if they have the checked attribute\n                if (el.hasAttr(\"checked\")) {\n                    final String val = el.val();\n                    if (el.hasAttr(\"value\")) {\n                        data.add(HttpConnection.KeyVal.create(name, val));\n                    } else {\n                        data.add(HttpConnection.KeyVal.create(name, \"on\"));\n                    }\n                }\n            } else if (\"input\".equals(el.tagName())) {\n                // Not disabled? Ignore disabled inputs.\n                if (!el.hasAttr(\"disabled\")) {\n                    // Deal with checkbox and radio (not checked should not be added to avoid sending to server)\n                    if (\"checkbox\".equals(el.attr(\"type\")) || \"radio\".equals(el.attr(\"type\"))) {\n                        // Checked, but no value? Default should be \"on\".\n                        if (el.hasAttr(\"checked\") && !el.hasAttr(\"value\")) {\n                            data.add(HttpConnection.KeyVal.create(name, \"on\"));\n                        } \n                        // Checked? Add its value\n                        else if (el.hasAttr(\"checked\")) {\n                            data.add(HttpConnection.KeyVal.create(name, el.val()));\n                        }\n                    } \n                    // Buttons should be ignored.\n                    else if (!\"button\".equals(el.attr(\"type\"))){\n                        data.add(HttpConnection.KeyVal.create(name, el.val()));\n                    }\n                }\n            } else {\n                data.add(HttpConnection.KeyVal.create(name, el.val()));\n            }\n        }\n        return data;\n    }\n",
        "index": 28,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 2,
        "passing_trigger": 2,
        "total_relevant": 18,
        "failing_relevant": 0,
        "passing_tests": [
          "org.jsoup.nodes.FormElementTest::createsFormData",
          "org.jsoup.nodes.FormElementTest::usesOnForCheckboxValueIfNoValueSet"
        ],
        "failing_tests": [],
        "sum_entropy": -13.92336277275023,
        "mean_entropy": -0.02446988185017615,
        "pass_FIB_num": 2,
        "pass_FIB": [
          "Jsoup_42_n14.txt",
          "Jsoup_42_n49.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      }
    ]
  }
}