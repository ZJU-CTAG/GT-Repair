{
  "Cli_23_src/java/org/apache/commons/cli/HelpFormatter.java_794_841": {
    "patches": [
      {
        "patch": "\n    /**\n     * Render the specified text and return the rendered Options\n     * in a StringBuffer.\n     *\n     * @param sb The StringBuffer to place the rendered text into.\n     * @param width The number of characters to display per line\n     * @param nextLineTabStop The position on the next line for the first tab.\n     * @param text The text to be rendered.\n     *\n     * @return the StringBuffer with the rendered Options contents.\n     */\n    protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                             int nextLineTabStop, String text)\n    {\n        int pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        // all following lines must be padded with nextLineTabStop space \n        // characters\n        final String padding = createPadding(nextLineTabStop);\n\n        int lastPos = pos;\n        while (pos < text.length() - 1)\n        {\n            text = padding + text.substring(pos).trim();\n            pos = findWrapPos(text, width, 0);\n\n            if (pos == -1 || pos == lastPos)\n            {\n                sb.append(text);\n                break;\n            }\n\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n            lastPos = pos;\n        }\n\n        return sb;\n    }\n",
        "index": 21,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 2,
        "passing_trigger": 2,
        "total_relevant": 5,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.cli.bug.BugCLI162Test::testInfiniteLoop",
          "org.apache.commons.cli.bug.BugCLI162Test::testPrintHelpLongLines"
        ],
        "failing_tests": [],
        "sum_entropy": -10.224620004710546,
        "mean_entropy": -0.033089385128513095,
        "pass_FIB_num": 36,
        "pass_FIB": [
          "Cli_23_n22.txt",
          "Cli_23_n15.txt",
          "Cli_23_n49.txt",
          "Cli_23_n40.txt",
          "Cli_23_n6.txt",
          "Cli_23_n35.txt",
          "Cli_23_n24.txt",
          "Cli_23_n27.txt",
          "Cli_23_n16.txt",
          "Cli_23_n29.txt",
          "Cli_23_n7.txt",
          "Cli_23_n3.txt",
          "Cli_23_n4.txt",
          "Cli_23_n48.txt",
          "Cli_23_n23.txt",
          "Cli_23_n41.txt",
          "Cli_23_n17.txt",
          "Cli_23_n2.txt",
          "Cli_23_n13.txt",
          "Cli_23_n18.txt",
          "Cli_23_n32.txt",
          "Cli_23_n12.txt",
          "Cli_23_n21.txt",
          "Cli_23_n10.txt",
          "Cli_23_n37.txt",
          "Cli_23_n19.txt",
          "Cli_23_n31.txt",
          "Cli_23_n42.txt",
          "Cli_23_n47.txt",
          "Cli_23_n5.txt",
          "Cli_23_n33.txt",
          "Cli_23_n34.txt",
          "Cli_23_n43.txt",
          "Cli_23_n20.txt",
          "Cli_23_n30.txt",
          "Cli_23_n11.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                             int nextLineTabStop, String text)\n    {\n        int pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        // all following lines must be padded with nextLineTabStop space \n        // characters\n        final String padding = createPadding(nextLineTabStop);\n\n        while (pos < text.length())\n        {\n            int lastPos = pos;\n            text = padding + text.substring(pos).trim();\n            pos = findWrapPos(text, width, 0);\n\n            if (pos == -1 || pos == lastPos)\n            {\n                sb.append(text);\n\n                return sb;\n            }\n\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        }\n\n        return sb;\n    }\n",
        "index": 50,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 2,
        "passing_trigger": 2,
        "total_relevant": 5,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.cli.bug.BugCLI162Test::testInfiniteLoop",
          "org.apache.commons.cli.bug.BugCLI162Test::testPrintHelpLongLines"
        ],
        "failing_tests": [],
        "sum_entropy": -7.413077635066402,
        "mean_entropy": -0.03633861585816864,
        "pass_FIB_num": 36,
        "pass_FIB": [
          "Cli_23_n22.txt",
          "Cli_23_n15.txt",
          "Cli_23_n49.txt",
          "Cli_23_n40.txt",
          "Cli_23_n6.txt",
          "Cli_23_n35.txt",
          "Cli_23_n24.txt",
          "Cli_23_n27.txt",
          "Cli_23_n16.txt",
          "Cli_23_n29.txt",
          "Cli_23_n7.txt",
          "Cli_23_n3.txt",
          "Cli_23_n4.txt",
          "Cli_23_n48.txt",
          "Cli_23_n23.txt",
          "Cli_23_n41.txt",
          "Cli_23_n17.txt",
          "Cli_23_n2.txt",
          "Cli_23_n13.txt",
          "Cli_23_n18.txt",
          "Cli_23_n32.txt",
          "Cli_23_n12.txt",
          "Cli_23_n21.txt",
          "Cli_23_n10.txt",
          "Cli_23_n37.txt",
          "Cli_23_n19.txt",
          "Cli_23_n31.txt",
          "Cli_23_n42.txt",
          "Cli_23_n47.txt",
          "Cli_23_n5.txt",
          "Cli_23_n33.txt",
          "Cli_23_n34.txt",
          "Cli_23_n43.txt",
          "Cli_23_n20.txt",
          "Cli_23_n30.txt",
          "Cli_23_n11.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * Render the specified text and return the rendered Options\n     * in a StringBuffer.\n     *\n     * @param sb The StringBuffer to place the rendered text into.\n     * @param width The number of characters to display per line\n     * @param nextLineTabStop The position on the next line for the first tab.\n     * @param text The text to be rendered.\n     *\n     * @return the StringBuffer with the rendered Options contents.\n     */\n    protected StringBuffer renderWrappedText(StringBuffer sb, int width,\n                                             int nextLineTabStop, String text)\n    {\n        int pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        // all following lines must be padded with nextLineTabStop space \n        // characters\n        final String padding = createPadding(nextLineTabStop);\n\n        while (pos < text.length())\n        {\n            int lastPos = pos;\n            text = padding + text.substring(pos).trim();\n            pos = findWrapPos(text, width, 0);\n\n            if (pos == -1 || pos == lastPos)\n            {\n                sb.append(text);\n                return sb;\n            }\n\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        }\n\n        return sb;\n    }\n",
        "index": 28,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 2,
        "passing_trigger": 2,
        "total_relevant": 5,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.cli.bug.BugCLI162Test::testInfiniteLoop",
          "org.apache.commons.cli.bug.BugCLI162Test::testPrintHelpLongLines"
        ],
        "failing_tests": [],
        "sum_entropy": -12.998245139163783,
        "mean_entropy": -0.04347239176977854,
        "pass_FIB_num": 36,
        "pass_FIB": [
          "Cli_23_n22.txt",
          "Cli_23_n15.txt",
          "Cli_23_n49.txt",
          "Cli_23_n40.txt",
          "Cli_23_n6.txt",
          "Cli_23_n35.txt",
          "Cli_23_n24.txt",
          "Cli_23_n27.txt",
          "Cli_23_n16.txt",
          "Cli_23_n29.txt",
          "Cli_23_n7.txt",
          "Cli_23_n3.txt",
          "Cli_23_n4.txt",
          "Cli_23_n48.txt",
          "Cli_23_n23.txt",
          "Cli_23_n41.txt",
          "Cli_23_n17.txt",
          "Cli_23_n2.txt",
          "Cli_23_n13.txt",
          "Cli_23_n18.txt",
          "Cli_23_n32.txt",
          "Cli_23_n12.txt",
          "Cli_23_n21.txt",
          "Cli_23_n10.txt",
          "Cli_23_n37.txt",
          "Cli_23_n19.txt",
          "Cli_23_n31.txt",
          "Cli_23_n42.txt",
          "Cli_23_n47.txt",
          "Cli_23_n5.txt",
          "Cli_23_n33.txt",
          "Cli_23_n34.txt",
          "Cli_23_n43.txt",
          "Cli_23_n20.txt",
          "Cli_23_n30.txt",
          "Cli_23_n11.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                             int nextLineTabStop, String text)\n    {\n        int pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        // all following lines must be padded with nextLineTabStop space \n        // characters\n        final String padding = createPadding(nextLineTabStop);\n\n        while (pos < text.length())\n        {\n            int lastPos = pos;\n            text = padding + text.substring(pos).trim();\n            pos = findWrapPos(text, width, 0);\n\n            if (pos == -1 || pos == lastPos)\n            {\n                sb.append(text);\n                return sb;\n            }\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        }\n\n        return sb;\n    }\n",
        "index": 12,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 2,
        "passing_trigger": 2,
        "total_relevant": 5,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.cli.bug.BugCLI162Test::testInfiniteLoop",
          "org.apache.commons.cli.bug.BugCLI162Test::testPrintHelpLongLines"
        ],
        "failing_tests": [],
        "sum_entropy": -11.178537425049022,
        "mean_entropy": -0.05479675208357364,
        "pass_FIB_num": 36,
        "pass_FIB": [
          "Cli_23_n22.txt",
          "Cli_23_n15.txt",
          "Cli_23_n49.txt",
          "Cli_23_n40.txt",
          "Cli_23_n6.txt",
          "Cli_23_n35.txt",
          "Cli_23_n24.txt",
          "Cli_23_n27.txt",
          "Cli_23_n16.txt",
          "Cli_23_n29.txt",
          "Cli_23_n7.txt",
          "Cli_23_n3.txt",
          "Cli_23_n4.txt",
          "Cli_23_n48.txt",
          "Cli_23_n23.txt",
          "Cli_23_n41.txt",
          "Cli_23_n17.txt",
          "Cli_23_n2.txt",
          "Cli_23_n13.txt",
          "Cli_23_n18.txt",
          "Cli_23_n32.txt",
          "Cli_23_n12.txt",
          "Cli_23_n21.txt",
          "Cli_23_n10.txt",
          "Cli_23_n37.txt",
          "Cli_23_n19.txt",
          "Cli_23_n31.txt",
          "Cli_23_n42.txt",
          "Cli_23_n47.txt",
          "Cli_23_n5.txt",
          "Cli_23_n33.txt",
          "Cli_23_n34.txt",
          "Cli_23_n43.txt",
          "Cli_23_n20.txt",
          "Cli_23_n30.txt",
          "Cli_23_n11.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                             int nextLineTabStop, String text)\n    {\n        int pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        // all following lines must be padded with nextLineTabStop space \n        // characters\n        final String padding = createPadding(nextLineTabStop);\n\n        while (text.length() > pos)\n        {\n            int lastPos = pos;\n            text = padding + text.substring(pos).trim();\n            pos = findWrapPos(text, width, 0);\n\n            if (pos == -1 || pos == lastPos)\n            {\n                sb.append(text);\n                return sb;\n            }\n\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        }\n\n        sb.append(text);\n\n        return sb;\n    }\n",
        "index": 68,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 2,
        "passing_trigger": 2,
        "total_relevant": 5,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.cli.bug.BugCLI162Test::testInfiniteLoop",
          "org.apache.commons.cli.bug.BugCLI162Test::testPrintHelpLongLines"
        ],
        "failing_tests": [],
        "sum_entropy": -11.679486937507873,
        "mean_entropy": -0.055616604464323205,
        "pass_FIB_num": 36,
        "pass_FIB": [
          "Cli_23_n22.txt",
          "Cli_23_n15.txt",
          "Cli_23_n49.txt",
          "Cli_23_n40.txt",
          "Cli_23_n6.txt",
          "Cli_23_n35.txt",
          "Cli_23_n24.txt",
          "Cli_23_n27.txt",
          "Cli_23_n16.txt",
          "Cli_23_n29.txt",
          "Cli_23_n7.txt",
          "Cli_23_n3.txt",
          "Cli_23_n4.txt",
          "Cli_23_n48.txt",
          "Cli_23_n23.txt",
          "Cli_23_n41.txt",
          "Cli_23_n17.txt",
          "Cli_23_n2.txt",
          "Cli_23_n13.txt",
          "Cli_23_n18.txt",
          "Cli_23_n32.txt",
          "Cli_23_n12.txt",
          "Cli_23_n21.txt",
          "Cli_23_n10.txt",
          "Cli_23_n37.txt",
          "Cli_23_n19.txt",
          "Cli_23_n31.txt",
          "Cli_23_n42.txt",
          "Cli_23_n47.txt",
          "Cli_23_n5.txt",
          "Cli_23_n33.txt",
          "Cli_23_n34.txt",
          "Cli_23_n43.txt",
          "Cli_23_n20.txt",
          "Cli_23_n30.txt",
          "Cli_23_n11.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                             int nextLineTabStop, String text)\n    {\n        int pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        // all following lines must be padded with nextLineTabStop space \n        // characters\n        final String padding = createPadding(nextLineTabStop);\n\n        while (pos < text.length())\n        {\n            int lastPos = pos;\n            text = padding + text.substring(pos).trim();\n            pos = findWrapPos(text, width, 0);\n\n            if (pos == -1 || pos == lastPos)\n            {\n                sb.append(text);\n                return sb;\n            } else\n            {\n                sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n            }\n        }\n\n        return sb;\n    }\n",
        "index": 51,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 2,
        "passing_trigger": 2,
        "total_relevant": 5,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.cli.bug.BugCLI162Test::testInfiniteLoop",
          "org.apache.commons.cli.bug.BugCLI162Test::testPrintHelpLongLines"
        ],
        "failing_tests": [],
        "sum_entropy": -12.504823825452775,
        "mean_entropy": -0.059546780121203687,
        "pass_FIB_num": 36,
        "pass_FIB": [
          "Cli_23_n22.txt",
          "Cli_23_n15.txt",
          "Cli_23_n49.txt",
          "Cli_23_n40.txt",
          "Cli_23_n6.txt",
          "Cli_23_n35.txt",
          "Cli_23_n24.txt",
          "Cli_23_n27.txt",
          "Cli_23_n16.txt",
          "Cli_23_n29.txt",
          "Cli_23_n7.txt",
          "Cli_23_n3.txt",
          "Cli_23_n4.txt",
          "Cli_23_n48.txt",
          "Cli_23_n23.txt",
          "Cli_23_n41.txt",
          "Cli_23_n17.txt",
          "Cli_23_n2.txt",
          "Cli_23_n13.txt",
          "Cli_23_n18.txt",
          "Cli_23_n32.txt",
          "Cli_23_n12.txt",
          "Cli_23_n21.txt",
          "Cli_23_n10.txt",
          "Cli_23_n37.txt",
          "Cli_23_n19.txt",
          "Cli_23_n31.txt",
          "Cli_23_n42.txt",
          "Cli_23_n47.txt",
          "Cli_23_n5.txt",
          "Cli_23_n33.txt",
          "Cli_23_n34.txt",
          "Cli_23_n43.txt",
          "Cli_23_n20.txt",
          "Cli_23_n30.txt",
          "Cli_23_n11.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                             int nextLineTabStop, String text)\n    {\n        int pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        // all following lines must be padded with nextLineTabStop space \n        // characters\n        final String padding = createPadding(nextLineTabStop);\n\n        while (pos < text.length() - 1)\n        {\n            int lastPos = pos;\n            text = padding + text.substring(pos).trim();\n            pos = findWrapPos(text, width, 0);\n\n            if (pos == -1)\n            {\n                sb.append(text);\n                break;\n            } \n            else if (pos == lastPos)\n            {\n                sb.append(rtrim(text));\n                break;\n            }\n\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        }\n\n        return sb;\n    }\n",
        "index": 56,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 2,
        "passing_trigger": 2,
        "total_relevant": 5,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.cli.bug.BugCLI162Test::testInfiniteLoop",
          "org.apache.commons.cli.bug.BugCLI162Test::testPrintHelpLongLines"
        ],
        "failing_tests": [],
        "sum_entropy": -14.349841999509213,
        "mean_entropy": -0.06349487610402306,
        "pass_FIB_num": 36,
        "pass_FIB": [
          "Cli_23_n22.txt",
          "Cli_23_n15.txt",
          "Cli_23_n49.txt",
          "Cli_23_n40.txt",
          "Cli_23_n6.txt",
          "Cli_23_n35.txt",
          "Cli_23_n24.txt",
          "Cli_23_n27.txt",
          "Cli_23_n16.txt",
          "Cli_23_n29.txt",
          "Cli_23_n7.txt",
          "Cli_23_n3.txt",
          "Cli_23_n4.txt",
          "Cli_23_n48.txt",
          "Cli_23_n23.txt",
          "Cli_23_n41.txt",
          "Cli_23_n17.txt",
          "Cli_23_n2.txt",
          "Cli_23_n13.txt",
          "Cli_23_n18.txt",
          "Cli_23_n32.txt",
          "Cli_23_n12.txt",
          "Cli_23_n21.txt",
          "Cli_23_n10.txt",
          "Cli_23_n37.txt",
          "Cli_23_n19.txt",
          "Cli_23_n31.txt",
          "Cli_23_n42.txt",
          "Cli_23_n47.txt",
          "Cli_23_n5.txt",
          "Cli_23_n33.txt",
          "Cli_23_n34.txt",
          "Cli_23_n43.txt",
          "Cli_23_n20.txt",
          "Cli_23_n30.txt",
          "Cli_23_n11.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    protected StringBuffer renderWrappedText(StringBuffer sb, int width,\n                                             int nextLineTabStop, String text) {\n        int pos = findWrapPos(text, width, 0);\n\n        if (pos == -1) {\n            sb.append(rtrim(text));\n            return sb;\n        }\n\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        final String padding = createPadding(nextLineTabStop);\n\n        while (pos < text.length()) {\n            int lastPos = pos;\n            text = padding + text.substring(pos).trim();\n            pos = findWrapPos(text, width, 0);\n\n            if (pos == lastPos) {\n                sb.append(text);\n                break;\n            } else if (pos == -1) {\n                sb.append(text);\n                break;\n            }\n\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        }\n\n        return sb;\n    }\n",
        "index": 22,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 2,
        "passing_trigger": 2,
        "total_relevant": 5,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.cli.bug.BugCLI162Test::testInfiniteLoop",
          "org.apache.commons.cli.bug.BugCLI162Test::testPrintHelpLongLines"
        ],
        "failing_tests": [],
        "sum_entropy": -12.771573171988827,
        "mean_entropy": -0.06617395425900946,
        "pass_FIB_num": 36,
        "pass_FIB": [
          "Cli_23_n22.txt",
          "Cli_23_n15.txt",
          "Cli_23_n49.txt",
          "Cli_23_n40.txt",
          "Cli_23_n6.txt",
          "Cli_23_n35.txt",
          "Cli_23_n24.txt",
          "Cli_23_n27.txt",
          "Cli_23_n16.txt",
          "Cli_23_n29.txt",
          "Cli_23_n7.txt",
          "Cli_23_n3.txt",
          "Cli_23_n4.txt",
          "Cli_23_n48.txt",
          "Cli_23_n23.txt",
          "Cli_23_n41.txt",
          "Cli_23_n17.txt",
          "Cli_23_n2.txt",
          "Cli_23_n13.txt",
          "Cli_23_n18.txt",
          "Cli_23_n32.txt",
          "Cli_23_n12.txt",
          "Cli_23_n21.txt",
          "Cli_23_n10.txt",
          "Cli_23_n37.txt",
          "Cli_23_n19.txt",
          "Cli_23_n31.txt",
          "Cli_23_n42.txt",
          "Cli_23_n47.txt",
          "Cli_23_n5.txt",
          "Cli_23_n33.txt",
          "Cli_23_n34.txt",
          "Cli_23_n43.txt",
          "Cli_23_n20.txt",
          "Cli_23_n30.txt",
          "Cli_23_n11.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      }
    ]
  }
}