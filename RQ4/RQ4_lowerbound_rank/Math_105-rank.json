{
  "Math_105_src/java/org/apache/commons/math/stat/regression/SimpleRegression.java_234_265": {
    "patches": [
      {
        "patch": "\n    /**\n     * Returns the <a href=\"http://www.xycoon.com/SumOfSquares.htm\">\n     * sum of squared errors</a> (SSE) associated with the regression \n     * model.\n     * <p>\n     * The sum is computed using the computational formula\n     * <p>\n     * <code>SSE = SYY - (SXY * SXY / SXX)</code>\n     * <p>\n     * where <code>SYY</code> is the sum of the squared deviations of the y\n     * values about their mean, <code>SXX</code> is similarly defined and\n     * <code>SXY</code> is the sum of the products of x and y mean deviations.\n     * <p>\n     * The sums are accumulated using the updating algorithm referenced in \n     * {@link #addData}.  \n     * <p>\n     * The return value is constrained to be non-negative - i.e., if due to \n     * rounding errors the computational formula returns a negative result, \n     * 0 is returned.\n     * <p>\n     * <strong>Preconditions</strong>: <ul>\n     * <li>At least two observations (with at least two different x values)\n     * must have been added before invoking this method. If this method is \n     * invoked before a model can be estimated, <code>Double,NaN</code> is\n     * returned.\n     * </li></ul>\n     *\n     * @return sum of squared errors associated with the regression model\n     */\n    public double getSumSquaredErrors() {\n        double sse = sumYY - (sumXY * sumXY) / sumXX;\n        return Math.max(0, sse);\n    }\n",
        "index": 91,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.regression.SimpleRegressionTest::testSSENonNegative"
        ],
        "failing_tests": [],
        "sum_entropy": -4.9413219756518,
        "mean_entropy": -0.013391116465181029,
        "pass_FIB_num": 44,
        "pass_FIB": [
          "Math_105_n4.txt",
          "Math_105_n30.txt",
          "Math_105_n44.txt",
          "Math_105_n13.txt",
          "Math_105_n37.txt",
          "Math_105_n10.txt",
          "Math_105_n29.txt",
          "Math_105_n32.txt",
          "Math_105_n3.txt",
          "Math_105_n25.txt",
          "Math_105_n7.txt",
          "Math_105_n12.txt",
          "Math_105_n0.txt",
          "Math_105_n21.txt",
          "Math_105_n46.txt",
          "Math_105_n11.txt",
          "Math_105_n18.txt",
          "Math_105_n42.txt",
          "Math_105_n26.txt",
          "Math_105_n23.txt",
          "Math_105_n36.txt",
          "Math_105_n1.txt",
          "Math_105_n17.txt",
          "Math_105_n45.txt",
          "Math_105_n28.txt",
          "Math_105_n15.txt",
          "Math_105_n6.txt",
          "Math_105_n5.txt",
          "Math_105_n14.txt",
          "Math_105_n35.txt",
          "Math_105_n34.txt",
          "Math_105_n8.txt",
          "Math_105_n20.txt",
          "Math_105_n33.txt",
          "Math_105_n2.txt",
          "Math_105_n27.txt",
          "Math_105_n48.txt",
          "Math_105_n31.txt",
          "Math_105_n41.txt",
          "Math_105_n24.txt",
          "Math_105_n39.txt",
          "Math_105_n49.txt",
          "Math_105_n40.txt",
          "Math_105_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Returns the <a href=\"http://www.xycoon.com/SumOfSquares.htm\">\n     * sum of squared errors</a> (SSE) associated with the regression \n     * model.\n     * <p>\n     * The sum is computed using the computational formula\n     * <p>\n     * <code>SSE = SYY - (SXY * SXY / SXX)</code>\n     * <p>\n     * where <code>SYY</code> is the sum of the squared deviations of the y\n     * values about their mean, <code>SXX</code> is similarly defined and\n     * <code>SXY</code> is the sum of the products of x and y mean deviations.\n     * <p>\n     * The sums are accumulated using the updating algorithm referenced in \n     * {@link #addData}.  \n     * <p>\n     * The return value is constrained to be non-negative - i.e., if due to \n     * rounding errors the computational formula returns a negative result, \n     * 0 is returned.\n     * <p>\n     * <strong>Preconditions</strong>: <ul>\n     * <li>At least two observations (with at least two different x values)\n     * must have been added before invoking this method. If this method is \n     * invoked before a model can be estimated, <code>Double,NaN</code> is\n     * returned.\n     * </li></ul>\n     *\n     * @return sum of squared errors associated with the regression model\n     */\n    public double getSumSquaredErrors() {\n        double sse = sumYY - (sumXY * sumXY / sumXX);\n        return Math.max(0, sse);\n    }\n",
        "index": 92,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.regression.SimpleRegressionTest::testSSENonNegative"
        ],
        "failing_tests": [],
        "sum_entropy": -5.142201612215198,
        "mean_entropy": -0.01397337394623695,
        "pass_FIB_num": 44,
        "pass_FIB": [
          "Math_105_n4.txt",
          "Math_105_n30.txt",
          "Math_105_n44.txt",
          "Math_105_n13.txt",
          "Math_105_n37.txt",
          "Math_105_n10.txt",
          "Math_105_n29.txt",
          "Math_105_n32.txt",
          "Math_105_n3.txt",
          "Math_105_n25.txt",
          "Math_105_n7.txt",
          "Math_105_n12.txt",
          "Math_105_n0.txt",
          "Math_105_n21.txt",
          "Math_105_n46.txt",
          "Math_105_n11.txt",
          "Math_105_n18.txt",
          "Math_105_n42.txt",
          "Math_105_n26.txt",
          "Math_105_n23.txt",
          "Math_105_n36.txt",
          "Math_105_n1.txt",
          "Math_105_n17.txt",
          "Math_105_n45.txt",
          "Math_105_n28.txt",
          "Math_105_n15.txt",
          "Math_105_n6.txt",
          "Math_105_n5.txt",
          "Math_105_n14.txt",
          "Math_105_n35.txt",
          "Math_105_n34.txt",
          "Math_105_n8.txt",
          "Math_105_n20.txt",
          "Math_105_n33.txt",
          "Math_105_n2.txt",
          "Math_105_n27.txt",
          "Math_105_n48.txt",
          "Math_105_n31.txt",
          "Math_105_n41.txt",
          "Math_105_n24.txt",
          "Math_105_n39.txt",
          "Math_105_n49.txt",
          "Math_105_n40.txt",
          "Math_105_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Returns the <a href=\"http://www.xycoon.com/SumOfSquares.htm\">\n     * sum of squared errors</a> (SSE) associated with the regression \n     * model.\n     * <p>\n     * The sum is computed using the computational formula\n     * <p>\n     * <code>SSE = SYY - (SXY * SXY / SXX)</code>\n     * <p>\n     * where <code>SYY</code> is the sum of the squared deviations of the y\n     * values about their mean, <code>SXX</code> is similarly defined and\n     * <code>SXY</code> is the sum of the products of x and y mean deviations.\n     * <p>\n     * The sums are accumulated using the updating algorithm referenced in \n     * {@link #addData}.  \n     * <p>\n     * The return value is constrained to be non-negative - i.e., if due to \n     * rounding errors the computational formula returns a negative result, \n     * 0 is returned.\n     * <p>\n     * <strong>Preconditions</strong>: <ul>\n     * <li>At least two observations (with at least two different x values)\n     * must have been added before invoking this method. If this method is \n     * invoked before a model can be estimated, <code>Double,NaN</code> is\n     * returned.\n     * </li></ul>\n     *\n     * @return sum of squared errors associated with the regression model\n     */\n    public double getSumSquaredErrors() {\n        double sse = sumYY - (sumXY * sumXY / sumXX);\n        return Math.max(0, sse);\n    }\n",
        "index": 22,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.regression.SimpleRegressionTest::testSSENonNegative"
        ],
        "failing_tests": [],
        "sum_entropy": -5.231981465994604,
        "mean_entropy": -0.014217340940202728,
        "pass_FIB_num": 44,
        "pass_FIB": [
          "Math_105_n4.txt",
          "Math_105_n30.txt",
          "Math_105_n44.txt",
          "Math_105_n13.txt",
          "Math_105_n37.txt",
          "Math_105_n10.txt",
          "Math_105_n29.txt",
          "Math_105_n32.txt",
          "Math_105_n3.txt",
          "Math_105_n25.txt",
          "Math_105_n7.txt",
          "Math_105_n12.txt",
          "Math_105_n0.txt",
          "Math_105_n21.txt",
          "Math_105_n46.txt",
          "Math_105_n11.txt",
          "Math_105_n18.txt",
          "Math_105_n42.txt",
          "Math_105_n26.txt",
          "Math_105_n23.txt",
          "Math_105_n36.txt",
          "Math_105_n1.txt",
          "Math_105_n17.txt",
          "Math_105_n45.txt",
          "Math_105_n28.txt",
          "Math_105_n15.txt",
          "Math_105_n6.txt",
          "Math_105_n5.txt",
          "Math_105_n14.txt",
          "Math_105_n35.txt",
          "Math_105_n34.txt",
          "Math_105_n8.txt",
          "Math_105_n20.txt",
          "Math_105_n33.txt",
          "Math_105_n2.txt",
          "Math_105_n27.txt",
          "Math_105_n48.txt",
          "Math_105_n31.txt",
          "Math_105_n41.txt",
          "Math_105_n24.txt",
          "Math_105_n39.txt",
          "Math_105_n49.txt",
          "Math_105_n40.txt",
          "Math_105_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Returns the <a href=\"http://www.xycoon.com/SumOfSquares.htm\">\n     * sum of squared errors</a> (SSE) associated with the regression \n     * model.\n     * <p>\n     * The sum is computed using the computational formula\n     * <p>\n     * <code>SSE = SYY - (SXY * SXY / SXX)</code>\n     * <p>\n     * where <code>SYY</code> is the sum of the squared deviations of the y\n     * values about their mean, <code>SXX</code> is similarly defined and\n     * <code>SXY</code> is the sum of the products of x and y mean deviations.\n     * <p>\n     * The sums are accumulated using the updating algorithm referenced in \n     * {@link #addData}.  \n     * <p>\n     * The return value is constrained to be non-negative - i.e., if due to \n     * rounding errors the computational formula returns a negative result, \n     * 0 is returned.\n     * <p>\n     * <strong>Preconditions</strong>: <ul>\n     * <li>At least two observations (with at least two different x values)\n     * must have been added before invoking this method. If this method is \n     * invoked before a model can be estimated, <code>Double,NaN</code> is\n     * returned.\n     * </li></ul>\n     *\n     * @return sum of squared errors associated with the regression model\n     */\n    public double getSumSquaredErrors() {\n        double sse = sumYY - (sumXY * sumXY) / sumXX;\n        return Math.max(sse, 0.0);\n    }\n",
        "index": 12,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.regression.SimpleRegressionTest::testSSENonNegative"
        ],
        "failing_tests": [],
        "sum_entropy": -5.438860814078751,
        "mean_entropy": -0.014660002194282347,
        "pass_FIB_num": 44,
        "pass_FIB": [
          "Math_105_n4.txt",
          "Math_105_n30.txt",
          "Math_105_n44.txt",
          "Math_105_n13.txt",
          "Math_105_n37.txt",
          "Math_105_n10.txt",
          "Math_105_n29.txt",
          "Math_105_n32.txt",
          "Math_105_n3.txt",
          "Math_105_n25.txt",
          "Math_105_n7.txt",
          "Math_105_n12.txt",
          "Math_105_n0.txt",
          "Math_105_n21.txt",
          "Math_105_n46.txt",
          "Math_105_n11.txt",
          "Math_105_n18.txt",
          "Math_105_n42.txt",
          "Math_105_n26.txt",
          "Math_105_n23.txt",
          "Math_105_n36.txt",
          "Math_105_n1.txt",
          "Math_105_n17.txt",
          "Math_105_n45.txt",
          "Math_105_n28.txt",
          "Math_105_n15.txt",
          "Math_105_n6.txt",
          "Math_105_n5.txt",
          "Math_105_n14.txt",
          "Math_105_n35.txt",
          "Math_105_n34.txt",
          "Math_105_n8.txt",
          "Math_105_n20.txt",
          "Math_105_n33.txt",
          "Math_105_n2.txt",
          "Math_105_n27.txt",
          "Math_105_n48.txt",
          "Math_105_n31.txt",
          "Math_105_n41.txt",
          "Math_105_n24.txt",
          "Math_105_n39.txt",
          "Math_105_n49.txt",
          "Math_105_n40.txt",
          "Math_105_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Returns the <a href=\"http://www.xycoon.com/SumOfSquares.htm\">\n     * sum of squared errors</a> (SSE) associated with the regression \n     * model.\n     * <p>\n     * The sum is computed using the computational formula\n     * <p>\n     * <code>SSE = SYY - (SXY * SXY / SXX)</code>\n     * <p>\n     * where <code>SYY</code> is the sum of the squared deviations of the y\n     * values about their mean, <code>SXX</code> is similarly defined and\n     * <code>SXY</code> is the sum of the products of x and y mean deviations.\n     * <p>\n     * The sums are accumulated using the updating algorithm referenced in \n     * {@link #addData}.  \n     * <p>\n     * The return value is constrained to be non-negative - i.e., if due to \n     * rounding errors the computational formula returns a negative result, \n     * 0 is returned.\n     * <p>\n     * <strong>Preconditions</strong>: <ul>\n     * <li>At least two observations (with at least two different x values)\n     * must have been added before invoking this method. If this method is \n     * invoked before a model can be estimated, <code>Double,NaN</code> is\n     * returned.\n     * </li></ul>\n     *\n     * @return sum of squared errors associated with the regression model\n     */\n    public double getSumSquaredErrors() {\n        double sse = sumYY - (sumXY * sumXY / sumXX);\n        return Math.max(sse, 0.0);\n    }\n",
        "index": 54,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.regression.SimpleRegressionTest::testSSENonNegative"
        ],
        "failing_tests": [],
        "sum_entropy": -5.720065485609759,
        "mean_entropy": -0.015459636447593942,
        "pass_FIB_num": 44,
        "pass_FIB": [
          "Math_105_n4.txt",
          "Math_105_n30.txt",
          "Math_105_n44.txt",
          "Math_105_n13.txt",
          "Math_105_n37.txt",
          "Math_105_n10.txt",
          "Math_105_n29.txt",
          "Math_105_n32.txt",
          "Math_105_n3.txt",
          "Math_105_n25.txt",
          "Math_105_n7.txt",
          "Math_105_n12.txt",
          "Math_105_n0.txt",
          "Math_105_n21.txt",
          "Math_105_n46.txt",
          "Math_105_n11.txt",
          "Math_105_n18.txt",
          "Math_105_n42.txt",
          "Math_105_n26.txt",
          "Math_105_n23.txt",
          "Math_105_n36.txt",
          "Math_105_n1.txt",
          "Math_105_n17.txt",
          "Math_105_n45.txt",
          "Math_105_n28.txt",
          "Math_105_n15.txt",
          "Math_105_n6.txt",
          "Math_105_n5.txt",
          "Math_105_n14.txt",
          "Math_105_n35.txt",
          "Math_105_n34.txt",
          "Math_105_n8.txt",
          "Math_105_n20.txt",
          "Math_105_n33.txt",
          "Math_105_n2.txt",
          "Math_105_n27.txt",
          "Math_105_n48.txt",
          "Math_105_n31.txt",
          "Math_105_n41.txt",
          "Math_105_n24.txt",
          "Math_105_n39.txt",
          "Math_105_n49.txt",
          "Math_105_n40.txt",
          "Math_105_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Returns the <a href=\"http://www.xycoon.com/SumOfSquares.htm\">\n     * sum of squared errors</a> (SSE) associated with the regression \n     * model.\n     * <p>\n     * The sum is computed using the computational formula\n     * <p>\n     * <code>SSE = SYY - (SXY * SXY / SXX)</code>\n     * <p>\n     * where <code>SYY</code> is the sum of the squared deviations of the y\n     * values about their mean, <code>SXX</code> is similarly defined and\n     * <code>SXY</code> is the sum of the products of x and y mean deviations.\n     * <p>\n     * The sums are accumulated using the updating algorithm referenced in \n     * {@link #addData}.  \n     * <p>\n     * The return value is constrained to be non-negative - i.e., if due to \n     * rounding errors the computational formula returns a negative result, \n     * 0 is returned.\n     * <p>\n     * <strong>Preconditions</strong>: <ul>\n     * <li>At least two observations (with at least two different x values)\n     * must have been added before invoking this method. If this method is \n     * invoked before a model can be estimated, <code>Double,NaN</code> is\n     * returned.\n     * </li></ul>\n     *\n     * @return sum of squared errors associated with the regression model\n     */\n    public double getSumSquaredErrors() {\n        double sse = sumYY - (sumXY * sumXY / sumXX);\n        return Math.max(sse, 0.0);\n    }\n",
        "index": 56,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.regression.SimpleRegressionTest::testSSENonNegative"
        ],
        "failing_tests": [],
        "sum_entropy": -5.720065485609759,
        "mean_entropy": -0.015459636447593942,
        "pass_FIB_num": 44,
        "pass_FIB": [
          "Math_105_n4.txt",
          "Math_105_n30.txt",
          "Math_105_n44.txt",
          "Math_105_n13.txt",
          "Math_105_n37.txt",
          "Math_105_n10.txt",
          "Math_105_n29.txt",
          "Math_105_n32.txt",
          "Math_105_n3.txt",
          "Math_105_n25.txt",
          "Math_105_n7.txt",
          "Math_105_n12.txt",
          "Math_105_n0.txt",
          "Math_105_n21.txt",
          "Math_105_n46.txt",
          "Math_105_n11.txt",
          "Math_105_n18.txt",
          "Math_105_n42.txt",
          "Math_105_n26.txt",
          "Math_105_n23.txt",
          "Math_105_n36.txt",
          "Math_105_n1.txt",
          "Math_105_n17.txt",
          "Math_105_n45.txt",
          "Math_105_n28.txt",
          "Math_105_n15.txt",
          "Math_105_n6.txt",
          "Math_105_n5.txt",
          "Math_105_n14.txt",
          "Math_105_n35.txt",
          "Math_105_n34.txt",
          "Math_105_n8.txt",
          "Math_105_n20.txt",
          "Math_105_n33.txt",
          "Math_105_n2.txt",
          "Math_105_n27.txt",
          "Math_105_n48.txt",
          "Math_105_n31.txt",
          "Math_105_n41.txt",
          "Math_105_n24.txt",
          "Math_105_n39.txt",
          "Math_105_n49.txt",
          "Math_105_n40.txt",
          "Math_105_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Returns the <a href=\"http://www.xycoon.com/SumOfSquares.htm\">\n     * sum of squared errors</a> (SSE) associated with the regression \n     * model.\n     * <p>\n     * The sum is computed using the computational formula\n     * <p>\n     * <code>SSE = SYY - (SXY * SXY / SXX)</code>\n     * <p>\n     * where <code>SYY</code> is the sum of the squared deviations of the y\n     * values about their mean, <code>SXX</code> is similarly defined and\n     * <code>SXY</code> is the sum of the products of x and y mean deviations.\n     * <p>\n     * The sums are accumulated using the updating algorithm referenced in \n     * {@link #addData}.  \n     * <p>\n     * The return value is constrained to be non-negative - i.e., if due to \n     * rounding errors the computational formula returns a negative result, \n     * 0 is returned.\n     * <p>\n     * <strong>Preconditions</strong>: <ul>\n     * <li>At least two observations (with at least two different x values)\n     * must have been added before invoking this method. If this method is \n     * invoked before a model can be estimated, <code>Double.NaN</code> is\n     * returned.\n     * </li></ul>\n     *\n     * @return sum of squared errors associated with the regression model\n     */\n    public double getSumSquaredErrors() {\n        double sse = sumYY - (sumXY * sumXY) / sumXX;\n        return Math.max(0, sse);\n    }\n",
        "index": 98,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.regression.SimpleRegressionTest::testSSENonNegative"
        ],
        "failing_tests": [],
        "sum_entropy": -6.01064326611619,
        "mean_entropy": -0.016333269744880953,
        "pass_FIB_num": 44,
        "pass_FIB": [
          "Math_105_n4.txt",
          "Math_105_n30.txt",
          "Math_105_n44.txt",
          "Math_105_n13.txt",
          "Math_105_n37.txt",
          "Math_105_n10.txt",
          "Math_105_n29.txt",
          "Math_105_n32.txt",
          "Math_105_n3.txt",
          "Math_105_n25.txt",
          "Math_105_n7.txt",
          "Math_105_n12.txt",
          "Math_105_n0.txt",
          "Math_105_n21.txt",
          "Math_105_n46.txt",
          "Math_105_n11.txt",
          "Math_105_n18.txt",
          "Math_105_n42.txt",
          "Math_105_n26.txt",
          "Math_105_n23.txt",
          "Math_105_n36.txt",
          "Math_105_n1.txt",
          "Math_105_n17.txt",
          "Math_105_n45.txt",
          "Math_105_n28.txt",
          "Math_105_n15.txt",
          "Math_105_n6.txt",
          "Math_105_n5.txt",
          "Math_105_n14.txt",
          "Math_105_n35.txt",
          "Math_105_n34.txt",
          "Math_105_n8.txt",
          "Math_105_n20.txt",
          "Math_105_n33.txt",
          "Math_105_n2.txt",
          "Math_105_n27.txt",
          "Math_105_n48.txt",
          "Math_105_n31.txt",
          "Math_105_n41.txt",
          "Math_105_n24.txt",
          "Math_105_n39.txt",
          "Math_105_n49.txt",
          "Math_105_n40.txt",
          "Math_105_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Returns the <a href=\"http://www.xycoon.com/SumOfSquares.htm\">\n     * sum of squared errors</a> (SSE) associated with the regression \n     * model.\n     * <p>\n     * The sum is computed using the computational formula\n     * <p>\n     * <code>SSE = SYY - (SXY * SXY / SXX)</code>\n     * <p>\n     * where <code>SYY</code> is the sum of the squared deviations of the y\n     * values about their mean, <code>SXX</code> is similarly defined and\n     * <code>SXY</code> is the sum of the products of x and y mean deviations.\n     * <p>\n     * The sums are accumulated using the updating algorithm referenced in \n     * {@link #addData}.  \n     * <p>\n     * The return value is constrained to be non-negative - i.e., if due to \n     * rounding errors the computational formula returns a negative result, \n     * 0 is returned.\n     * <p>\n     * <strong>Preconditions</strong>: <ul>\n     * <li>At least two observations (with at least two different x values)\n     * must have been added before invoking this method. If this method is \n     * invoked before a model can be estimated, <code>Double.NaN</code> is\n     * returned.\n     * </li></ul>\n     *\n     * @return sum of squared errors associated with the regression model\n     */\n    public double getSumSquaredErrors() {\n        double sse = sumYY - (sumXY * sumXY / sumXX);\n        return Math.max(sse, 0.0);\n    }\n",
        "index": 33,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.regression.SimpleRegressionTest::testSSENonNegative"
        ],
        "failing_tests": [],
        "sum_entropy": -6.250290243068331,
        "mean_entropy": -0.01693845594327461,
        "pass_FIB_num": 44,
        "pass_FIB": [
          "Math_105_n4.txt",
          "Math_105_n30.txt",
          "Math_105_n44.txt",
          "Math_105_n13.txt",
          "Math_105_n37.txt",
          "Math_105_n10.txt",
          "Math_105_n29.txt",
          "Math_105_n32.txt",
          "Math_105_n3.txt",
          "Math_105_n25.txt",
          "Math_105_n7.txt",
          "Math_105_n12.txt",
          "Math_105_n0.txt",
          "Math_105_n21.txt",
          "Math_105_n46.txt",
          "Math_105_n11.txt",
          "Math_105_n18.txt",
          "Math_105_n42.txt",
          "Math_105_n26.txt",
          "Math_105_n23.txt",
          "Math_105_n36.txt",
          "Math_105_n1.txt",
          "Math_105_n17.txt",
          "Math_105_n45.txt",
          "Math_105_n28.txt",
          "Math_105_n15.txt",
          "Math_105_n6.txt",
          "Math_105_n5.txt",
          "Math_105_n14.txt",
          "Math_105_n35.txt",
          "Math_105_n34.txt",
          "Math_105_n8.txt",
          "Math_105_n20.txt",
          "Math_105_n33.txt",
          "Math_105_n2.txt",
          "Math_105_n27.txt",
          "Math_105_n48.txt",
          "Math_105_n31.txt",
          "Math_105_n41.txt",
          "Math_105_n24.txt",
          "Math_105_n39.txt",
          "Math_105_n49.txt",
          "Math_105_n40.txt",
          "Math_105_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Returns the <a href=\"http://www.xycoon.com/SumOfSquares.htm\">\n     * sum of squared errors</a> (SSE) associated with the regression \n     * model.\n     * <p>\n     * The sum is computed using the computational formula\n     * <p>\n     * <code>SSE = SYY - (SXY * SXY / SXX)</code>\n     * <p>\n     * where <code>SYY</code> is the sum of the squared deviations of the y\n     * values about their mean, <code>SXX</code> is similarly defined and\n     * <code>SXY</code> is the sum of the products of x and y mean deviations.\n     * <p>\n     * The sums are accumulated using the updating algorithm referenced in \n     * {@link #addData}.  \n     * <p>\n     * The return value is constrained to be non-negative - i.e., if due to \n     * rounding errors the computational formula returns a negative result, \n     * 0 is returned.\n     * <p>\n     * <strong>Preconditions</strong>: <ul>\n     * <li>At least two observations (with at least two different x values)\n     * must have been added before invoking this method. If this method is \n     * invoked before a model can be estimated, <code>Double,NaN</code> is\n     * returned.\n     * </li></ul>\n     *\n     * @return sum of squared errors associated with the regression model\n     */\n    public double getSumSquaredErrors() {\n        double sse = sumYY - (sumXY * sumXY / sumXX);\n        return Math.max(sse, 0.0); // Ensure non-negative value\n    }\n",
        "index": 57,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.regression.SimpleRegressionTest::testSSENonNegative"
        ],
        "failing_tests": [],
        "sum_entropy": -7.869737019059758,
        "mean_entropy": -0.020930151646435528,
        "pass_FIB_num": 44,
        "pass_FIB": [
          "Math_105_n4.txt",
          "Math_105_n30.txt",
          "Math_105_n44.txt",
          "Math_105_n13.txt",
          "Math_105_n37.txt",
          "Math_105_n10.txt",
          "Math_105_n29.txt",
          "Math_105_n32.txt",
          "Math_105_n3.txt",
          "Math_105_n25.txt",
          "Math_105_n7.txt",
          "Math_105_n12.txt",
          "Math_105_n0.txt",
          "Math_105_n21.txt",
          "Math_105_n46.txt",
          "Math_105_n11.txt",
          "Math_105_n18.txt",
          "Math_105_n42.txt",
          "Math_105_n26.txt",
          "Math_105_n23.txt",
          "Math_105_n36.txt",
          "Math_105_n1.txt",
          "Math_105_n17.txt",
          "Math_105_n45.txt",
          "Math_105_n28.txt",
          "Math_105_n15.txt",
          "Math_105_n6.txt",
          "Math_105_n5.txt",
          "Math_105_n14.txt",
          "Math_105_n35.txt",
          "Math_105_n34.txt",
          "Math_105_n8.txt",
          "Math_105_n20.txt",
          "Math_105_n33.txt",
          "Math_105_n2.txt",
          "Math_105_n27.txt",
          "Math_105_n48.txt",
          "Math_105_n31.txt",
          "Math_105_n41.txt",
          "Math_105_n24.txt",
          "Math_105_n39.txt",
          "Math_105_n49.txt",
          "Math_105_n40.txt",
          "Math_105_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Returns the <a href=\"http://www.xycoon.com/SumOfSquares.htm\">\n     * sum of squared errors</a> (SSE) associated with the regression \n     * model.\n     * <p>\n     * The sum is computed using the computational formula\n     * <p>\n     * <code>SSE = SYY - (SXY * SXY / SXX)</code>\n     * <p>\n     * where <code>SYY</code> is the sum of the squared deviations of the y\n     * values about their mean, <code>SXX</code> is similarly defined and\n     * <code>SXY</code> is the sum of the products of x and y mean deviations.\n     * <p>\n     * The sums are accumulated using the updating algorithm referenced in \n     * {@link #addData}.  \n     * <p>\n     * The return value is constrained to be non-negative - i.e., if due to \n     * rounding errors the computational formula returns a negative result, \n     * 0 is returned.\n     * <p>\n     * <strong>Preconditions</strong>: <ul>\n     * <li>At least two observations (with at least two different x values)\n     * must have been added before invoking this method. If this method is \n     * invoked before a model can be estimated, <code>Double,NaN</code> is\n     * returned.\n     * </li></ul>\n     *\n     * @return sum of squared errors associated with the regression model\n     */\n    public double getSumSquaredErrors() {\n        double result = sumYY - (sumXY * sumXY) / sumXX;\n        return Math.max(0, result);\n    }\n",
        "index": 53,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.regression.SimpleRegressionTest::testSSENonNegative"
        ],
        "failing_tests": [],
        "sum_entropy": -8.138202140975856,
        "mean_entropy": -0.02217493771383067,
        "pass_FIB_num": 44,
        "pass_FIB": [
          "Math_105_n4.txt",
          "Math_105_n30.txt",
          "Math_105_n44.txt",
          "Math_105_n13.txt",
          "Math_105_n37.txt",
          "Math_105_n10.txt",
          "Math_105_n29.txt",
          "Math_105_n32.txt",
          "Math_105_n3.txt",
          "Math_105_n25.txt",
          "Math_105_n7.txt",
          "Math_105_n12.txt",
          "Math_105_n0.txt",
          "Math_105_n21.txt",
          "Math_105_n46.txt",
          "Math_105_n11.txt",
          "Math_105_n18.txt",
          "Math_105_n42.txt",
          "Math_105_n26.txt",
          "Math_105_n23.txt",
          "Math_105_n36.txt",
          "Math_105_n1.txt",
          "Math_105_n17.txt",
          "Math_105_n45.txt",
          "Math_105_n28.txt",
          "Math_105_n15.txt",
          "Math_105_n6.txt",
          "Math_105_n5.txt",
          "Math_105_n14.txt",
          "Math_105_n35.txt",
          "Math_105_n34.txt",
          "Math_105_n8.txt",
          "Math_105_n20.txt",
          "Math_105_n33.txt",
          "Math_105_n2.txt",
          "Math_105_n27.txt",
          "Math_105_n48.txt",
          "Math_105_n31.txt",
          "Math_105_n41.txt",
          "Math_105_n24.txt",
          "Math_105_n39.txt",
          "Math_105_n49.txt",
          "Math_105_n40.txt",
          "Math_105_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n/**\n * Returns the <a href=\"http://www.xycoon.com/SumOfSquares.htm\">\n * sum of squared errors</a> (SSE) associated with the regression \n * model.\n * <p>\n * The sum is computed using the computational formula\n * <p>\n * <code>SSE = SYY - (SXY * SXY / SXX)</code>\n * <p>\n * where <code>SYY</code> is the sum of the squared deviations of the y\n * values about their mean, <code>SXX</code> is similarly defined and\n * <code>SXY</code> is the sum of the products of x and y mean deviations.\n * <p>\n * The sums are accumulated using the updating algorithm referenced in \n * {@link #addData}.  \n * <p>\n * The return value is constrained to be non-negative - i.e., if due to \n * rounding errors the computational formula returns a negative result, \n * 0 is returned.\n * <p>\n * <strong>Preconditions</strong>: <ul>\n * <li>At least two observations (with at least two different x values)\n * must have been added before invoking this method. If this method is \n * invoked before a model can be estimated, <code>Double.NaN</code> is\n * returned.\n * </li></ul>\n *\n * @return sum of squared errors associated with the regression model\n */\npublic double getSumSquaredErrors() {\n    double sse = sumYY - (sumXY * sumXY) / sumXX;\n    return Math.max(sse, 0.0);\n}\n",
        "index": 71,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.regression.SimpleRegressionTest::testSSENonNegative"
        ],
        "failing_tests": [],
        "sum_entropy": -7.550377090840735,
        "mean_entropy": -0.022272498793040517,
        "pass_FIB_num": 44,
        "pass_FIB": [
          "Math_105_n4.txt",
          "Math_105_n30.txt",
          "Math_105_n44.txt",
          "Math_105_n13.txt",
          "Math_105_n37.txt",
          "Math_105_n10.txt",
          "Math_105_n29.txt",
          "Math_105_n32.txt",
          "Math_105_n3.txt",
          "Math_105_n25.txt",
          "Math_105_n7.txt",
          "Math_105_n12.txt",
          "Math_105_n0.txt",
          "Math_105_n21.txt",
          "Math_105_n46.txt",
          "Math_105_n11.txt",
          "Math_105_n18.txt",
          "Math_105_n42.txt",
          "Math_105_n26.txt",
          "Math_105_n23.txt",
          "Math_105_n36.txt",
          "Math_105_n1.txt",
          "Math_105_n17.txt",
          "Math_105_n45.txt",
          "Math_105_n28.txt",
          "Math_105_n15.txt",
          "Math_105_n6.txt",
          "Math_105_n5.txt",
          "Math_105_n14.txt",
          "Math_105_n35.txt",
          "Math_105_n34.txt",
          "Math_105_n8.txt",
          "Math_105_n20.txt",
          "Math_105_n33.txt",
          "Math_105_n2.txt",
          "Math_105_n27.txt",
          "Math_105_n48.txt",
          "Math_105_n31.txt",
          "Math_105_n41.txt",
          "Math_105_n24.txt",
          "Math_105_n39.txt",
          "Math_105_n49.txt",
          "Math_105_n40.txt",
          "Math_105_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n/**\n * Returns the <a href=\"http://www.xycoon.com/SumOfSquares.htm\">\n * sum of squared errors</a> (SSE) associated with the regression \n * model.\n * <p>\n * The sum is computed using the computational formula\n * <p>\n * <code>SSE = SYY - (SXY * SXY / SXX)</code>\n * <p>\n * where <code>SYY</code> is the sum of the squared deviations of the y\n * values about their mean, <code>SXX</code> is similarly defined and\n * <code>SXY</code> is the sum of the products of x and y mean deviations.\n * <p>\n * The sums are accumulated using the updating algorithm referenced in \n * {@link #addData}.  \n * <p>\n * The return value is constrained to be non-negative - i.e., if due to \n * rounding errors the computational formula returns a negative result, \n * 0 is returned.\n * <p>\n * <strong>Preconditions</strong>: <ul>\n * <li>At least two observations (with at least two different x values)\n * must have been added before invoking this method. If this method is \n * invoked before a model can be estimated, <code>Double,NaN</code> is\n * returned.\n * </li></ul>\n *\n * @return sum of squared errors associated with the regression model\n */\npublic double getSumSquaredErrors() {\n    double sse = sumYY - (sumXY * sumXY / sumXX);\n    return Math.max(0.0, sse);\n}\n",
        "index": 84,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.regression.SimpleRegressionTest::testSSENonNegative"
        ],
        "failing_tests": [],
        "sum_entropy": -7.632048639706307,
        "mean_entropy": -0.022513417816242793,
        "pass_FIB_num": 44,
        "pass_FIB": [
          "Math_105_n4.txt",
          "Math_105_n30.txt",
          "Math_105_n44.txt",
          "Math_105_n13.txt",
          "Math_105_n37.txt",
          "Math_105_n10.txt",
          "Math_105_n29.txt",
          "Math_105_n32.txt",
          "Math_105_n3.txt",
          "Math_105_n25.txt",
          "Math_105_n7.txt",
          "Math_105_n12.txt",
          "Math_105_n0.txt",
          "Math_105_n21.txt",
          "Math_105_n46.txt",
          "Math_105_n11.txt",
          "Math_105_n18.txt",
          "Math_105_n42.txt",
          "Math_105_n26.txt",
          "Math_105_n23.txt",
          "Math_105_n36.txt",
          "Math_105_n1.txt",
          "Math_105_n17.txt",
          "Math_105_n45.txt",
          "Math_105_n28.txt",
          "Math_105_n15.txt",
          "Math_105_n6.txt",
          "Math_105_n5.txt",
          "Math_105_n14.txt",
          "Math_105_n35.txt",
          "Math_105_n34.txt",
          "Math_105_n8.txt",
          "Math_105_n20.txt",
          "Math_105_n33.txt",
          "Math_105_n2.txt",
          "Math_105_n27.txt",
          "Math_105_n48.txt",
          "Math_105_n31.txt",
          "Math_105_n41.txt",
          "Math_105_n24.txt",
          "Math_105_n39.txt",
          "Math_105_n49.txt",
          "Math_105_n40.txt",
          "Math_105_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Returns the <a href=\"http://www.xycoon.com/SumOfSquares.htm\">\n     * sum of squared errors</a> (SSE) associated with the regression \n     * model.\n     * <p>\n     * The sum is computed using the computational formula\n     * <p>\n     * <code>SSE = SYY - (SXY * SXY / SXX)</code>\n     * <p>\n     * where <code>SYY</code> is the sum of the squared deviations of the y\n     * values about their mean, <code>SXX</code> is similarly defined and\n     * <code>SXY</code> is the sum of the products of x and y mean deviations.\n     * <p>\n     * The sums are accumulated using the updating algorithm referenced in \n     * {@link #addData}.  \n     * <p>\n     * The return value is constrained to be non-negative - i.e., if due to \n     * rounding errors the computational formula returns a negative result, \n     * 0 is returned.\n     * <p>\n     * <strong>Preconditions</strong>: <ul>\n     * <li>At least two observations (with at least two different x values)\n     * must have been added before invoking this method. If this method is \n     * invoked before a model can be estimated, <code>Double,NaN</code> is\n     * returned.\n     * </li></ul>\n     *\n     * @return sum of squared errors associated with the regression model\n     */\n    public double getSumSquaredErrors() {\n        double sse = sumYY - (sumXY * sumXY / sumXX);\n        return Math.max(0, sse); // Return non-negative value\n    }\n",
        "index": 0,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.regression.SimpleRegressionTest::testSSENonNegative"
        ],
        "failing_tests": [],
        "sum_entropy": -9.473749353387753,
        "mean_entropy": -0.025330880624031424,
        "pass_FIB_num": 44,
        "pass_FIB": [
          "Math_105_n4.txt",
          "Math_105_n30.txt",
          "Math_105_n44.txt",
          "Math_105_n13.txt",
          "Math_105_n37.txt",
          "Math_105_n10.txt",
          "Math_105_n29.txt",
          "Math_105_n32.txt",
          "Math_105_n3.txt",
          "Math_105_n25.txt",
          "Math_105_n7.txt",
          "Math_105_n12.txt",
          "Math_105_n0.txt",
          "Math_105_n21.txt",
          "Math_105_n46.txt",
          "Math_105_n11.txt",
          "Math_105_n18.txt",
          "Math_105_n42.txt",
          "Math_105_n26.txt",
          "Math_105_n23.txt",
          "Math_105_n36.txt",
          "Math_105_n1.txt",
          "Math_105_n17.txt",
          "Math_105_n45.txt",
          "Math_105_n28.txt",
          "Math_105_n15.txt",
          "Math_105_n6.txt",
          "Math_105_n5.txt",
          "Math_105_n14.txt",
          "Math_105_n35.txt",
          "Math_105_n34.txt",
          "Math_105_n8.txt",
          "Math_105_n20.txt",
          "Math_105_n33.txt",
          "Math_105_n2.txt",
          "Math_105_n27.txt",
          "Math_105_n48.txt",
          "Math_105_n31.txt",
          "Math_105_n41.txt",
          "Math_105_n24.txt",
          "Math_105_n39.txt",
          "Math_105_n49.txt",
          "Math_105_n40.txt",
          "Math_105_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Returns the <a href=\"http://www.xycoon.com/SumOfSquares.htm\">\n     * sum of squared errors</a> (SSE) associated with the regression \n     * model.\n     * <p>\n     * The sum is computed using the computational formula\n     * <p>\n     * <code>SSE = SYY - (SXY * SXY / SXX)</code>\n     * <p>\n     * where <code>SYY</code> is the sum of the squared deviations of the y\n     * values about their mean, <code>SXX</code> is similarly defined and\n     * <code>SXY</code> is the sum of the products of x and y mean deviations.\n     * <p>\n     * The sums are accumulated using the updating algorithm referenced in \n     * {@link #addData}.  \n     * <p>\n     * The return value is constrained to be non-negative - i.e., if due to \n     * rounding errors the computational formula returns a negative result, \n     * 0 is returned.\n     * <p>\n     * <strong>Preconditions</strong>: <ul>\n     * <li>At least two observations (with at least two different x values)\n     * must have been added before invoking this method. If this method is \n     * invoked before a model can be estimated, <code>Double,NaN</code> is\n     * returned.\n     * </li></ul>\n     *\n     * @return sum of squared errors associated with the regression model\n     */\n    public double getSumSquaredErrors() {\n        double sse = sumYY - (sumXY * sumXY) / sumXX;\n        return Math.max(0, sse); // Constrain result to be non-negative\n    }\n",
        "index": 97,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.regression.SimpleRegressionTest::testSSENonNegative"
        ],
        "failing_tests": [],
        "sum_entropy": -11.492013137257574,
        "mean_entropy": -0.030402151156766068,
        "pass_FIB_num": 44,
        "pass_FIB": [
          "Math_105_n4.txt",
          "Math_105_n30.txt",
          "Math_105_n44.txt",
          "Math_105_n13.txt",
          "Math_105_n37.txt",
          "Math_105_n10.txt",
          "Math_105_n29.txt",
          "Math_105_n32.txt",
          "Math_105_n3.txt",
          "Math_105_n25.txt",
          "Math_105_n7.txt",
          "Math_105_n12.txt",
          "Math_105_n0.txt",
          "Math_105_n21.txt",
          "Math_105_n46.txt",
          "Math_105_n11.txt",
          "Math_105_n18.txt",
          "Math_105_n42.txt",
          "Math_105_n26.txt",
          "Math_105_n23.txt",
          "Math_105_n36.txt",
          "Math_105_n1.txt",
          "Math_105_n17.txt",
          "Math_105_n45.txt",
          "Math_105_n28.txt",
          "Math_105_n15.txt",
          "Math_105_n6.txt",
          "Math_105_n5.txt",
          "Math_105_n14.txt",
          "Math_105_n35.txt",
          "Math_105_n34.txt",
          "Math_105_n8.txt",
          "Math_105_n20.txt",
          "Math_105_n33.txt",
          "Math_105_n2.txt",
          "Math_105_n27.txt",
          "Math_105_n48.txt",
          "Math_105_n31.txt",
          "Math_105_n41.txt",
          "Math_105_n24.txt",
          "Math_105_n39.txt",
          "Math_105_n49.txt",
          "Math_105_n40.txt",
          "Math_105_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Returns the <a href=\"http://www.xycoon.com/SumOfSquares.htm\">\n     * sum of squared errors</a> (SSE) associated with the regression \n     * model.\n     * <p>\n     * The sum is computed using the computational formula\n     * <p>\n     * <code>SSE = SYY - (SXY * SXY / SXX)</code>\n     * <p>\n     * where <code>SYY</code> is the sum of the squared deviations of the y\n     * values about their mean, <code>SXX</code> is similarly defined and\n     * <code>SXY</code> is the sum of the products of x and y mean deviations.\n     * <p>\n     * The sums are accumulated using the updating algorithm referenced in \n     * {@link #addData}.  \n     * <p>\n     * The return value is constrained to be non-negative - i.e., if due to \n     * rounding errors the computational formula returns a negative result, \n     * 0 is returned.\n     * <p>\n     * <strong>Preconditions</strong>: <ul>\n     * <li>At least two observations (with at least two different x values)\n     * must have been added before invoking this method. If this method is \n     * invoked before a model can be estimated, <code>Double,NaN</code> is\n     * returned.\n     * </li></ul>\n     *\n     * @return sum of squared errors associated with the regression model\n     */\n    public double getSumSquaredErrors() {\n        double sumSquaredErrors = sumYY - (sumXY * sumXY) / sumXX;\n        return Math.max(sumSquaredErrors, 0.0); // Ensure non-negative value\n    }\n",
        "index": 82,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.regression.SimpleRegressionTest::testSSENonNegative"
        ],
        "failing_tests": [],
        "sum_entropy": -11.898492926630203,
        "mean_entropy": -0.03139444043965753,
        "pass_FIB_num": 44,
        "pass_FIB": [
          "Math_105_n4.txt",
          "Math_105_n30.txt",
          "Math_105_n44.txt",
          "Math_105_n13.txt",
          "Math_105_n37.txt",
          "Math_105_n10.txt",
          "Math_105_n29.txt",
          "Math_105_n32.txt",
          "Math_105_n3.txt",
          "Math_105_n25.txt",
          "Math_105_n7.txt",
          "Math_105_n12.txt",
          "Math_105_n0.txt",
          "Math_105_n21.txt",
          "Math_105_n46.txt",
          "Math_105_n11.txt",
          "Math_105_n18.txt",
          "Math_105_n42.txt",
          "Math_105_n26.txt",
          "Math_105_n23.txt",
          "Math_105_n36.txt",
          "Math_105_n1.txt",
          "Math_105_n17.txt",
          "Math_105_n45.txt",
          "Math_105_n28.txt",
          "Math_105_n15.txt",
          "Math_105_n6.txt",
          "Math_105_n5.txt",
          "Math_105_n14.txt",
          "Math_105_n35.txt",
          "Math_105_n34.txt",
          "Math_105_n8.txt",
          "Math_105_n20.txt",
          "Math_105_n33.txt",
          "Math_105_n2.txt",
          "Math_105_n27.txt",
          "Math_105_n48.txt",
          "Math_105_n31.txt",
          "Math_105_n41.txt",
          "Math_105_n24.txt",
          "Math_105_n39.txt",
          "Math_105_n49.txt",
          "Math_105_n40.txt",
          "Math_105_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    public double getSumSquaredErrors() {\n        double sse = sumYY - ((sumXY * sumXY) / sumXX);\n        return sse < 0 ? 0 : sse;\n    }\n",
        "index": 99,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.regression.SimpleRegressionTest::testSSENonNegative"
        ],
        "failing_tests": [],
        "sum_entropy": -7.217866401054651,
        "mean_entropy": -0.16039703113454779,
        "pass_FIB_num": 44,
        "pass_FIB": [
          "Math_105_n4.txt",
          "Math_105_n30.txt",
          "Math_105_n44.txt",
          "Math_105_n13.txt",
          "Math_105_n37.txt",
          "Math_105_n10.txt",
          "Math_105_n29.txt",
          "Math_105_n32.txt",
          "Math_105_n3.txt",
          "Math_105_n25.txt",
          "Math_105_n7.txt",
          "Math_105_n12.txt",
          "Math_105_n0.txt",
          "Math_105_n21.txt",
          "Math_105_n46.txt",
          "Math_105_n11.txt",
          "Math_105_n18.txt",
          "Math_105_n42.txt",
          "Math_105_n26.txt",
          "Math_105_n23.txt",
          "Math_105_n36.txt",
          "Math_105_n1.txt",
          "Math_105_n17.txt",
          "Math_105_n45.txt",
          "Math_105_n28.txt",
          "Math_105_n15.txt",
          "Math_105_n6.txt",
          "Math_105_n5.txt",
          "Math_105_n14.txt",
          "Math_105_n35.txt",
          "Math_105_n34.txt",
          "Math_105_n8.txt",
          "Math_105_n20.txt",
          "Math_105_n33.txt",
          "Math_105_n2.txt",
          "Math_105_n27.txt",
          "Math_105_n48.txt",
          "Math_105_n31.txt",
          "Math_105_n41.txt",
          "Math_105_n24.txt",
          "Math_105_n39.txt",
          "Math_105_n49.txt",
          "Math_105_n40.txt",
          "Math_105_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    public double getSumSquaredErrors() {\n        double sse = sumYY - (sumXY * sumXY) / sumXX;\n        return Math.max(sse, 0); // Ensure the result is non-negative\n    }\n",
        "index": 50,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.regression.SimpleRegressionTest::testSSENonNegative"
        ],
        "failing_tests": [],
        "sum_entropy": -7.9333841445217,
        "mean_entropy": -0.1619057988677898,
        "pass_FIB_num": 44,
        "pass_FIB": [
          "Math_105_n4.txt",
          "Math_105_n30.txt",
          "Math_105_n44.txt",
          "Math_105_n13.txt",
          "Math_105_n37.txt",
          "Math_105_n10.txt",
          "Math_105_n29.txt",
          "Math_105_n32.txt",
          "Math_105_n3.txt",
          "Math_105_n25.txt",
          "Math_105_n7.txt",
          "Math_105_n12.txt",
          "Math_105_n0.txt",
          "Math_105_n21.txt",
          "Math_105_n46.txt",
          "Math_105_n11.txt",
          "Math_105_n18.txt",
          "Math_105_n42.txt",
          "Math_105_n26.txt",
          "Math_105_n23.txt",
          "Math_105_n36.txt",
          "Math_105_n1.txt",
          "Math_105_n17.txt",
          "Math_105_n45.txt",
          "Math_105_n28.txt",
          "Math_105_n15.txt",
          "Math_105_n6.txt",
          "Math_105_n5.txt",
          "Math_105_n14.txt",
          "Math_105_n35.txt",
          "Math_105_n34.txt",
          "Math_105_n8.txt",
          "Math_105_n20.txt",
          "Math_105_n33.txt",
          "Math_105_n2.txt",
          "Math_105_n27.txt",
          "Math_105_n48.txt",
          "Math_105_n31.txt",
          "Math_105_n41.txt",
          "Math_105_n24.txt",
          "Math_105_n39.txt",
          "Math_105_n49.txt",
          "Math_105_n40.txt",
          "Math_105_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    public double getSumSquaredErrors() {\n        double sse = sumYY - (sumXY * sumXY) / sumXX;\n        return Math.max(0, sse); // Ensures non-negative value\n    }\n",
        "index": 34,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.regression.SimpleRegressionTest::testSSENonNegative"
        ],
        "failing_tests": [],
        "sum_entropy": -8.47059042188289,
        "mean_entropy": -0.17647063378922687,
        "pass_FIB_num": 44,
        "pass_FIB": [
          "Math_105_n4.txt",
          "Math_105_n30.txt",
          "Math_105_n44.txt",
          "Math_105_n13.txt",
          "Math_105_n37.txt",
          "Math_105_n10.txt",
          "Math_105_n29.txt",
          "Math_105_n32.txt",
          "Math_105_n3.txt",
          "Math_105_n25.txt",
          "Math_105_n7.txt",
          "Math_105_n12.txt",
          "Math_105_n0.txt",
          "Math_105_n21.txt",
          "Math_105_n46.txt",
          "Math_105_n11.txt",
          "Math_105_n18.txt",
          "Math_105_n42.txt",
          "Math_105_n26.txt",
          "Math_105_n23.txt",
          "Math_105_n36.txt",
          "Math_105_n1.txt",
          "Math_105_n17.txt",
          "Math_105_n45.txt",
          "Math_105_n28.txt",
          "Math_105_n15.txt",
          "Math_105_n6.txt",
          "Math_105_n5.txt",
          "Math_105_n14.txt",
          "Math_105_n35.txt",
          "Math_105_n34.txt",
          "Math_105_n8.txt",
          "Math_105_n20.txt",
          "Math_105_n33.txt",
          "Math_105_n2.txt",
          "Math_105_n27.txt",
          "Math_105_n48.txt",
          "Math_105_n31.txt",
          "Math_105_n41.txt",
          "Math_105_n24.txt",
          "Math_105_n39.txt",
          "Math_105_n49.txt",
          "Math_105_n40.txt",
          "Math_105_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    public double getSumSquaredErrors() {\n        double result = sumYY - (sumXY * sumXY) / sumXX;\n        return result < 0 ? 0 : result;\n    }\n",
        "index": 73,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.regression.SimpleRegressionTest::testSSENonNegative"
        ],
        "failing_tests": [],
        "sum_entropy": -7.8222681419547415,
        "mean_entropy": -0.18624447957035098,
        "pass_FIB_num": 44,
        "pass_FIB": [
          "Math_105_n4.txt",
          "Math_105_n30.txt",
          "Math_105_n44.txt",
          "Math_105_n13.txt",
          "Math_105_n37.txt",
          "Math_105_n10.txt",
          "Math_105_n29.txt",
          "Math_105_n32.txt",
          "Math_105_n3.txt",
          "Math_105_n25.txt",
          "Math_105_n7.txt",
          "Math_105_n12.txt",
          "Math_105_n0.txt",
          "Math_105_n21.txt",
          "Math_105_n46.txt",
          "Math_105_n11.txt",
          "Math_105_n18.txt",
          "Math_105_n42.txt",
          "Math_105_n26.txt",
          "Math_105_n23.txt",
          "Math_105_n36.txt",
          "Math_105_n1.txt",
          "Math_105_n17.txt",
          "Math_105_n45.txt",
          "Math_105_n28.txt",
          "Math_105_n15.txt",
          "Math_105_n6.txt",
          "Math_105_n5.txt",
          "Math_105_n14.txt",
          "Math_105_n35.txt",
          "Math_105_n34.txt",
          "Math_105_n8.txt",
          "Math_105_n20.txt",
          "Math_105_n33.txt",
          "Math_105_n2.txt",
          "Math_105_n27.txt",
          "Math_105_n48.txt",
          "Math_105_n31.txt",
          "Math_105_n41.txt",
          "Math_105_n24.txt",
          "Math_105_n39.txt",
          "Math_105_n49.txt",
          "Math_105_n40.txt",
          "Math_105_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    public double getSumSquaredErrors() {\n        double sse = sumYY - (sumXY * sumXY) / sumXX;\n        return Math.max(sse, 0); // Constraint to return non-negative value\n    }\n",
        "index": 9,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.regression.SimpleRegressionTest::testSSENonNegative"
        ],
        "failing_tests": [],
        "sum_entropy": -10.159634841052599,
        "mean_entropy": -0.20733948655209386,
        "pass_FIB_num": 44,
        "pass_FIB": [
          "Math_105_n4.txt",
          "Math_105_n30.txt",
          "Math_105_n44.txt",
          "Math_105_n13.txt",
          "Math_105_n37.txt",
          "Math_105_n10.txt",
          "Math_105_n29.txt",
          "Math_105_n32.txt",
          "Math_105_n3.txt",
          "Math_105_n25.txt",
          "Math_105_n7.txt",
          "Math_105_n12.txt",
          "Math_105_n0.txt",
          "Math_105_n21.txt",
          "Math_105_n46.txt",
          "Math_105_n11.txt",
          "Math_105_n18.txt",
          "Math_105_n42.txt",
          "Math_105_n26.txt",
          "Math_105_n23.txt",
          "Math_105_n36.txt",
          "Math_105_n1.txt",
          "Math_105_n17.txt",
          "Math_105_n45.txt",
          "Math_105_n28.txt",
          "Math_105_n15.txt",
          "Math_105_n6.txt",
          "Math_105_n5.txt",
          "Math_105_n14.txt",
          "Math_105_n35.txt",
          "Math_105_n34.txt",
          "Math_105_n8.txt",
          "Math_105_n20.txt",
          "Math_105_n33.txt",
          "Math_105_n2.txt",
          "Math_105_n27.txt",
          "Math_105_n48.txt",
          "Math_105_n31.txt",
          "Math_105_n41.txt",
          "Math_105_n24.txt",
          "Math_105_n39.txt",
          "Math_105_n49.txt",
          "Math_105_n40.txt",
          "Math_105_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      }
    ]
  }
}