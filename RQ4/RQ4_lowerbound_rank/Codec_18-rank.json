{
  "Codec_18_src/main/java/org/apache/commons/codec/binary/StringUtils.java_41_82": {
    "patches": [
      {
        "patch": "\n    /**\n     * <p>\n     * Compares two CharSequences, returning <code>true</code> if they represent equal sequences of characters.\n     * </p>\n     *\n     * <p>\n     * <code>null</code>s are handled without exceptions. Two <code>null</code> references are considered to be equal.\n     * The comparison is case sensitive.\n     * </p>\n     *\n     * <pre>\n     * StringUtils.equals(null, null)   = true\n     * StringUtils.equals(null, \"abc\")  = false\n     * StringUtils.equals(\"abc\", null)  = false\n     * StringUtils.equals(\"abc\", \"abc\") = true\n     * StringUtils.equals(\"abc\", \"ABC\") = false\n     * </pre>\n     *\n     * <p>\n     * Copied from Apache Commons Lang r1583482 on April 10, 2014 (day of 3.3.2 release).\n     * </p>\n     *\n     * @see Object#equals(Object)\n     * @param cs1\n     *            the first CharSequence, may be <code>null</code>\n     * @param cs2\n     *            the second CharSequence, may be <code>null</code>\n     * @return <code>true</code> if the CharSequences are equal (case-sensitive), or both <code>null</code>\n     * @since 1.10\n     */\n    public static boolean equals(final CharSequence cs1, final CharSequence cs2) {\n        if (cs1 == cs2) {\n            return true;\n        }\n        if (cs1 == null || cs2 == null) {\n            return false;\n        }\n        if (cs1.length() != cs2.length()) {\n            return false;\n        }\n        if (cs1 instanceof String && cs2 instanceof String) {\n            return cs1.equals(cs2);\n        }\n        return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n    }\n",
        "index": 0,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 2,
        "passing_trigger": 2,
        "total_relevant": 17,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.codec.binary.StringUtilsTest::testEqualsCS1",
          "org.apache.commons.codec.binary.StringUtilsTest::testEqualsCS2"
        ],
        "failing_tests": [],
        "sum_entropy": -1.44725204527252,
        "mean_entropy": -0.003405298930052988,
        "pass_FIB_num": 2,
        "pass_FIB": [
          "Codec_18_n41.txt",
          "Codec_18_n0.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * <p>\n     * Compares two CharSequences, returning <code>true</code> if they represent equal sequences of characters.\n     * </p>\n     *\n     * <p>\n     * <code>null</code>s are handled without exceptions. Two <code>null</code> references are considered to be equal.\n     * The comparison is case sensitive.\n     * </p>\n     *\n     * <pre>\n     * StringUtils.equals(null, null)   = true\n     * StringUtils.equals(null, \"abc\")  = false\n     * StringUtils.equals(\"abc\", null)  = false\n     * StringUtils.equals(\"abc\", \"abc\") = true\n     * StringUtils.equals(\"abc\", \"ABC\") = false\n     * </pre>\n     *\n     * <p>\n     * Copied from Apache Commons Lang r1583482 on April 10, 2014 (day of 3.3.2 release).\n     * </p>\n     *\n     * @see Object#equals(Object)\n     * @param cs1\n     *            the first CharSequence, may be <code>null</code>\n     * @param cs2\n     *            the second CharSequence, may be <code>null</code>\n     * @return <code>true</code> if the CharSequences are equal (case-sensitive), or both <code>null</code>\n     * @since 1.10\n     */\n    public static boolean equals(final CharSequence cs1, final CharSequence cs2) {\n        if (cs1 == cs2) {\n            return true;\n        }\n        if (cs1 == null || cs2 == null) {\n            return false;\n        }\n        if (cs1.length() != cs2.length()) {\n            return false;\n        }\n        if (cs1 instanceof String && cs2 instanceof String) {\n            return cs1.equals(cs2);\n        }\n        return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n    }\n",
        "index": 3,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 2,
        "passing_trigger": 2,
        "total_relevant": 17,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.codec.binary.StringUtilsTest::testEqualsCS1",
          "org.apache.commons.codec.binary.StringUtilsTest::testEqualsCS2"
        ],
        "failing_tests": [],
        "sum_entropy": -1.44725204527252,
        "mean_entropy": -0.003405298930052988,
        "pass_FIB_num": 2,
        "pass_FIB": [
          "Codec_18_n41.txt",
          "Codec_18_n0.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * <p>\n     * Compares two CharSequences, returning <code>true</code> if they represent equal sequences of characters.\n     * </p>\n     *\n     * <p>\n     * <code>null</code>s are handled without exceptions. Two <code>null</code> references are considered to be equal.\n     * The comparison is case sensitive.\n     * </p>\n     *\n     * <pre>\n     * StringUtils.equals(null, null)   = true\n     * StringUtils.equals(null, \"abc\")  = false\n     * StringUtils.equals(\"abc\", null)  = false\n     * StringUtils.equals(\"abc\", \"abc\") = true\n     * StringUtils.equals(\"abc\", \"ABC\") = false\n     * </pre>\n     *\n     * <p>\n     * Copied from Apache Commons Lang r1583482 on April 10, 2014 (day of 3.3.2 release).\n     * </p>\n     *\n     * @see Object#equals(Object)\n     * @param cs1\n     *            the first CharSequence, may be <code>null</code>\n     * @param cs2\n     *            the second CharSequence, may be <code>null</code>\n     * @return <code>true</code> if the CharSequences are equal (case-sensitive), or both <code>null</code>\n     * @since 1.10\n     */\n    public static boolean equals(final CharSequence cs1, final CharSequence cs2) {\n        if (cs1 == cs2) {\n            return true;\n        }\n        if (cs1 == null || cs2 == null) {\n            return false;\n        }\n        if (cs1.length() != cs2.length()) {\n            return false;\n        }\n        if (cs1 instanceof String && cs2 instanceof String) {\n            return cs1.equals(cs2);\n        }\n        return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n    }\n",
        "index": 4,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 2,
        "passing_trigger": 2,
        "total_relevant": 17,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.codec.binary.StringUtilsTest::testEqualsCS1",
          "org.apache.commons.codec.binary.StringUtilsTest::testEqualsCS2"
        ],
        "failing_tests": [],
        "sum_entropy": -1.44725204527252,
        "mean_entropy": -0.003405298930052988,
        "pass_FIB_num": 2,
        "pass_FIB": [
          "Codec_18_n41.txt",
          "Codec_18_n0.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * <p>\n     * Compares two CharSequences, returning <code>true</code> if they represent equal sequences of characters.\n     * </p>\n     *\n     * <p>\n     * <code>null</code>s are handled without exceptions. Two <code>null</code> references are considered to be equal.\n     * The comparison is case sensitive.\n     * </p>\n     *\n     * <pre>\n     * StringUtils.equals(null, null)   = true\n     * StringUtils.equals(null, \"abc\")  = false\n     * StringUtils.equals(\"abc\", null)  = false\n     * StringUtils.equals(\"abc\", \"abc\") = true\n     * StringUtils.equals(\"abc\", \"ABC\") = false\n     * </pre>\n     *\n     * <p>\n     * Copied from Apache Commons Lang r1583482 on April 10, 2014 (day of 3.3.2 release).\n     * </p>\n     *\n     * @see Object#equals(Object)\n     * @param cs1\n     *            the first CharSequence, may be <code>null</code>\n     * @param cs2\n     *            the second CharSequence, may be <code>null</code>\n     * @return <code>true</code> if the CharSequences are equal (case-sensitive), or both <code>null</code>\n     * @since 1.10\n     */\n    public static boolean equals(final CharSequence cs1, final CharSequence cs2) {\n        if (cs1 == cs2) {\n            return true;\n        }\n        if (cs1 == null || cs2 == null) {\n            return false;\n        }\n        if (cs1.length() != cs2.length()) {\n            return false;\n        }\n        if (cs1 instanceof String && cs2 instanceof String) {\n            return cs1.equals(cs2);\n        }\n        return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n    }\n",
        "index": 7,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 2,
        "passing_trigger": 2,
        "total_relevant": 17,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.codec.binary.StringUtilsTest::testEqualsCS1",
          "org.apache.commons.codec.binary.StringUtilsTest::testEqualsCS2"
        ],
        "failing_tests": [],
        "sum_entropy": -1.44725204527252,
        "mean_entropy": -0.003405298930052988,
        "pass_FIB_num": 2,
        "pass_FIB": [
          "Codec_18_n41.txt",
          "Codec_18_n0.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * <p>\n     * Compares two CharSequences, returning <code>true</code> if they represent equal sequences of characters.\n     * </p>\n     *\n     * <p>\n     * <code>null</code>s are handled without exceptions. Two <code>null</code> references are considered to be equal.\n     * The comparison is case sensitive.\n     * </p>\n     *\n     * <pre>\n     * StringUtils.equals(null, null)   = true\n     * StringUtils.equals(null, \"abc\")  = false\n     * StringUtils.equals(\"abc\", null)  = false\n     * StringUtils.equals(\"abc\", \"abc\") = true\n     * StringUtils.equals(\"abc\", \"ABC\") = false\n     * </pre>\n     *\n     * <p>\n     * Copied from Apache Commons Lang r1583482 on April 10, 2014 (day of 3.3.2 release).\n     * </p>\n     *\n     * @see Object#equals(Object)\n     * @param cs1\n     *            the first CharSequence, may be <code>null</code>\n     * @param cs2\n     *            the second CharSequence, may be <code>null</code>\n     * @return <code>true</code> if the CharSequences are equal (case-sensitive), or both <code>null</code>\n     * @since 1.10\n     */\n    public static boolean equals(final CharSequence cs1, final CharSequence cs2) {\n        if (cs1 == cs2) {\n            return true;\n        }\n        if (cs1 == null || cs2 == null) {\n            return false;\n        }\n        if (cs1.length() != cs2.length()) {\n            return false;\n        }\n        if (cs1 instanceof String && cs2 instanceof String) {\n            return cs1.equals(cs2);\n        }\n        return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n    }\n",
        "index": 11,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 2,
        "passing_trigger": 2,
        "total_relevant": 17,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.codec.binary.StringUtilsTest::testEqualsCS1",
          "org.apache.commons.codec.binary.StringUtilsTest::testEqualsCS2"
        ],
        "failing_tests": [],
        "sum_entropy": -1.44725204527252,
        "mean_entropy": -0.003405298930052988,
        "pass_FIB_num": 2,
        "pass_FIB": [
          "Codec_18_n41.txt",
          "Codec_18_n0.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * <p>\n     * Compares two CharSequences, returning <code>true</code> if they represent equal sequences of characters.\n     * </p>\n     *\n     * <p>\n     * <code>null</code>s are handled without exceptions. Two <code>null</code> references are considered to be equal.\n     * The comparison is case sensitive.\n     * </p>\n     *\n     * <pre>\n     * StringUtils.equals(null, null)   = true\n     * StringUtils.equals(null, \"abc\")  = false\n     * StringUtils.equals(\"abc\", null)  = false\n     * StringUtils.equals(\"abc\", \"abc\") = true\n     * StringUtils.equals(\"abc\", \"ABC\") = false\n     * </pre>\n     *\n     * <p>\n     * Copied from Apache Commons Lang r1583482 on April 10, 2014 (day of 3.3.2 release).\n     * </p>\n     *\n     * @see Object#equals(Object)\n     * @param cs1\n     *            the first CharSequence, may be <code>null</code>\n     * @param cs2\n     *            the second CharSequence, may be <code>null</code>\n     * @return <code>true</code> if the CharSequences are equal (case-sensitive), or both <code>null</code>\n     * @since 1.10\n     */\n    public static boolean equals(final CharSequence cs1, final CharSequence cs2) {\n        if (cs1 == cs2) {\n            return true;\n        }\n        if (cs1 == null || cs2 == null) {\n            return false;\n        }\n        if (cs1.length() != cs2.length()) {\n            return false;\n        }\n        if (cs1 instanceof String && cs2 instanceof String) {\n            return cs1.equals(cs2);\n        }\n        return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n    }\n",
        "index": 14,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 2,
        "passing_trigger": 2,
        "total_relevant": 17,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.codec.binary.StringUtilsTest::testEqualsCS1",
          "org.apache.commons.codec.binary.StringUtilsTest::testEqualsCS2"
        ],
        "failing_tests": [],
        "sum_entropy": -1.5180881980066212,
        "mean_entropy": -0.0035719722306038148,
        "pass_FIB_num": 2,
        "pass_FIB": [
          "Codec_18_n41.txt",
          "Codec_18_n0.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * <p>\n     * Compares two CharSequences, returning <code>true</code> if they represent equal sequences of characters.\n     * </p>\n     *\n     * <p>\n     * <code>null</code>s are handled without exceptions. Two <code>null</code> references are considered to be equal.\n     * The comparison is case sensitive.\n     * </p>\n     *\n     * <pre>\n     * StringUtils.equals(null, null)   = true\n     * StringUtils.equals(null, \"abc\")  = false\n     * StringUtils.equals(\"abc\", null)  = false\n     * StringUtils.equals(\"abc\", \"abc\") = true\n     * StringUtils.equals(\"abc\", \"ABC\") = false\n     * </pre>\n     *\n     * <p>\n     * Copied from Apache Commons Lang r1583482 on April 10, 2014 (day of 3.3.2 release).\n     * </p>\n     *\n     * @see Object#equals(Object)\n     * @param cs1\n     *            the first CharSequence, may be <code>null</code>\n     * @param cs2\n     *            the second CharSequence, may be <code>null</code>\n     * @return <code>true</code> if the CharSequences are equal (case-sensitive), or both <code>null</code>\n     * @since 1.10\n     */\n    public static boolean equals(final CharSequence cs1, final CharSequence cs2) {\n        if (cs1 == cs2) {\n            return true;\n        }\n        if (cs1 == null || cs2 == null) {\n            return false;\n        }\n        if (cs1.length() != cs2.length()) {\n            return false;\n        }\n        if (cs1 instanceof String && cs2 instanceof String) {\n            return cs1.equals(cs2);\n        }\n        return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n    }\n",
        "index": 15,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 2,
        "passing_trigger": 2,
        "total_relevant": 17,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.codec.binary.StringUtilsTest::testEqualsCS1",
          "org.apache.commons.codec.binary.StringUtilsTest::testEqualsCS2"
        ],
        "failing_tests": [],
        "sum_entropy": -1.5180881980066212,
        "mean_entropy": -0.0035719722306038148,
        "pass_FIB_num": 2,
        "pass_FIB": [
          "Codec_18_n41.txt",
          "Codec_18_n0.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * <p>\n     * Compares two CharSequences, returning <code>true</code> if they represent equal sequences of characters.\n     * </p>\n     *\n     * <p>\n     * <code>null</code>s are handled without exceptions. Two <code>null</code> references are considered to be equal.\n     * The comparison is case sensitive.\n     * </p>\n     *\n     * <pre>\n     * StringUtils.equals(null, null)   = true\n     * StringUtils.equals(null, \"abc\")  = false\n     * StringUtils.equals(\"abc\", null)  = false\n     * StringUtils.equals(\"abc\", \"abc\") = true\n     * StringUtils.equals(\"abc\", \"ABC\") = false\n     * </pre>\n     *\n     * <p>\n     * Copied from Apache Commons Lang r1583482 on April 10, 2014 (day of 3.3.2 release).\n     * </p>\n     *\n     * @see Object#equals(Object)\n     * @param cs1\n     *            the first CharSequence, may be <code>null</code>\n     * @param cs2\n     *            the second CharSequence, may be <code>null</code>\n     * @return <code>true</code> if the CharSequences are equal (case-sensitive), or both <code>null</code>\n     * @since 1.10\n     */\n    public static boolean equals(final CharSequence cs1, final CharSequence cs2) {\n        if (cs1 == cs2) {\n            return true;\n        }\n        if (cs1 == null || cs2 == null) {\n            return false;\n        }\n        if (cs1.length() != cs2.length()) {\n            return false;\n        }\n        if (cs1 instanceof String && cs2 instanceof String) {\n            return cs1.equals(cs2);\n        }\n        return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n    }\n",
        "index": 18,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 2,
        "passing_trigger": 2,
        "total_relevant": 17,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.codec.binary.StringUtilsTest::testEqualsCS1",
          "org.apache.commons.codec.binary.StringUtilsTest::testEqualsCS2"
        ],
        "failing_tests": [],
        "sum_entropy": -1.5180881980066212,
        "mean_entropy": -0.0035719722306038148,
        "pass_FIB_num": 2,
        "pass_FIB": [
          "Codec_18_n41.txt",
          "Codec_18_n0.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * <p>\n     * Compares two CharSequences, returning <code>true</code> if they represent equal sequences of characters.\n     * </p>\n     *\n     * <p>\n     * <code>null</code>s are handled without exceptions. Two <code>null</code> references are considered to be equal.\n     * The comparison is case sensitive.\n     * </p>\n     *\n     * <pre>\n     * StringUtils.equals(null, null)   = true\n     * StringUtils.equals(null, \"abc\")  = false\n     * StringUtils.equals(\"abc\", null)  = false\n     * StringUtils.equals(\"abc\", \"abc\") = true\n     * StringUtils.equals(\"abc\", \"ABC\") = false\n     * </pre>\n     *\n     * <p>\n     * Copied from Apache Commons Lang r1583482 on April 10, 2014 (day of 3.3.2 release).\n     * </p>\n     *\n     * @see Object#equals(Object)\n     * @param cs1\n     *            the first CharSequence, may be <code>null</code>\n     * @param cs2\n     *            the second CharSequence, may be <code>null</code>\n     * @return <code>true</code> if the CharSequences are equal (case-sensitive), or both <code>null</code>\n     * @since 1.10\n     */\n    public static boolean equals(final CharSequence cs1, final CharSequence cs2) {\n        if (cs1 == cs2) {\n            return true;\n        }\n        if (cs1 == null || cs2 == null) {\n            return false;\n        }\n        if (cs1.length() != cs2.length()) {\n            return false;\n        }\n        if (cs1 instanceof String && cs2 instanceof String) {\n            return cs1.equals(cs2);\n        }\n        return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n    }\n",
        "index": 19,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 2,
        "passing_trigger": 2,
        "total_relevant": 17,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.codec.binary.StringUtilsTest::testEqualsCS1",
          "org.apache.commons.codec.binary.StringUtilsTest::testEqualsCS2"
        ],
        "failing_tests": [],
        "sum_entropy": -1.5180881980066212,
        "mean_entropy": -0.0035719722306038148,
        "pass_FIB_num": 2,
        "pass_FIB": [
          "Codec_18_n41.txt",
          "Codec_18_n0.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * <p>\n     * Compares two CharSequences, returning <code>true</code> if they represent equal sequences of characters.\n     * </p>\n     *\n     * <p>\n     * <code>null</code>s are handled without exceptions. Two <code>null</code> references are considered to be equal.\n     * The comparison is case sensitive.\n     * </p>\n     *\n     * <pre>\n     * StringUtils.equals(null, null)   = true\n     * StringUtils.equals(null, \"abc\")  = false\n     * StringUtils.equals(\"abc\", null)  = false\n     * StringUtils.equals(\"abc\", \"abc\") = true\n     * StringUtils.equals(\"abc\", \"ABC\") = false\n     * </pre>\n     *\n     * <p>\n     * Copied from Apache Commons Lang r1583482 on April 10, 2014 (day of 3.3.2 release).\n     * </p>\n     *\n     * @see Object#equals(Object)\n     * @param cs1\n     *            the first CharSequence, may be <code>null</code>\n     * @param cs2\n     *            the second CharSequence, may be <code>null</code>\n     * @return <code>true</code> if the CharSequences are equal (case-sensitive), or both <code>null</code>\n     * @since 1.10\n     */\n    public static boolean equals(final CharSequence cs1, final CharSequence cs2) {\n        if (cs1 == cs2) {\n            return true;\n        }\n        if (cs1 == null || cs2 == null) {\n            return false;\n        }\n        if (cs1.length() != cs2.length()) {\n            return false;\n        }\n        if (cs1 instanceof String && cs2 instanceof String) {\n            return cs1.equals(cs2);\n        }\n        return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n    }\n",
        "index": 21,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 2,
        "passing_trigger": 2,
        "total_relevant": 17,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.codec.binary.StringUtilsTest::testEqualsCS1",
          "org.apache.commons.codec.binary.StringUtilsTest::testEqualsCS2"
        ],
        "failing_tests": [],
        "sum_entropy": -1.5180881980066212,
        "mean_entropy": -0.0035719722306038148,
        "pass_FIB_num": 2,
        "pass_FIB": [
          "Codec_18_n41.txt",
          "Codec_18_n0.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * <p>\n     * Compares two CharSequences, returning <code>true</code> if they represent equal sequences of characters.\n     * </p>\n     *\n     * <p>\n     * <code>null</code>s are handled without exceptions. Two <code>null</code> references are considered to be equal.\n     * The comparison is case sensitive.\n     * </p>\n     *\n     * <pre>\n     * StringUtils.equals(null, null)   = true\n     * StringUtils.equals(null, \"abc\")  = false\n     * StringUtils.equals(\"abc\", null)  = false\n     * StringUtils.equals(\"abc\", \"abc\") = true\n     * StringUtils.equals(\"abc\", \"ABC\") = false\n     * </pre>\n     *\n     * <p>\n     * Copied from Apache Commons Lang r1583482 on April 10, 2014 (day of 3.3.2 release).\n     * </p>\n     *\n     * @see Object#equals(Object)\n     * @param cs1\n     *            the first CharSequence, may be <code>null</code>\n     * @param cs2\n     *            the second CharSequence, may be <code>null</code>\n     * @return <code>true</code> if the CharSequences are equal (case-sensitive), or both <code>null</code>\n     * @since 1.10\n     */\n    public static boolean equals(final CharSequence cs1, final CharSequence cs2) {\n        if (cs1 == cs2) {\n            return true;\n        }\n        if (cs1 == null || cs2 == null) {\n            return false;\n        }\n        if (cs1.length() != cs2.length()) {\n            return false;\n        }\n        if (cs1 instanceof String && cs2 instanceof String) {\n            return cs1.equals(cs2);\n        }\n        return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n    }\n",
        "index": 22,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 2,
        "passing_trigger": 2,
        "total_relevant": 17,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.codec.binary.StringUtilsTest::testEqualsCS1",
          "org.apache.commons.codec.binary.StringUtilsTest::testEqualsCS2"
        ],
        "failing_tests": [],
        "sum_entropy": -1.5180881980066212,
        "mean_entropy": -0.0035719722306038148,
        "pass_FIB_num": 2,
        "pass_FIB": [
          "Codec_18_n41.txt",
          "Codec_18_n0.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * <p>\n     * Compares two CharSequences, returning <code>true</code> if they represent equal sequences of characters.\n     * </p>\n     *\n     * <p>\n     * <code>null</code>s are handled without exceptions. Two <code>null</code> references are considered to be equal.\n     * The comparison is case sensitive.\n     * </p>\n     *\n     * <pre>\n     * StringUtils.equals(null, null)   = true\n     * StringUtils.equals(null, \"abc\")  = false\n     * StringUtils.equals(\"abc\", null)  = false\n     * StringUtils.equals(\"abc\", \"abc\") = true\n     * StringUtils.equals(\"abc\", \"ABC\") = false\n     * </pre>\n     *\n     * <p>\n     * Copied from Apache Commons Lang r1583482 on April 10, 2014 (day of 3.3.2 release).\n     * </p>\n     *\n     * @see Object#equals(Object)\n     * @param cs1\n     *            the first CharSequence, may be <code>null</code>\n     * @param cs2\n     *            the second CharSequence, may be <code>null</code>\n     * @return <code>true</code> if the CharSequences are equal (case-sensitive), or both <code>null</code>\n     * @since 1.10\n     */\n    public static boolean equals(final CharSequence cs1, final CharSequence cs2) {\n        if (cs1 == cs2) {\n            return true;\n        }\n        if (cs1 == null || cs2 == null) {\n            return false;\n        }\n        if (cs1.length() != cs2.length()) {\n            return false;\n        }\n        if (cs1 instanceof String && cs2 instanceof String) {\n            return cs1.equals(cs2);\n        }\n        return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n    }\n",
        "index": 23,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 2,
        "passing_trigger": 2,
        "total_relevant": 17,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.codec.binary.StringUtilsTest::testEqualsCS1",
          "org.apache.commons.codec.binary.StringUtilsTest::testEqualsCS2"
        ],
        "failing_tests": [],
        "sum_entropy": -1.5180881980066212,
        "mean_entropy": -0.0035719722306038148,
        "pass_FIB_num": 2,
        "pass_FIB": [
          "Codec_18_n41.txt",
          "Codec_18_n0.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * <p>\n     * Compares two CharSequences, returning <code>true</code> if they represent equal sequences of characters.\n     * </p>\n     *\n     * <p>\n     * <code>null</code>s are handled without exceptions. Two <code>null</code> references are considered to be equal.\n     * The comparison is case sensitive.\n     * </p>\n     *\n     * <pre>\n     * StringUtils.equals(null, null)   = true\n     * StringUtils.equals(null, \"abc\")  = false\n     * StringUtils.equals(\"abc\", null)  = false\n     * StringUtils.equals(\"abc\", \"abc\") = true\n     * StringUtils.equals(\"abc\", \"ABC\") = false\n     * </pre>\n     *\n     * <p>\n     * Copied from Apache Commons Lang r1583482 on April 10, 2014 (day of 3.3.2 release).\n     * </p>\n     *\n     * @see Object#equals(Object)\n     * @param cs1\n     *            the first CharSequence, may be <code>null</code>\n     * @param cs2\n     *            the second CharSequence, may be <code>null</code>\n     * @return <code>true</code> if the CharSequences are equal (case-sensitive), or both <code>null</code>\n     * @since 1.10\n     */\n    public static boolean equals(final CharSequence cs1, final CharSequence cs2) {\n        if (cs1 == cs2) {\n            return true;\n        }\n        if (cs1 == null || cs2 == null) {\n            return false;\n        }\n        if (cs1.length() != cs2.length()) {\n            return false;\n        }\n        if (cs1 instanceof String && cs2 instanceof String) {\n            return cs1.equals(cs2);\n        }\n        return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n    }\n",
        "index": 24,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 2,
        "passing_trigger": 2,
        "total_relevant": 17,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.codec.binary.StringUtilsTest::testEqualsCS1",
          "org.apache.commons.codec.binary.StringUtilsTest::testEqualsCS2"
        ],
        "failing_tests": [],
        "sum_entropy": -1.5180881980066212,
        "mean_entropy": -0.0035719722306038148,
        "pass_FIB_num": 2,
        "pass_FIB": [
          "Codec_18_n41.txt",
          "Codec_18_n0.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * <p>\n     * Compares two CharSequences, returning <code>true</code> if they represent equal sequences of characters.\n     * </p>\n     *\n     * <p>\n     * <code>null</code>s are handled without exceptions. Two <code>null</code> references are considered to be equal.\n     * The comparison is case sensitive.\n     * </p>\n     *\n     * <pre>\n     * StringUtils.equals(null, null)   = true\n     * StringUtils.equals(null, \"abc\")  = false\n     * StringUtils.equals(\"abc\", null)  = false\n     * StringUtils.equals(\"abc\", \"abc\") = true\n     * StringUtils.equals(\"abc\", \"ABC\") = false\n     * </pre>\n     *\n     * <p>\n     * Copied from Apache Commons Lang r1583482 on April 10, 2014 (day of 3.3.2 release).\n     * </p>\n     *\n     * @see Object#equals(Object)\n     * @param cs1\n     *            the first CharSequence, may be <code>null</code>\n     * @param cs2\n     *            the second CharSequence, may be <code>null</code>\n     * @return <code>true</code> if the CharSequences are equal (case-sensitive), or both <code>null</code>\n     * @since 1.10\n     */\n    public static boolean equals(final CharSequence cs1, final CharSequence cs2) {\n        if (cs1 == cs2) {\n            return true;\n        }\n        if (cs1 == null || cs2 == null) {\n            return false;\n        }\n        if (cs1.length() != cs2.length()) {\n            return false;\n        }\n        if (cs1 instanceof String && cs2 instanceof String) {\n            return cs1.equals(cs2);\n        }\n        return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n    }\n",
        "index": 25,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 2,
        "passing_trigger": 2,
        "total_relevant": 17,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.codec.binary.StringUtilsTest::testEqualsCS1",
          "org.apache.commons.codec.binary.StringUtilsTest::testEqualsCS2"
        ],
        "failing_tests": [],
        "sum_entropy": -1.5180881980066212,
        "mean_entropy": -0.0035719722306038148,
        "pass_FIB_num": 2,
        "pass_FIB": [
          "Codec_18_n41.txt",
          "Codec_18_n0.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * <p>\n     * Compares two CharSequences, returning <code>true</code> if they represent equal sequences of characters.\n     * </p>\n     *\n     * <p>\n     * <code>null</code>s are handled without exceptions. Two <code>null</code> references are considered to be equal.\n     * The comparison is case sensitive.\n     * </p>\n     *\n     * <pre>\n     * StringUtils.equals(null, null)   = true\n     * StringUtils.equals(null, \"abc\")  = false\n     * StringUtils.equals(\"abc\", null)  = false\n     * StringUtils.equals(\"abc\", \"abc\") = true\n     * StringUtils.equals(\"abc\", \"ABC\") = false\n     * </pre>\n     *\n     * <p>\n     * Copied from Apache Commons Lang r1583482 on April 10, 2014 (day of 3.3.2 release).\n     * </p>\n     *\n     * @see Object#equals(Object)\n     * @param cs1\n     *            the first CharSequence, may be <code>null</code>\n     * @param cs2\n     *            the second CharSequence, may be <code>null</code>\n     * @return <code>true</code> if the CharSequences are equal (case-sensitive), or both <code>null</code>\n     * @since 1.10\n     */\n    public static boolean equals(final CharSequence cs1, final CharSequence cs2) {\n        if (cs1 == cs2) {\n            return true;\n        }\n        if (cs1 == null || cs2 == null) {\n            return false;\n        }\n        if (cs1.length() != cs2.length()) {\n            return false;\n        }\n        if (cs1 instanceof String && cs2 instanceof String) {\n            return cs1.equals(cs2);\n        }\n        return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n    }\n",
        "index": 26,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 2,
        "passing_trigger": 2,
        "total_relevant": 17,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.codec.binary.StringUtilsTest::testEqualsCS1",
          "org.apache.commons.codec.binary.StringUtilsTest::testEqualsCS2"
        ],
        "failing_tests": [],
        "sum_entropy": -1.5180881980066212,
        "mean_entropy": -0.0035719722306038148,
        "pass_FIB_num": 2,
        "pass_FIB": [
          "Codec_18_n41.txt",
          "Codec_18_n0.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    public static boolean equals(final CharSequence cs1, final CharSequence cs2) {\n        if (cs1 == cs2) {\n            return true;\n        }\n        if (cs1 == null || cs2 == null) {\n            return false;\n        }\n        if (cs1.length() != cs2.length()) {\n            return false;\n        }\n        return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, cs1.length());\n    }\n",
        "index": 79,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 2,
        "passing_trigger": 2,
        "total_relevant": 17,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.codec.binary.StringUtilsTest::testEqualsCS1",
          "org.apache.commons.codec.binary.StringUtilsTest::testEqualsCS2"
        ],
        "failing_tests": [],
        "sum_entropy": -3.1766167035863506,
        "mean_entropy": -0.0324144561590444,
        "pass_FIB_num": 2,
        "pass_FIB": [
          "Codec_18_n41.txt",
          "Codec_18_n0.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    public static boolean equals(final CharSequence cs1, final CharSequence cs2) {\n        if (cs1 == cs2) {\n            return true;\n        }\n        if (cs1 == null || cs2 == null) {\n            return false;\n        }\n        if (cs1.length() != cs2.length()) {\n            return false;\n        }\n        if (cs1 instanceof String && cs2 instanceof String) {\n            return cs1.toString().equals(cs2.toString());\n        }\n        return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n    }\n",
        "index": 61,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 2,
        "passing_trigger": 2,
        "total_relevant": 17,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.codec.binary.StringUtilsTest::testEqualsCS1",
          "org.apache.commons.codec.binary.StringUtilsTest::testEqualsCS2"
        ],
        "failing_tests": [],
        "sum_entropy": -4.404682473488602,
        "mean_entropy": -0.033623530331974065,
        "pass_FIB_num": 2,
        "pass_FIB": [
          "Codec_18_n41.txt",
          "Codec_18_n0.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    public static boolean equals(final CharSequence cs1, final CharSequence cs2) {\n        if (cs1 == cs2) {\n            return true;\n        }\n        if (cs1 == null || cs2 == null) {\n            return false;\n        }\n        if (cs1.length() != cs2.length()) {\n            return false;\n        }\n        return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, cs1.length());\n    }\n",
        "index": 84,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 2,
        "passing_trigger": 2,
        "total_relevant": 17,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.codec.binary.StringUtilsTest::testEqualsCS1",
          "org.apache.commons.codec.binary.StringUtilsTest::testEqualsCS2"
        ],
        "failing_tests": [],
        "sum_entropy": -3.4406047734021987,
        "mean_entropy": -0.03510821197349182,
        "pass_FIB_num": 2,
        "pass_FIB": [
          "Codec_18_n41.txt",
          "Codec_18_n0.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    public static boolean equals(final CharSequence cs1, final CharSequence cs2) {\n        if (cs1 == cs2) {\n            return true;\n        }\n        if (cs1 == null || cs2 == null) {\n            return false;\n        }\n        if (cs1.length() != cs2.length()) {\n            return false;\n        }\n        if (cs1 instanceof String && cs2 instanceof String) {\n            return cs1.toString().equals(cs2.toString());\n        }\n        return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n    }\n",
        "index": 41,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 2,
        "passing_trigger": 2,
        "total_relevant": 17,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.codec.binary.StringUtilsTest::testEqualsCS1",
          "org.apache.commons.codec.binary.StringUtilsTest::testEqualsCS2"
        ],
        "failing_tests": [],
        "sum_entropy": -5.075678039715302,
        "mean_entropy": -0.038745633890956505,
        "pass_FIB_num": 2,
        "pass_FIB": [
          "Codec_18_n41.txt",
          "Codec_18_n0.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    public static boolean equals(final CharSequence cs1, final CharSequence cs2) {\n        if (cs1 == cs2) {\n            return true;\n        }\n        if (cs1 == null || cs2 == null) {\n            return false;\n        }\n        if (cs1.length() != cs2.length()) {\n            return false;\n        }\n        return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n    }\n",
        "index": 37,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 2,
        "passing_trigger": 2,
        "total_relevant": 17,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.codec.binary.StringUtilsTest::testEqualsCS1",
          "org.apache.commons.codec.binary.StringUtilsTest::testEqualsCS2"
        ],
        "failing_tests": [],
        "sum_entropy": -4.491650804707499,
        "mean_entropy": -0.043188950045264414,
        "pass_FIB_num": 2,
        "pass_FIB": [
          "Codec_18_n41.txt",
          "Codec_18_n0.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      }
    ]
  }
}