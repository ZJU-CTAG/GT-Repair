{
  "Math_103_src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java_100_111": {
    "patches": [
      {
        "patch": "\n    /**\n     * For this distribution, X, this method returns P(X &lt; <code>x</code>).\n     * @param x the value at which the CDF is evaluated.\n     * @return CDF evaluated at <code>x</code>. \n     * @throws MathException if the algorithm fails to converge; unless\n     * x is more than 20 standard deviations from the mean, in which case the\n     * convergence exception is caught and 0 or 1 is returned.\n     */\n    public double cumulativeProbability(double x) throws MathException {\n        if (Math.abs(x - mean) > 20 * standardDeviation) {\n            return x < mean ? 0.0 : 1.0;\n        }\n        return 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0))));\n    }\n",
        "index": 90,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 2,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues"
        ],
        "failing_tests": [],
        "sum_entropy": -2.1959621972289898,
        "mean_entropy": -0.01155769577488942,
        "pass_FIB_num": 6,
        "pass_FIB": [
          "Math_103_n18.txt",
          "Math_103_n28.txt",
          "Math_103_n13.txt",
          "Math_103_n26.txt",
          "Math_103_n34.txt",
          "Math_103_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * For this distribution, X, this method returns P(X &lt; <code>x</code>).\n     * @param x the value at which the CDF is evaluated.\n     * @return CDF evaluated at <code>x</code>. \n     * @throws MathException if the algorithm fails to converge; unless\n     * x is more than 20 standard deviations from the mean, in which case the\n     * convergence exception is caught and 0 or 1 is returned.\n     */\n    public double cumulativeProbability(double x) throws MathException {\n        if (Math.abs(x - mean) > 20 * standardDeviation) {\n            return x < mean ? 0.0 : 1.0;\n        }\n        return 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0))));\n    }\n",
        "index": 93,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 2,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues"
        ],
        "failing_tests": [],
        "sum_entropy": -2.1959621972289898,
        "mean_entropy": -0.01155769577488942,
        "pass_FIB_num": 6,
        "pass_FIB": [
          "Math_103_n18.txt",
          "Math_103_n28.txt",
          "Math_103_n13.txt",
          "Math_103_n26.txt",
          "Math_103_n34.txt",
          "Math_103_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * For this distribution, X, this method returns P(X &lt; <code>x</code>).\n     * @param x the value at which the CDF is evaluated.\n     * @return CDF evaluated at <code>x</code>. \n     * @throws MathException if the algorithm fails to converge; unless\n     * x is more than 20 standard deviations from the mean, in which case the\n     * convergence exception is caught and 0 or 1 is returned.\n     */\n    public double cumulativeProbability(double x) throws MathException {\n        if (Math.abs(x - mean) > 20 * standardDeviation) {\n            return x < mean ? 0.0 : 1.0;\n        }\n        return 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0))));\n    }\n",
        "index": 94,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 2,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues"
        ],
        "failing_tests": [],
        "sum_entropy": -2.1959621972289898,
        "mean_entropy": -0.01155769577488942,
        "pass_FIB_num": 6,
        "pass_FIB": [
          "Math_103_n18.txt",
          "Math_103_n28.txt",
          "Math_103_n13.txt",
          "Math_103_n26.txt",
          "Math_103_n34.txt",
          "Math_103_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * For this distribution, X, this method returns P(X &lt; <code>x</code>).\n     * @param x the value at which the CDF is evaluated.\n     * @return CDF evaluated at <code>x</code>. \n     * @throws MathException if the algorithm fails to converge; unless\n     * x is more than 20 standard deviations from the mean, in which case the\n     * convergence exception is caught and 0 or 1 is returned.\n     */\n    public double cumulativeProbability(double x) throws MathException {\n        if (Math.abs(x - mean) > 20 * standardDeviation) {\n            return x < mean ? 0.0 : 1.0;\n        }\n        return 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0))));\n    }\n",
        "index": 95,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 2,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues"
        ],
        "failing_tests": [],
        "sum_entropy": -2.1959621972289898,
        "mean_entropy": -0.01155769577488942,
        "pass_FIB_num": 6,
        "pass_FIB": [
          "Math_103_n18.txt",
          "Math_103_n28.txt",
          "Math_103_n13.txt",
          "Math_103_n26.txt",
          "Math_103_n34.txt",
          "Math_103_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * For this distribution, X, this method returns P(X &lt; <code>x</code>).\n     * @param x the value at which the CDF is evaluated.\n     * @return CDF evaluated at <code>x</code>. \n     * @throws MathException if the algorithm fails to converge; unless\n     * x is more than 20 standard deviations from the mean, in which case the\n     * convergence exception is caught and 0 or 1 is returned.\n     */\n    public double cumulativeProbability(double x) throws MathException {\n        if (Math.abs(x - mean) > 20 * standardDeviation) {\n            return x < mean ? 0.0 : 1.0;\n        }\n        return 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0))));\n    }\n",
        "index": 16,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 2,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues"
        ],
        "failing_tests": [],
        "sum_entropy": -2.3565076633993307,
        "mean_entropy": -0.012402671912628057,
        "pass_FIB_num": 6,
        "pass_FIB": [
          "Math_103_n18.txt",
          "Math_103_n28.txt",
          "Math_103_n13.txt",
          "Math_103_n26.txt",
          "Math_103_n34.txt",
          "Math_103_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * For this distribution, X, this method returns P(X &lt; <code>x</code>).\n     * @param x the value at which the CDF is evaluated.\n     * @return CDF evaluated at <code>x</code>. \n     * @throws MathException if the algorithm fails to converge; unless\n     * x is more than 20 standard deviations from the mean, in which case the\n     * convergence exception is caught and 0 or 1 is returned.\n     */\n    public double cumulativeProbability(double x) throws MathException {\n        if (Math.abs(x - mean) > 20 * standardDeviation) {\n            return x < mean ? 0.0 : 1.0;\n        }\n        return 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0))));\n    }\n",
        "index": 19,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 2,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues"
        ],
        "failing_tests": [],
        "sum_entropy": -2.3565076633993307,
        "mean_entropy": -0.012402671912628057,
        "pass_FIB_num": 6,
        "pass_FIB": [
          "Math_103_n18.txt",
          "Math_103_n28.txt",
          "Math_103_n13.txt",
          "Math_103_n26.txt",
          "Math_103_n34.txt",
          "Math_103_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * For this distribution, X, this method returns P(X &lt; <code>x</code>).\n     * @param x the value at which the CDF is evaluated.\n     * @return CDF evaluated at <code>x</code>. \n     * @throws MathException if the algorithm fails to converge; unless\n     * x is more than 20 standard deviations from the mean, in which case the\n     * convergence exception is caught and 0 or 1 is returned.\n     */\n    public double cumulativeProbability(double x) throws MathException {\n        if (Math.abs(x - mean) > 20 * standardDeviation) {\n            return x < mean ? 0.0 : 1.0;\n        }\n        return 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0))));\n    }\n",
        "index": 21,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 2,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues"
        ],
        "failing_tests": [],
        "sum_entropy": -2.3565076633993307,
        "mean_entropy": -0.012402671912628057,
        "pass_FIB_num": 6,
        "pass_FIB": [
          "Math_103_n18.txt",
          "Math_103_n28.txt",
          "Math_103_n13.txt",
          "Math_103_n26.txt",
          "Math_103_n34.txt",
          "Math_103_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * For this distribution, X, this method returns P(X &lt; <code>x</code>).\n     * @param x the value at which the CDF is evaluated.\n     * @return CDF evaluated at <code>x</code>. \n     * @throws MathException if the algorithm fails to converge; unless\n     * x is more than 20 standard deviations from the mean, in which case the\n     * convergence exception is caught and 0 or 1 is returned.\n     */\n    public double cumulativeProbability(double x) throws MathException {\n        if (Math.abs(x - mean) > 20 * standardDeviation) {\n            return x < mean ? 0.0 : 1.0;\n        }\n        return 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0))));\n    }\n",
        "index": 23,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 2,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues"
        ],
        "failing_tests": [],
        "sum_entropy": -2.3565076633993307,
        "mean_entropy": -0.012402671912628057,
        "pass_FIB_num": 6,
        "pass_FIB": [
          "Math_103_n18.txt",
          "Math_103_n28.txt",
          "Math_103_n13.txt",
          "Math_103_n26.txt",
          "Math_103_n34.txt",
          "Math_103_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * For this distribution, X, this method returns P(X &lt; <code>x</code>).\n     * @param x the value at which the CDF is evaluated.\n     * @return CDF evaluated at <code>x</code>. \n     * @throws MathException if the algorithm fails to converge; unless\n     * x is more than 20 standard deviations from the mean, in which case the\n     * convergence exception is caught and 0 or 1 is returned.\n     */\n    public double cumulativeProbability(double x) throws MathException {\n        if (Math.abs(x - mean) > 20 * standardDeviation) {\n            return x < mean ? 0.0 : 1.0;\n        }\n        return 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0))));\n    }\n",
        "index": 24,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 2,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues"
        ],
        "failing_tests": [],
        "sum_entropy": -2.3565076633993307,
        "mean_entropy": -0.012402671912628057,
        "pass_FIB_num": 6,
        "pass_FIB": [
          "Math_103_n18.txt",
          "Math_103_n28.txt",
          "Math_103_n13.txt",
          "Math_103_n26.txt",
          "Math_103_n34.txt",
          "Math_103_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * For this distribution, X, this method returns P(X &lt; <code>x</code>).\n     * @param x the value at which the CDF is evaluated.\n     * @return CDF evaluated at <code>x</code>. \n     * @throws MathException if the algorithm fails to converge; unless\n     * x is more than 20 standard deviations from the mean, in which case the\n     * convergence exception is caught and 0 or 1 is returned.\n     */\n    public double cumulativeProbability(double x) throws MathException {\n        if (Math.abs(x - mean) > 20 * standardDeviation) {\n            return x < mean ? 0.0 : 1.0;\n        }\n        return 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0))));\n    }\n",
        "index": 25,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 2,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues"
        ],
        "failing_tests": [],
        "sum_entropy": -2.3565076633993307,
        "mean_entropy": -0.012402671912628057,
        "pass_FIB_num": 6,
        "pass_FIB": [
          "Math_103_n18.txt",
          "Math_103_n28.txt",
          "Math_103_n13.txt",
          "Math_103_n26.txt",
          "Math_103_n34.txt",
          "Math_103_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * For this distribution, X, this method returns P(X &lt; <code>x</code>).\n     * @param x the value at which the CDF is evaluated.\n     * @return CDF evaluated at <code>x</code>. \n     * @throws MathException if the algorithm fails to converge; unless\n     * x is more than 20 standard deviations from the mean, in which case the\n     * convergence exception is caught and 0 or 1 is returned.\n     */\n    public double cumulativeProbability(double x) throws MathException {\n        if (Math.abs(x - mean) > 20 * standardDeviation) {\n            return x < mean ? 0.0 : 1.0;\n        }\n        return 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0))));\n    }\n",
        "index": 31,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 2,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues"
        ],
        "failing_tests": [],
        "sum_entropy": -2.3565076633993307,
        "mean_entropy": -0.012402671912628057,
        "pass_FIB_num": 6,
        "pass_FIB": [
          "Math_103_n18.txt",
          "Math_103_n28.txt",
          "Math_103_n13.txt",
          "Math_103_n26.txt",
          "Math_103_n34.txt",
          "Math_103_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * For this distribution, X, this method returns P(X &lt; <code>x</code>).\n     * @param x the value at which the CDF is evaluated.\n     * @return CDF evaluated at <code>x</code>. \n     * @throws MathException if the algorithm fails to converge; unless\n     * x is more than 20 standard deviations from the mean, in which case the\n     * convergence exception is caught and 0 or 1 is returned.\n     */\n    public double cumulativeProbability(double x) throws MathException {\n        if (Math.abs(x - mean) > 20 * standardDeviation) {\n            return x < mean ? 0.0 : 1.0;\n        }\n        return 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0))));\n    }\n",
        "index": 97,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 2,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues"
        ],
        "failing_tests": [],
        "sum_entropy": -2.3946953580967105,
        "mean_entropy": -0.01260365977945637,
        "pass_FIB_num": 6,
        "pass_FIB": [
          "Math_103_n18.txt",
          "Math_103_n28.txt",
          "Math_103_n13.txt",
          "Math_103_n26.txt",
          "Math_103_n34.txt",
          "Math_103_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * For this distribution, X, this method returns P(X &lt; <code>x</code>).\n     * @param x the value at which the CDF is evaluated.\n     * @return CDF evaluated at <code>x</code>. \n     * @throws MathException if the algorithm fails to converge; unless\n     * x is more than 20 standard deviations from the mean, in which case the\n     * convergence exception is caught and 0 or 1 is returned.\n     */\n    public double cumulativeProbability(double x) throws MathException {\n        if (Math.abs(x - mean) > 20 * standardDeviation) {\n            return x < mean ? 0.0 : 1.0;\n        }\n        return 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0))));\n    }\n",
        "index": 65,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 2,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues"
        ],
        "failing_tests": [],
        "sum_entropy": -2.396759314094538,
        "mean_entropy": -0.012614522705760725,
        "pass_FIB_num": 6,
        "pass_FIB": [
          "Math_103_n18.txt",
          "Math_103_n28.txt",
          "Math_103_n13.txt",
          "Math_103_n26.txt",
          "Math_103_n34.txt",
          "Math_103_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * For this distribution, X, this method returns P(X &lt; <code>x</code>).\n     * @param x the value at which the CDF is evaluated.\n     * @return CDF evaluated at <code>x</code>. \n     * @throws MathException if the algorithm fails to converge; unless\n     * x is more than 20 standard deviations from the mean, in which case the\n     * convergence exception is caught and 0 or 1 is returned.\n     */\n    public double cumulativeProbability(double x) throws MathException {\n        if (Math.abs(x - mean) > 20 * standardDeviation) {\n            return x < mean ? 0.0 : 1.0;\n        }\n        return 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0))));\n    }\n",
        "index": 69,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 2,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues"
        ],
        "failing_tests": [],
        "sum_entropy": -2.396759314094538,
        "mean_entropy": -0.012614522705760725,
        "pass_FIB_num": 6,
        "pass_FIB": [
          "Math_103_n18.txt",
          "Math_103_n28.txt",
          "Math_103_n13.txt",
          "Math_103_n26.txt",
          "Math_103_n34.txt",
          "Math_103_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * For this distribution, X, this method returns P(X &lt; <code>x</code>).\n     * @param x the value at which the CDF is evaluated.\n     * @return CDF evaluated at <code>x</code>. \n     * @throws MathException if the algorithm fails to converge; unless\n     * x is more than 20 standard deviations from the mean, in which case the\n     * convergence exception is caught and 0 or 1 is returned.\n     */\n    public double cumulativeProbability(double x) throws MathException {\n        if (Math.abs(x - mean) > 20 * standardDeviation) {\n            return x < mean ? 0.0 : 1.0;\n        }\n        return 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0))));\n    }\n",
        "index": 72,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 2,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues"
        ],
        "failing_tests": [],
        "sum_entropy": -2.396759314094538,
        "mean_entropy": -0.012614522705760725,
        "pass_FIB_num": 6,
        "pass_FIB": [
          "Math_103_n18.txt",
          "Math_103_n28.txt",
          "Math_103_n13.txt",
          "Math_103_n26.txt",
          "Math_103_n34.txt",
          "Math_103_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n/**\n * For this distribution, X, this method returns P(X < x).\n * @param x the value at which the CDF is evaluated.\n * @return CDF evaluated at x. \n * @throws MathException if the algorithm fails to converge; unless\n * x is more than 20 standard deviations from the mean, in which case the\n * convergence exception is caught and 0 or 1 is returned.\n */\npublic double cumulativeProbability(double x) throws MathException {\n    if (Math.abs(x - mean) > 20 * standardDeviation) {\n        if (x < mean) {\n            return 0.0;\n        } else {\n            return 1.0;\n        }\n    }\n    return 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0))));\n}\n",
        "index": 30,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 2,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues"
        ],
        "failing_tests": [],
        "sum_entropy": -9.05824350173847,
        "mean_entropy": -0.05004554420849984,
        "pass_FIB_num": 6,
        "pass_FIB": [
          "Math_103_n18.txt",
          "Math_103_n28.txt",
          "Math_103_n13.txt",
          "Math_103_n26.txt",
          "Math_103_n34.txt",
          "Math_103_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * For this distribution, X, this method returns P(X < x).\n     * @param x the value at which the CDF is evaluated.\n     * @return CDF evaluated at x.\n     * @throws MathException if the algorithm fails to converge; unless\n     * x is more than 20 standard deviations from the mean, in which case the\n     * convergence exception is caught and 0 or 1 is returned.\n     */\n    public double cumulativeProbability(double x) throws MathException {\n            if (Math.abs(x - mean) > 20 * standardDeviation) {\n                return x < mean ? 0.0 : 1.0;\n            }\n            return 0.5 * (1.0 + Erf.erf((x - mean) /\n                    (standardDeviation * Math.sqrt(2.0))));\n    }\n",
        "index": 82,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 2,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues"
        ],
        "failing_tests": [],
        "sum_entropy": -9.018600055746061,
        "mean_entropy": -0.050383240534894194,
        "pass_FIB_num": 6,
        "pass_FIB": [
          "Math_103_n18.txt",
          "Math_103_n28.txt",
          "Math_103_n13.txt",
          "Math_103_n26.txt",
          "Math_103_n34.txt",
          "Math_103_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * For this distribution, X, this method returns P(X &lt; <code>x</code>).\n     * @param x the value at which the CDF is evaluated.\n     * @return CDF evaluated at <code>x</code>. \n     * @throws MathException if the algorithm fails to converge; unless\n     * x is more than 20 standard deviations from the mean, in which case the\n     * convergence exception is caught and 0 or 1 is returned.\n     */\n    public double cumulativeProbability(double x) throws MathException {\n        double z = (x - mean) / (standardDeviation * Math.sqrt(2.0));\n        if (Math.abs(z) > 20.0) {\n            if (z > 0) {\n                return 1.0; // x is very large compared to mean\n            } else {\n                return 0.0; // x is very small compared to mean\n            }\n        }\n        return 0.5 * (1.0 + Erf.erf(z));\n    }\n",
        "index": 14,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 2,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues"
        ],
        "failing_tests": [],
        "sum_entropy": -12.170596569094688,
        "mean_entropy": -0.05457666622912416,
        "pass_FIB_num": 6,
        "pass_FIB": [
          "Math_103_n18.txt",
          "Math_103_n28.txt",
          "Math_103_n13.txt",
          "Math_103_n26.txt",
          "Math_103_n34.txt",
          "Math_103_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * For this distribution, X, this method returns P(X < x).\n     * @param x the value at which the CDF is evaluated.\n     * @return CDF evaluated at x. \n     * @throws MathException if the algorithm fails to converge; unless\n     * x is more than 20 standard deviations from the mean, in which case the\n     * convergence exception is caught and 0 or 1 is returned.\n     */\n    public double cumulativeProbability(double x) throws MathException {\n        if (Math.abs(x - mean) > 20.0 * standardDeviation) {\n            if (x - mean > 0) {\n                return 1.0;\n            } else {\n                return 0.0;\n            }\n        } else {\n            return 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0))));\n        }\n    }\n",
        "index": 83,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 2,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues"
        ],
        "failing_tests": [],
        "sum_entropy": -12.051499824713732,
        "mean_entropy": -0.06025749912356866,
        "pass_FIB_num": 6,
        "pass_FIB": [
          "Math_103_n18.txt",
          "Math_103_n28.txt",
          "Math_103_n13.txt",
          "Math_103_n26.txt",
          "Math_103_n34.txt",
          "Math_103_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * For this distribution, X, this method returns P(X &lt; <code>x</code>).\n     * @param x the value at which the CDF is evaluated.\n     * @return CDF evaluated at <code>x</code>. \n     * @throws MathException if the algorithm fails to converge; unless\n     * x is more than 20 standard deviations from the mean, in which case the\n     * convergence exception is caught and 0 or 1 is returned.\n     */\n    public double cumulativeProbability(double x) throws MathException {\n        if (Math.abs(x - mean) > 20 * standardDeviation) {\n            return x - mean > 0 ? 1.0 : 0.0; // Return 1 if x is significantly greater than mean, else return 0\n        }\n        return 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0))));\n    }\n",
        "index": 35,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 2,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues"
        ],
        "failing_tests": [],
        "sum_entropy": -13.523210800700904,
        "mean_entropy": -0.06439624190809955,
        "pass_FIB_num": 6,
        "pass_FIB": [
          "Math_103_n18.txt",
          "Math_103_n28.txt",
          "Math_103_n13.txt",
          "Math_103_n26.txt",
          "Math_103_n34.txt",
          "Math_103_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      }
    ]
  }
}