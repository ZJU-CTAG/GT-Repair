{
  "Gson_15_gson/src/main/java/com/google/gson/stream/JsonWriter.java_486_501": {
    "patches": [
      {
        "patch": "\n  /**\n   * Encodes {@code value}.\n   *\n   * @param value a finite value. May not be {@link Double#isNaN() NaNs} or\n   *     {@link Double#isInfinite() infinities}.\n   * @return this writer.\n   */\n  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\n    if (!lenient && (Double.isNaN(value) || Double.isInfinite(value))) {\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }\n",
        "index": 48,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 76,
        "failing_relevant": 0,
        "passing_tests": [
          "com.google.gson.stream.JsonWriterTest::testNonFiniteDoublesWhenLenient"
        ],
        "failing_tests": [],
        "sum_entropy": -1.0468477536352498,
        "mean_entropy": -0.007930664800267044,
        "pass_FIB_num": 7,
        "pass_FIB": [
          "Gson_15_n27.txt",
          "Gson_15_n35.txt",
          "Gson_15_n42.txt",
          "Gson_15_n21.txt",
          "Gson_15_n3.txt",
          "Gson_15_n9.txt",
          "Gson_15_n41.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n  /**\n   * Encodes {@code value}.\n   *\n   * @param value a finite value. May not be {@link Double#isNaN() NaNs} or\n   *     {@link Double#isInfinite() infinities}.\n   * @return this writer.\n   */\n  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\n    if (!lenient && (Double.isNaN(value) || Double.isInfinite(value))) {\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }\n",
        "index": 50,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 76,
        "failing_relevant": 0,
        "passing_tests": [
          "com.google.gson.stream.JsonWriterTest::testNonFiniteDoublesWhenLenient"
        ],
        "failing_tests": [],
        "sum_entropy": -1.0468477536352498,
        "mean_entropy": -0.007930664800267044,
        "pass_FIB_num": 7,
        "pass_FIB": [
          "Gson_15_n27.txt",
          "Gson_15_n35.txt",
          "Gson_15_n42.txt",
          "Gson_15_n21.txt",
          "Gson_15_n3.txt",
          "Gson_15_n9.txt",
          "Gson_15_n41.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n  /**\n   * Encodes {@code value}.\n   *\n   * @param value a finite value. May not be {@link Double#isNaN() NaNs} or\n   *     {@link Double#isInfinite() infinities}.\n   * @return this writer.\n   */\n  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\n    if (!lenient && (Double.isNaN(value) || Double.isInfinite(value))) {\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }\n",
        "index": 51,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 76,
        "failing_relevant": 0,
        "passing_tests": [
          "com.google.gson.stream.JsonWriterTest::testNonFiniteDoublesWhenLenient"
        ],
        "failing_tests": [],
        "sum_entropy": -1.0468477536352498,
        "mean_entropy": -0.007930664800267044,
        "pass_FIB_num": 7,
        "pass_FIB": [
          "Gson_15_n27.txt",
          "Gson_15_n35.txt",
          "Gson_15_n42.txt",
          "Gson_15_n21.txt",
          "Gson_15_n3.txt",
          "Gson_15_n9.txt",
          "Gson_15_n41.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n  /**\n   * Encodes {@code value}.\n   *\n   * @param value a finite value. May not be {@link Double#isNaN() NaNs} or\n   *     {@link Double#isInfinite() infinities}.\n   * @return this writer.\n   */\n  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\n    if (!lenient && (Double.isNaN(value) || Double.isInfinite(value))) {\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }\n",
        "index": 52,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 76,
        "failing_relevant": 0,
        "passing_tests": [
          "com.google.gson.stream.JsonWriterTest::testNonFiniteDoublesWhenLenient"
        ],
        "failing_tests": [],
        "sum_entropy": -1.0468477536352498,
        "mean_entropy": -0.007930664800267044,
        "pass_FIB_num": 7,
        "pass_FIB": [
          "Gson_15_n27.txt",
          "Gson_15_n35.txt",
          "Gson_15_n42.txt",
          "Gson_15_n21.txt",
          "Gson_15_n3.txt",
          "Gson_15_n9.txt",
          "Gson_15_n41.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n  /**\n   * Encodes {@code value}.\n   *\n   * @param value a finite value. May not be {@link Double#isNaN() NaNs} or\n   *     {@link Double#isInfinite() infinities}.\n   * @return this writer.\n   */\n  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\n    if (!lenient && (Double.isNaN(value) || Double.isInfinite(value))) {\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }\n",
        "index": 53,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 76,
        "failing_relevant": 0,
        "passing_tests": [
          "com.google.gson.stream.JsonWriterTest::testNonFiniteDoublesWhenLenient"
        ],
        "failing_tests": [],
        "sum_entropy": -1.0468477536352498,
        "mean_entropy": -0.007930664800267044,
        "pass_FIB_num": 7,
        "pass_FIB": [
          "Gson_15_n27.txt",
          "Gson_15_n35.txt",
          "Gson_15_n42.txt",
          "Gson_15_n21.txt",
          "Gson_15_n3.txt",
          "Gson_15_n9.txt",
          "Gson_15_n41.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n  /**\n   * Encodes {@code value}.\n   *\n   * @param value a finite value. May not be {@link Double#isNaN() NaNs} or\n   *     {@link Double#isInfinite() infinities}.\n   * @return this writer.\n   */\n  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\n    if (!lenient && (Double.isNaN(value) || Double.isInfinite(value))) {\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }\n",
        "index": 55,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 76,
        "failing_relevant": 0,
        "passing_tests": [
          "com.google.gson.stream.JsonWriterTest::testNonFiniteDoublesWhenLenient"
        ],
        "failing_tests": [],
        "sum_entropy": -1.0468477536352498,
        "mean_entropy": -0.007930664800267044,
        "pass_FIB_num": 7,
        "pass_FIB": [
          "Gson_15_n27.txt",
          "Gson_15_n35.txt",
          "Gson_15_n42.txt",
          "Gson_15_n21.txt",
          "Gson_15_n3.txt",
          "Gson_15_n9.txt",
          "Gson_15_n41.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n  /**\n   * Encodes {@code value}.\n   *\n   * @param value a finite value. May not be {@link Double#isNaN() NaNs} or\n   *     {@link Double#isInfinite() infinities}.\n   * @return this writer.\n   */\n  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\n    if (!lenient && (Double.isNaN(value) || Double.isInfinite(value))) {\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }\n",
        "index": 60,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 76,
        "failing_relevant": 0,
        "passing_tests": [
          "com.google.gson.stream.JsonWriterTest::testNonFiniteDoublesWhenLenient"
        ],
        "failing_tests": [],
        "sum_entropy": -1.0468477536352498,
        "mean_entropy": -0.007930664800267044,
        "pass_FIB_num": 7,
        "pass_FIB": [
          "Gson_15_n27.txt",
          "Gson_15_n35.txt",
          "Gson_15_n42.txt",
          "Gson_15_n21.txt",
          "Gson_15_n3.txt",
          "Gson_15_n9.txt",
          "Gson_15_n41.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n  /**\n   * Encodes {@code value}.\n   *\n   * @param value a finite value. May not be {@link Double#isNaN() NaNs} or\n   *     {@link Double#isInfinite() infinities}.\n   * @return this writer.\n   */\n  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\n    if (!lenient && (Double.isNaN(value) || Double.isInfinite(value))) {\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }\n",
        "index": 62,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 76,
        "failing_relevant": 0,
        "passing_tests": [
          "com.google.gson.stream.JsonWriterTest::testNonFiniteDoublesWhenLenient"
        ],
        "failing_tests": [],
        "sum_entropy": -1.0468477536352498,
        "mean_entropy": -0.007930664800267044,
        "pass_FIB_num": 7,
        "pass_FIB": [
          "Gson_15_n27.txt",
          "Gson_15_n35.txt",
          "Gson_15_n42.txt",
          "Gson_15_n21.txt",
          "Gson_15_n3.txt",
          "Gson_15_n9.txt",
          "Gson_15_n41.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n  /**\n   * Encodes {@code value}.\n   *\n   * @param value a finite value. May not be {@link Double#isNaN() NaNs} or\n   *     {@link Double#isInfinite() infinities}.\n   * @return this writer.\n   */\n  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\n    if (!lenient && (Double.isNaN(value) || Double.isInfinite(value))) {\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }\n",
        "index": 63,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 76,
        "failing_relevant": 0,
        "passing_tests": [
          "com.google.gson.stream.JsonWriterTest::testNonFiniteDoublesWhenLenient"
        ],
        "failing_tests": [],
        "sum_entropy": -1.0468477536352498,
        "mean_entropy": -0.007930664800267044,
        "pass_FIB_num": 7,
        "pass_FIB": [
          "Gson_15_n27.txt",
          "Gson_15_n35.txt",
          "Gson_15_n42.txt",
          "Gson_15_n21.txt",
          "Gson_15_n3.txt",
          "Gson_15_n9.txt",
          "Gson_15_n41.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n  /**\n   * Encodes {@code value}.\n   *\n   * @param value a finite value. May not be {@link Double#isNaN() NaNs} or\n   *     {@link Double#isInfinite() infinities}.\n   * @return this writer.\n   */\n  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\n    if (!lenient && (Double.isNaN(value) || Double.isInfinite(value))) {\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }\n",
        "index": 36,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 76,
        "failing_relevant": 0,
        "passing_tests": [
          "com.google.gson.stream.JsonWriterTest::testNonFiniteDoublesWhenLenient"
        ],
        "failing_tests": [],
        "sum_entropy": -1.0554307605957205,
        "mean_entropy": -0.00799568758027061,
        "pass_FIB_num": 7,
        "pass_FIB": [
          "Gson_15_n27.txt",
          "Gson_15_n35.txt",
          "Gson_15_n42.txt",
          "Gson_15_n21.txt",
          "Gson_15_n3.txt",
          "Gson_15_n9.txt",
          "Gson_15_n41.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n  /**\n   * Encodes {@code value}.\n   *\n   * @param value a finite value. May not be {@link Double#isNaN() NaNs} or\n   *     {@link Double#isInfinite() infinities}.\n   * @return this writer.\n   */\n  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\n    if (!lenient && (Double.isNaN(value) || Double.isInfinite(value))) {\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }\n",
        "index": 37,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 76,
        "failing_relevant": 0,
        "passing_tests": [
          "com.google.gson.stream.JsonWriterTest::testNonFiniteDoublesWhenLenient"
        ],
        "failing_tests": [],
        "sum_entropy": -1.0554307605957205,
        "mean_entropy": -0.00799568758027061,
        "pass_FIB_num": 7,
        "pass_FIB": [
          "Gson_15_n27.txt",
          "Gson_15_n35.txt",
          "Gson_15_n42.txt",
          "Gson_15_n21.txt",
          "Gson_15_n3.txt",
          "Gson_15_n9.txt",
          "Gson_15_n41.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n  /**\n   * Encodes {@code value}.\n   *\n   * @param value a finite value. May not be {@link Double#isNaN() NaNs} or\n   *     {@link Double#isInfinite() infinities}.\n   * @return this writer.\n   */\n  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\n    if (!lenient && (Double.isNaN(value) || Double.isInfinite(value))) {\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }\n",
        "index": 38,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 76,
        "failing_relevant": 0,
        "passing_tests": [
          "com.google.gson.stream.JsonWriterTest::testNonFiniteDoublesWhenLenient"
        ],
        "failing_tests": [],
        "sum_entropy": -1.0554307605957205,
        "mean_entropy": -0.00799568758027061,
        "pass_FIB_num": 7,
        "pass_FIB": [
          "Gson_15_n27.txt",
          "Gson_15_n35.txt",
          "Gson_15_n42.txt",
          "Gson_15_n21.txt",
          "Gson_15_n3.txt",
          "Gson_15_n9.txt",
          "Gson_15_n41.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n  /**\n   * Encodes {@code value}.\n   *\n   * @param value a finite value. May not be {@link Double#isNaN() NaNs} or\n   *     {@link Double#isInfinite() infinities}.\n   * @return this writer.\n   */\n  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\n    if (!lenient && (Double.isNaN(value) || Double.isInfinite(value))) {\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }\n",
        "index": 40,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 76,
        "failing_relevant": 0,
        "passing_tests": [
          "com.google.gson.stream.JsonWriterTest::testNonFiniteDoublesWhenLenient"
        ],
        "failing_tests": [],
        "sum_entropy": -1.0554307605957205,
        "mean_entropy": -0.00799568758027061,
        "pass_FIB_num": 7,
        "pass_FIB": [
          "Gson_15_n27.txt",
          "Gson_15_n35.txt",
          "Gson_15_n42.txt",
          "Gson_15_n21.txt",
          "Gson_15_n3.txt",
          "Gson_15_n9.txt",
          "Gson_15_n41.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n  /**\n   * Encodes {@code value}.\n   *\n   * @param value a finite value. May not be {@link Double#isNaN() NaNs} or\n   *     {@link Double#isInfinite() infinities}.\n   * @return this writer.\n   */\n  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\n    if (!lenient && (Double.isNaN(value) || Double.isInfinite(value))) {\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }\n",
        "index": 42,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 76,
        "failing_relevant": 0,
        "passing_tests": [
          "com.google.gson.stream.JsonWriterTest::testNonFiniteDoublesWhenLenient"
        ],
        "failing_tests": [],
        "sum_entropy": -1.0554307605957205,
        "mean_entropy": -0.00799568758027061,
        "pass_FIB_num": 7,
        "pass_FIB": [
          "Gson_15_n27.txt",
          "Gson_15_n35.txt",
          "Gson_15_n42.txt",
          "Gson_15_n21.txt",
          "Gson_15_n3.txt",
          "Gson_15_n9.txt",
          "Gson_15_n41.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n  /**\n   * Encodes {@code value}.\n   *\n   * @param value a finite value. May not be {@link Double#isNaN() NaNs} or\n   *     {@link Double#isInfinite() infinities}.\n   * @return this writer.\n   */\n  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\n    if (!lenient && (Double.isNaN(value) || Double.isInfinite(value))) {\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }\n",
        "index": 43,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 76,
        "failing_relevant": 0,
        "passing_tests": [
          "com.google.gson.stream.JsonWriterTest::testNonFiniteDoublesWhenLenient"
        ],
        "failing_tests": [],
        "sum_entropy": -1.0554307605957205,
        "mean_entropy": -0.00799568758027061,
        "pass_FIB_num": 7,
        "pass_FIB": [
          "Gson_15_n27.txt",
          "Gson_15_n35.txt",
          "Gson_15_n42.txt",
          "Gson_15_n21.txt",
          "Gson_15_n3.txt",
          "Gson_15_n9.txt",
          "Gson_15_n41.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n/**\n * Encodes {@code value}.\n *\n * @param value a finite value. May not be {@link Double#isNaN() NaNs} or\n *     {@link Double#isInfinite() infinities}.\n * @return this writer.\n */\npublic JsonWriter value(double value) throws IOException {\n    writeDeferredName();\n    if (!lenient && (Double.isNaN(value) || Double.isInfinite(value))) {\n        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n}\n",
        "index": 39,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 76,
        "failing_relevant": 0,
        "passing_tests": [
          "com.google.gson.stream.JsonWriterTest::testNonFiniteDoublesWhenLenient"
        ],
        "failing_tests": [],
        "sum_entropy": -3.46279728244615,
        "mean_entropy": -0.028152823434521548,
        "pass_FIB_num": 7,
        "pass_FIB": [
          "Gson_15_n27.txt",
          "Gson_15_n35.txt",
          "Gson_15_n42.txt",
          "Gson_15_n21.txt",
          "Gson_15_n3.txt",
          "Gson_15_n9.txt",
          "Gson_15_n41.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n/**\n * Encodes {@code value}.\n *\n * @param value a finite value. May not be {@link Double#isNaN() NaNs} or\n *     {@link Double#isInfinite() infinities}.\n * @return this writer.\n */\npublic JsonWriter value(double value) throws IOException {\n    writeDeferredName();\n    if (!lenient && (Double.isNaN(value) || Double.isInfinite(value))) {\n        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n}\n",
        "index": 47,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 76,
        "failing_relevant": 0,
        "passing_tests": [
          "com.google.gson.stream.JsonWriterTest::testNonFiniteDoublesWhenLenient"
        ],
        "failing_tests": [],
        "sum_entropy": -3.46279728244615,
        "mean_entropy": -0.028152823434521548,
        "pass_FIB_num": 7,
        "pass_FIB": [
          "Gson_15_n27.txt",
          "Gson_15_n35.txt",
          "Gson_15_n42.txt",
          "Gson_15_n21.txt",
          "Gson_15_n3.txt",
          "Gson_15_n9.txt",
          "Gson_15_n41.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n  /**\n   * Encodes {@code value}.\n   *\n   * @param value a finite value. May not be {@link Double#isNaN() NaNs} or\n   *     {@link Double#isInfinite() infinities}.\n   * @return this writer.\n   */\n  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\n    if (!lenient && (value == Double.POSITIVE_INFINITY || value == Double.NEGATIVE_INFINITY || Double.isNaN(value))) {\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }\n",
        "index": 17,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 76,
        "failing_relevant": 0,
        "passing_tests": [
          "com.google.gson.stream.JsonWriterTest::testNonFiniteDoublesWhenLenient"
        ],
        "failing_tests": [],
        "sum_entropy": -5.083369909963774,
        "mean_entropy": -0.03630978507116981,
        "pass_FIB_num": 7,
        "pass_FIB": [
          "Gson_15_n27.txt",
          "Gson_15_n35.txt",
          "Gson_15_n42.txt",
          "Gson_15_n21.txt",
          "Gson_15_n3.txt",
          "Gson_15_n9.txt",
          "Gson_15_n41.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n  /**\n   * Encodes {@code value}.\n   *\n   * @param value a finite value. May not be {@link Double#isNaN() NaNs} or\n   *     {@link Double#isInfinite() infinities}.\n   * @return this writer.\n   */\n  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\n    beforeValue();\n    if (!lenient && (Double.isNaN(value) || Double.isInfinite(value))) {\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    out.append(Double.toString(value));\n    return this;\n  }\n",
        "index": 69,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 76,
        "failing_relevant": 0,
        "passing_tests": [
          "com.google.gson.stream.JsonWriterTest::testNonFiniteDoublesWhenLenient"
        ],
        "failing_tests": [],
        "sum_entropy": -5.6240899759620016,
        "mean_entropy": -0.042606742242136376,
        "pass_FIB_num": 7,
        "pass_FIB": [
          "Gson_15_n27.txt",
          "Gson_15_n35.txt",
          "Gson_15_n42.txt",
          "Gson_15_n21.txt",
          "Gson_15_n3.txt",
          "Gson_15_n9.txt",
          "Gson_15_n41.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n/**\n * Encodes {@code value}.\n *\n * @param value a finite value. May not be {@link Double#isNaN() NaNs} or\n *     {@link Double#isInfinite() infinities}.\n * @return this writer.\n */\npublic JsonWriter value(double value) throws IOException {\n    writeDeferredName();\n    if (!lenient && (Double.isNaN(value) || Double.isInfinite(value))) {\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n}\n",
        "index": 71,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 76,
        "failing_relevant": 0,
        "passing_tests": [
          "com.google.gson.stream.JsonWriterTest::testNonFiniteDoublesWhenLenient"
        ],
        "failing_tests": [],
        "sum_entropy": -6.103487900911543,
        "mean_entropy": -0.04962185285293937,
        "pass_FIB_num": 7,
        "pass_FIB": [
          "Gson_15_n27.txt",
          "Gson_15_n35.txt",
          "Gson_15_n42.txt",
          "Gson_15_n21.txt",
          "Gson_15_n3.txt",
          "Gson_15_n9.txt",
          "Gson_15_n41.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      }
    ]
  }
}