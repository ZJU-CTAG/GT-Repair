{
  "Chart_11_source/org/jfree/chart/util/ShapeUtilities.java_255_296": {
    "patches": [
      {
        "patch": "\n    /**\n     * Tests two polygons for equality.  If both are <code>null</code> this\n     * method returns <code>true</code>.\n     *\n     * @param p1  path 1 (<code>null</code> permitted).\n     * @param p2  path 2 (<code>null</code> permitted).\n     *\n     * @return A boolean.\n     */\n    public static boolean equal(GeneralPath p1, GeneralPath p2) {\n        if (p1 == null) {\n            return (p2 == null);\n        }\n        if (p2 == null) {\n            return false;\n        }\n        if (p1.getWindingRule() != p2.getWindingRule()) {\n            return false;\n        }\n        PathIterator iterator1 = p1.getPathIterator(null);\n        PathIterator iterator2 = p2.getPathIterator(null); // Fixed: Changed p1 to p2\n        double[] d1 = new double[6];\n        double[] d2 = new double[6];\n        boolean done = iterator1.isDone() && iterator2.isDone();\n        while (!done) {\n            if (iterator1.isDone() != iterator2.isDone()) {\n                return false;\n            }\n            int seg1 = iterator1.currentSegment(d1);\n            int seg2 = iterator2.currentSegment(d2);\n            if (seg1 != seg2) {\n                return false;\n            }\n            if (!Arrays.equals(d1, d2)) {\n                return false;\n            }\n            iterator1.next();\n            iterator2.next();\n            done = iterator1.isDone() && iterator2.isDone();\n        }\n        return true;\n    }\n",
        "index": 36,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 105,
        "failing_relevant": 0,
        "passing_tests": [
          "org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths"
        ],
        "failing_tests": [],
        "sum_entropy": -3.2694226375546,
        "mean_entropy": -0.00944919837443526,
        "pass_FIB_num": 15,
        "pass_FIB": [
          "Chart_11_n41.txt",
          "Chart_11_n1.txt",
          "Chart_11_n9.txt",
          "Chart_11_n17.txt",
          "Chart_11_n44.txt",
          "Chart_11_n14.txt",
          "Chart_11_n30.txt",
          "Chart_11_n47.txt",
          "Chart_11_n21.txt",
          "Chart_11_n35.txt",
          "Chart_11_n0.txt",
          "Chart_11_n29.txt",
          "Chart_11_n19.txt",
          "Chart_11_n6.txt",
          "Chart_11_n45.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Tests two polygons for equality.  If both are <code>null</code> this\n     * method returns <code>true</code>.\n     *\n     * @param p1  path 1 (<code>null</code> permitted).\n     * @param p2  path 2 (<code>null</code> permitted).\n     *\n     * @return A boolean.\n     */\n    public static boolean equal(GeneralPath p1, GeneralPath p2) {\n        if (p1 == null) {\n            return (p2 == null);\n        }\n        if (p2 == null) {\n            return false;\n        }\n        if (p1.getWindingRule() != p2.getWindingRule()) {\n            return false;\n        }\n        PathIterator iterator1 = p1.getPathIterator(null);\n        PathIterator iterator2 = p2.getPathIterator(null); // Fixed: Changed p1 to p2\n        double[] d1 = new double[6];\n        double[] d2 = new double[6];\n        boolean done = iterator1.isDone() && iterator2.isDone();\n        while (!done) {\n            if (iterator1.isDone() != iterator2.isDone()) {\n                return false;\n            }\n            int seg1 = iterator1.currentSegment(d1);\n            int seg2 = iterator2.currentSegment(d2);\n            if (seg1 != seg2) {\n                return false;\n            }\n            if (!Arrays.equals(d1, d2)) {\n                return false;\n            }\n            iterator1.next();\n            iterator2.next();\n            done = iterator1.isDone() && iterator2.isDone();\n        }\n        return true;\n    }\n",
        "index": 37,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 105,
        "failing_relevant": 0,
        "passing_tests": [
          "org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths"
        ],
        "failing_tests": [],
        "sum_entropy": -3.2694226375546,
        "mean_entropy": -0.00944919837443526,
        "pass_FIB_num": 15,
        "pass_FIB": [
          "Chart_11_n41.txt",
          "Chart_11_n1.txt",
          "Chart_11_n9.txt",
          "Chart_11_n17.txt",
          "Chart_11_n44.txt",
          "Chart_11_n14.txt",
          "Chart_11_n30.txt",
          "Chart_11_n47.txt",
          "Chart_11_n21.txt",
          "Chart_11_n35.txt",
          "Chart_11_n0.txt",
          "Chart_11_n29.txt",
          "Chart_11_n19.txt",
          "Chart_11_n6.txt",
          "Chart_11_n45.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Tests two polygons for equality.  If both are <code>null</code> this\n     * method returns <code>true</code>.\n     *\n     * @param p1  path 1 (<code>null</code> permitted).\n     * @param p2  path 2 (<code>null</code> permitted).\n     *\n     * @return A boolean.\n     */\n    public static boolean equal(GeneralPath p1, GeneralPath p2) {\n        if (p1 == null) {\n            return (p2 == null);\n        }\n        if (p2 == null) {\n            return false;\n        }\n        if (p1.getWindingRule() != p2.getWindingRule()) {\n            return false;\n        }\n        PathIterator iterator1 = p1.getPathIterator(null);\n        PathIterator iterator2 = p2.getPathIterator(null); // Fixed: Changed p1 to p2\n        double[] d1 = new double[6];\n        double[] d2 = new double[6];\n        boolean done = iterator1.isDone() && iterator2.isDone();\n        while (!done) {\n            if (iterator1.isDone() != iterator2.isDone()) {\n                return false;\n            }\n            int seg1 = iterator1.currentSegment(d1);\n            int seg2 = iterator2.currentSegment(d2);\n            if (seg1 != seg2) {\n                return false;\n            }\n            if (!Arrays.equals(d1, d2)) {\n                return false;\n            }\n            iterator1.next();\n            iterator2.next();\n            done = iterator1.isDone() && iterator2.isDone();\n        }\n        return true;\n    }\n",
        "index": 38,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 105,
        "failing_relevant": 0,
        "passing_tests": [
          "org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths"
        ],
        "failing_tests": [],
        "sum_entropy": -3.2694226375546,
        "mean_entropy": -0.00944919837443526,
        "pass_FIB_num": 15,
        "pass_FIB": [
          "Chart_11_n41.txt",
          "Chart_11_n1.txt",
          "Chart_11_n9.txt",
          "Chart_11_n17.txt",
          "Chart_11_n44.txt",
          "Chart_11_n14.txt",
          "Chart_11_n30.txt",
          "Chart_11_n47.txt",
          "Chart_11_n21.txt",
          "Chart_11_n35.txt",
          "Chart_11_n0.txt",
          "Chart_11_n29.txt",
          "Chart_11_n19.txt",
          "Chart_11_n6.txt",
          "Chart_11_n45.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Tests two polygons for equality.  If both are <code>null</code> this\n     * method returns <code>true</code>.\n     *\n     * @param p1  path 1 (<code>null</code> permitted).\n     * @param p2  path 2 (<code>null</code> permitted).\n     *\n     * @return A boolean.\n     */\n    public static boolean equal(GeneralPath p1, GeneralPath p2) {\n        if (p1 == null) {\n            return (p2 == null);\n        }\n        if (p2 == null) {\n            return false;\n        }\n        if (p1.getWindingRule() != p2.getWindingRule()) {\n            return false;\n        }\n        PathIterator iterator1 = p1.getPathIterator(null);\n        PathIterator iterator2 = p2.getPathIterator(null); // Fixed: Changed p1 to p2\n        double[] d1 = new double[6];\n        double[] d2 = new double[6];\n        boolean done = iterator1.isDone() && iterator2.isDone();\n        while (!done) {\n            if (iterator1.isDone() != iterator2.isDone()) {\n                return false;\n            }\n            int seg1 = iterator1.currentSegment(d1);\n            int seg2 = iterator2.currentSegment(d2);\n            if (seg1 != seg2) {\n                return false;\n            }\n            if (!Arrays.equals(d1, d2)) {\n                return false;\n            }\n            iterator1.next();\n            iterator2.next();\n            done = iterator1.isDone() && iterator2.isDone();\n        }\n        return true;\n    }\n",
        "index": 82,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 105,
        "failing_relevant": 0,
        "passing_tests": [
          "org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths"
        ],
        "failing_tests": [],
        "sum_entropy": -3.365628787450946,
        "mean_entropy": -0.009727250830783081,
        "pass_FIB_num": 15,
        "pass_FIB": [
          "Chart_11_n41.txt",
          "Chart_11_n1.txt",
          "Chart_11_n9.txt",
          "Chart_11_n17.txt",
          "Chart_11_n44.txt",
          "Chart_11_n14.txt",
          "Chart_11_n30.txt",
          "Chart_11_n47.txt",
          "Chart_11_n21.txt",
          "Chart_11_n35.txt",
          "Chart_11_n0.txt",
          "Chart_11_n29.txt",
          "Chart_11_n19.txt",
          "Chart_11_n6.txt",
          "Chart_11_n45.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Tests two polygons for equality.  If both are <code>null</code> this\n     * method returns <code>true</code>.\n     *\n     * @param p1  path 1 (<code>null</code> permitted).\n     * @param p2  path 2 (<code>null</code> permitted).\n     *\n     * @return A boolean.\n     */\n    public static boolean equal(GeneralPath p1, GeneralPath p2) {\n        if (p1 == null) {\n            return (p2 == null);\n        }\n        if (p2 == null) {\n            return false;\n        }\n        if (p1.getWindingRule() != p2.getWindingRule()) {\n            return false;\n        }\n        PathIterator iterator1 = p1.getPathIterator(null);\n        PathIterator iterator2 = p2.getPathIterator(null); // Fixed: Changed p1 to p2\n        double[] d1 = new double[6];\n        double[] d2 = new double[6];\n        boolean done = iterator1.isDone() && iterator2.isDone();\n        while (!done) {\n            if (iterator1.isDone() != iterator2.isDone()) {\n                return false;\n            }\n            int seg1 = iterator1.currentSegment(d1);\n            int seg2 = iterator2.currentSegment(d2);\n            if (seg1 != seg2) {\n                return false;\n            }\n            if (!Arrays.equals(d1, d2)) {\n                return false;\n            }\n            iterator1.next();\n            iterator2.next();\n            done = iterator1.isDone() && iterator2.isDone();\n        }\n        return true;\n    }\n",
        "index": 84,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 105,
        "failing_relevant": 0,
        "passing_tests": [
          "org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths"
        ],
        "failing_tests": [],
        "sum_entropy": -3.365628787450946,
        "mean_entropy": -0.009727250830783081,
        "pass_FIB_num": 15,
        "pass_FIB": [
          "Chart_11_n41.txt",
          "Chart_11_n1.txt",
          "Chart_11_n9.txt",
          "Chart_11_n17.txt",
          "Chart_11_n44.txt",
          "Chart_11_n14.txt",
          "Chart_11_n30.txt",
          "Chart_11_n47.txt",
          "Chart_11_n21.txt",
          "Chart_11_n35.txt",
          "Chart_11_n0.txt",
          "Chart_11_n29.txt",
          "Chart_11_n19.txt",
          "Chart_11_n6.txt",
          "Chart_11_n45.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Tests two polygons for equality.  If both are <code>null</code> this\n     * method returns <code>true</code>.\n     *\n     * @param p1  path 1 (<code>null</code> permitted).\n     * @param p2  path 2 (<code>null</code> permitted).\n     *\n     * @return A boolean.\n     */\n    public static boolean equal(GeneralPath p1, GeneralPath p2) {\n        if (p1 == null) {\n            return (p2 == null);\n        }\n        if (p2 == null) {\n            return false;\n        }\n        if (p1.getWindingRule() != p2.getWindingRule()) {\n            return false;\n        }\n        PathIterator iterator1 = p1.getPathIterator(null);\n        PathIterator iterator2 = p2.getPathIterator(null); // Fixed: Changed p1 to p2\n        double[] d1 = new double[6];\n        double[] d2 = new double[6];\n        boolean done = iterator1.isDone() && iterator2.isDone();\n        while (!done) {\n            if (iterator1.isDone() != iterator2.isDone()) {\n                return false;\n            }\n            int seg1 = iterator1.currentSegment(d1);\n            int seg2 = iterator2.currentSegment(d2);\n            if (seg1 != seg2) {\n                return false;\n            }\n            if (!Arrays.equals(d1, d2)) {\n                return false;\n            }\n            iterator1.next();\n            iterator2.next();\n            done = iterator1.isDone() && iterator2.isDone();\n        }\n        return true;\n    }\n",
        "index": 92,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 105,
        "failing_relevant": 0,
        "passing_tests": [
          "org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths"
        ],
        "failing_tests": [],
        "sum_entropy": -3.365628787450946,
        "mean_entropy": -0.009727250830783081,
        "pass_FIB_num": 15,
        "pass_FIB": [
          "Chart_11_n41.txt",
          "Chart_11_n1.txt",
          "Chart_11_n9.txt",
          "Chart_11_n17.txt",
          "Chart_11_n44.txt",
          "Chart_11_n14.txt",
          "Chart_11_n30.txt",
          "Chart_11_n47.txt",
          "Chart_11_n21.txt",
          "Chart_11_n35.txt",
          "Chart_11_n0.txt",
          "Chart_11_n29.txt",
          "Chart_11_n19.txt",
          "Chart_11_n6.txt",
          "Chart_11_n45.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Tests two polygons for equality.  If both are <code>null</code> this\n     * method returns <code>true</code>.\n     *\n     * @param p1  path 1 (<code>null</code> permitted).\n     * @param p2  path 2 (<code>null</code> permitted).\n     *\n     * @return A boolean.\n     */\n    public static boolean equal(GeneralPath p1, GeneralPath p2) {\n        if (p1 == null) {\n            return (p2 == null);\n        }\n        if (p2 == null) {\n            return false;\n        }\n        if (p1.getWindingRule() != p2.getWindingRule()) {\n            return false;\n        }\n        PathIterator iterator1 = p1.getPathIterator(null);\n        PathIterator iterator2 = p2.getPathIterator(null); // Fixed: Changed p1 to p2\n        double[] d1 = new double[6];\n        double[] d2 = new double[6];\n        boolean done = iterator1.isDone() && iterator2.isDone();\n        while (!done) {\n            if (iterator1.isDone() != iterator2.isDone()) {\n                return false;\n            }\n            int seg1 = iterator1.currentSegment(d1);\n            int seg2 = iterator2.currentSegment(d2);\n            if (seg1 != seg2) {\n                return false;\n            }\n            if (!Arrays.equals(d1, d2)) {\n                return false;\n            }\n            iterator1.next();\n            iterator2.next();\n            done = iterator1.isDone() && iterator2.isDone();\n        }\n        return true;\n    }\n",
        "index": 2,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 105,
        "failing_relevant": 0,
        "passing_tests": [
          "org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths"
        ],
        "failing_tests": [],
        "sum_entropy": -3.394998742641154,
        "mean_entropy": -0.009812135094338596,
        "pass_FIB_num": 15,
        "pass_FIB": [
          "Chart_11_n41.txt",
          "Chart_11_n1.txt",
          "Chart_11_n9.txt",
          "Chart_11_n17.txt",
          "Chart_11_n44.txt",
          "Chart_11_n14.txt",
          "Chart_11_n30.txt",
          "Chart_11_n47.txt",
          "Chart_11_n21.txt",
          "Chart_11_n35.txt",
          "Chart_11_n0.txt",
          "Chart_11_n29.txt",
          "Chart_11_n19.txt",
          "Chart_11_n6.txt",
          "Chart_11_n45.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Tests two polygons for equality.  If both are <code>null</code> this\n     * method returns <code>true</code>.\n     *\n     * @param p1  path 1 (<code>null</code> permitted).\n     * @param p2  path 2 (<code>null</code> permitted).\n     *\n     * @return A boolean.\n     */\n    public static boolean equal(GeneralPath p1, GeneralPath p2) {\n        if (p1 == null) {\n            return (p2 == null);\n        }\n        if (p2 == null) {\n            return false;\n        }\n        if (p1.getWindingRule() != p2.getWindingRule()) {\n            return false;\n        }\n        PathIterator iterator1 = p1.getPathIterator(null);\n        PathIterator iterator2 = p2.getPathIterator(null); // Fixed: Changed p1 to p2\n        double[] d1 = new double[6];\n        double[] d2 = new double[6];\n        boolean done = iterator1.isDone() && iterator2.isDone();\n        while (!done) {\n            if (iterator1.isDone() != iterator2.isDone()) {\n                return false;\n            }\n            int seg1 = iterator1.currentSegment(d1);\n            int seg2 = iterator2.currentSegment(d2);\n            if (seg1 != seg2) {\n                return false;\n            }\n            if (!Arrays.equals(d1, d2)) {\n                return false;\n            }\n            iterator1.next();\n            iterator2.next();\n            done = iterator1.isDone() && iterator2.isDone();\n        }\n        return true;\n    }\n",
        "index": 7,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 105,
        "failing_relevant": 0,
        "passing_tests": [
          "org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths"
        ],
        "failing_tests": [],
        "sum_entropy": -3.394998742641154,
        "mean_entropy": -0.009812135094338596,
        "pass_FIB_num": 15,
        "pass_FIB": [
          "Chart_11_n41.txt",
          "Chart_11_n1.txt",
          "Chart_11_n9.txt",
          "Chart_11_n17.txt",
          "Chart_11_n44.txt",
          "Chart_11_n14.txt",
          "Chart_11_n30.txt",
          "Chart_11_n47.txt",
          "Chart_11_n21.txt",
          "Chart_11_n35.txt",
          "Chart_11_n0.txt",
          "Chart_11_n29.txt",
          "Chart_11_n19.txt",
          "Chart_11_n6.txt",
          "Chart_11_n45.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Tests two polygons for equality.  If both are <code>null</code> this\n     * method returns <code>true</code>.\n     *\n     * @param p1  path 1 (<code>null</code> permitted).\n     * @param p2  path 2 (<code>null</code> permitted).\n     *\n     * @return A boolean.\n     */\n    public static boolean equal(GeneralPath p1, GeneralPath p2) {\n        if (p1 == null) {\n            return (p2 == null);\n        }\n        if (p2 == null) {\n            return false;\n        }\n        if (p1.getWindingRule() != p2.getWindingRule()) {\n            return false;\n        }\n        PathIterator iterator1 = p1.getPathIterator(null);\n        PathIterator iterator2 = p2.getPathIterator(null); // Fixed: Changed p1 to p2\n        double[] d1 = new double[6];\n        double[] d2 = new double[6];\n        boolean done = iterator1.isDone() && iterator2.isDone();\n        while (!done) {\n            if (iterator1.isDone() != iterator2.isDone()) {\n                return false;\n            }\n            int seg1 = iterator1.currentSegment(d1);\n            int seg2 = iterator2.currentSegment(d2);\n            if (seg1 != seg2) {\n                return false;\n            }\n            if (!Arrays.equals(d1, d2)) {\n                return false;\n            }\n            iterator1.next();\n            iterator2.next();\n            done = iterator1.isDone() && iterator2.isDone();\n        }\n        return true;\n    }\n",
        "index": 63,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 105,
        "failing_relevant": 0,
        "passing_tests": [
          "org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths"
        ],
        "failing_tests": [],
        "sum_entropy": -3.4197705467267028,
        "mean_entropy": -0.0098837299038344,
        "pass_FIB_num": 15,
        "pass_FIB": [
          "Chart_11_n41.txt",
          "Chart_11_n1.txt",
          "Chart_11_n9.txt",
          "Chart_11_n17.txt",
          "Chart_11_n44.txt",
          "Chart_11_n14.txt",
          "Chart_11_n30.txt",
          "Chart_11_n47.txt",
          "Chart_11_n21.txt",
          "Chart_11_n35.txt",
          "Chart_11_n0.txt",
          "Chart_11_n29.txt",
          "Chart_11_n19.txt",
          "Chart_11_n6.txt",
          "Chart_11_n45.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Tests two polygons for equality.  If both are <code>null</code> this\n     * method returns <code>true</code>.\n     *\n     * @param p1  path 1 (<code>null</code> permitted).\n     * @param p2  path 2 (<code>null</code> permitted).\n     *\n     * @return A boolean.\n     */\n    public static boolean equal(GeneralPath p1, GeneralPath p2) {\n        if (p1 == null) {\n            return (p2 == null);\n        }\n        if (p2 == null) {\n            return false;\n        }\n        if (p1.getWindingRule() != p2.getWindingRule()) {\n            return false;\n        }\n        PathIterator iterator1 = p1.getPathIterator(null);\n        PathIterator iterator2 = p2.getPathIterator(null); // Fixed: Changed p1 to p2\n        double[] d1 = new double[6];\n        double[] d2 = new double[6];\n        boolean done = iterator1.isDone() && iterator2.isDone();\n        while (!done) {\n            if (iterator1.isDone() != iterator2.isDone()) {\n                return false;\n            }\n            int seg1 = iterator1.currentSegment(d1);\n            int seg2 = iterator2.currentSegment(d2);\n            if (seg1 != seg2) {\n                return false;\n            }\n            if (!Arrays.equals(d1, d2)) {\n                return false;\n            }\n            iterator1.next();\n            iterator2.next();\n            done = iterator1.isDone() && iterator2.isDone();\n        }\n        return true;\n    }\n",
        "index": 69,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 105,
        "failing_relevant": 0,
        "passing_tests": [
          "org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths"
        ],
        "failing_tests": [],
        "sum_entropy": -3.4197705467267028,
        "mean_entropy": -0.0098837299038344,
        "pass_FIB_num": 15,
        "pass_FIB": [
          "Chart_11_n41.txt",
          "Chart_11_n1.txt",
          "Chart_11_n9.txt",
          "Chart_11_n17.txt",
          "Chart_11_n44.txt",
          "Chart_11_n14.txt",
          "Chart_11_n30.txt",
          "Chart_11_n47.txt",
          "Chart_11_n21.txt",
          "Chart_11_n35.txt",
          "Chart_11_n0.txt",
          "Chart_11_n29.txt",
          "Chart_11_n19.txt",
          "Chart_11_n6.txt",
          "Chart_11_n45.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Tests two polygons for equality.  If both are <code>null</code> this\n     * method returns <code>true</code>.\n     *\n     * @param p1  path 1 (<code>null</code> permitted).\n     * @param p2  path 2 (<code>null</code> permitted).\n     *\n     * @return A boolean.\n     */\n    public static boolean equal(GeneralPath p1, GeneralPath p2) {\n        if (p1 == null) {\n            return (p2 == null);\n        }\n        if (p2 == null) {\n            return false;\n        }\n        if (p1.getWindingRule() != p2.getWindingRule()) {\n            return false;\n        }\n        PathIterator iterator1 = p1.getPathIterator(null);\n        PathIterator iterator2 = p2.getPathIterator(null); // Fixed: Changed p1 to p2\n        double[] d1 = new double[6];\n        double[] d2 = new double[6];\n        boolean done = iterator1.isDone() && iterator2.isDone();\n        while (!done) {\n            if (iterator1.isDone() != iterator2.isDone()) {\n                return false;\n            }\n            int seg1 = iterator1.currentSegment(d1);\n            int seg2 = iterator2.currentSegment(d2);\n            if (seg1 != seg2) {\n                return false;\n            }\n            if (!Arrays.equals(d1, d2)) {\n                return false;\n            }\n            iterator1.next();\n            iterator2.next();\n            done = iterator1.isDone() && iterator2.isDone();\n        }\n        return true;\n    }\n",
        "index": 72,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 105,
        "failing_relevant": 0,
        "passing_tests": [
          "org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths"
        ],
        "failing_tests": [],
        "sum_entropy": -3.4197705467267028,
        "mean_entropy": -0.0098837299038344,
        "pass_FIB_num": 15,
        "pass_FIB": [
          "Chart_11_n41.txt",
          "Chart_11_n1.txt",
          "Chart_11_n9.txt",
          "Chart_11_n17.txt",
          "Chart_11_n44.txt",
          "Chart_11_n14.txt",
          "Chart_11_n30.txt",
          "Chart_11_n47.txt",
          "Chart_11_n21.txt",
          "Chart_11_n35.txt",
          "Chart_11_n0.txt",
          "Chart_11_n29.txt",
          "Chart_11_n19.txt",
          "Chart_11_n6.txt",
          "Chart_11_n45.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Tests two polygons for equality.  If both are <code>null</code> this\n     * method returns <code>true</code>.\n     *\n     * @param p1  path 1 (<code>null</code> permitted).\n     * @param p2  path 2 (<code>null</code> permitted).\n     *\n     * @return A boolean.\n     */\n    public static boolean equal(GeneralPath p1, GeneralPath p2) {\n        if (p1 == null) {\n            return (p2 == null);\n        }\n        if (p2 == null) {\n            return false;\n        }\n        if (p1.getWindingRule() != p2.getWindingRule()) {\n            return false;\n        }\n        PathIterator iterator1 = p1.getPathIterator(null);\n        PathIterator iterator2 = p2.getPathIterator(null); // Fixed: Changed p1 to p2\n        double[] d1 = new double[6];\n        double[] d2 = new double[6];\n        boolean done = iterator1.isDone() && iterator2.isDone();\n        while (!done) {\n            if (iterator1.isDone() != iterator2.isDone()) {\n                return false;\n            }\n            int seg1 = iterator1.currentSegment(d1);\n            int seg2 = iterator2.currentSegment(d2);\n            if (seg1 != seg2) {\n                return false;\n            }\n            if (!Arrays.equals(d1, d2)) {\n                return false;\n            }\n            iterator1.next();\n            iterator2.next();\n            done = iterator1.isDone() && iterator2.isDone();\n        }\n        return true;\n    }\n",
        "index": 95,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 105,
        "failing_relevant": 0,
        "passing_tests": [
          "org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths"
        ],
        "failing_tests": [],
        "sum_entropy": -3.467572505583672,
        "mean_entropy": -0.010021885854288069,
        "pass_FIB_num": 15,
        "pass_FIB": [
          "Chart_11_n41.txt",
          "Chart_11_n1.txt",
          "Chart_11_n9.txt",
          "Chart_11_n17.txt",
          "Chart_11_n44.txt",
          "Chart_11_n14.txt",
          "Chart_11_n30.txt",
          "Chart_11_n47.txt",
          "Chart_11_n21.txt",
          "Chart_11_n35.txt",
          "Chart_11_n0.txt",
          "Chart_11_n29.txt",
          "Chart_11_n19.txt",
          "Chart_11_n6.txt",
          "Chart_11_n45.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Tests two polygons for equality.  If both are <code>null</code> this\n     * method returns <code>true</code>.\n     *\n     * @param p1  path 1 (<code>null</code> permitted).\n     * @param p2  path 2 (<code>null</code> permitted).\n     *\n     * @return A boolean.\n     */\n    public static boolean equal(GeneralPath p1, GeneralPath p2) {\n        if (p1 == null) {\n            return (p2 == null);\n        }\n        if (p2 == null) {\n            return false;\n        }\n        if (p1.getWindingRule() != p2.getWindingRule()) {\n            return false;\n        }\n        PathIterator iterator1 = p1.getPathIterator(null);\n        PathIterator iterator2 = p2.getPathIterator(null); // Fixed: Changed p1 to p2\n        double[] d1 = new double[6];\n        double[] d2 = new double[6];\n        boolean done = iterator1.isDone() && iterator2.isDone();\n        while (!done) {\n            if (iterator1.isDone() != iterator2.isDone()) {\n                return false;\n            }\n            int seg1 = iterator1.currentSegment(d1);\n            int seg2 = iterator2.currentSegment(d2);\n            if (seg1 != seg2) {\n                return false;\n            }\n            if (!Arrays.equals(d1, d2)) {\n                return false;\n            }\n            iterator1.next();\n            iterator2.next();\n            done = iterator1.isDone() && iterator2.isDone();\n        }\n        return true;\n    }\n",
        "index": 51,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 105,
        "failing_relevant": 0,
        "passing_tests": [
          "org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths"
        ],
        "failing_tests": [],
        "sum_entropy": -3.5235020094641714,
        "mean_entropy": -0.010183531819260612,
        "pass_FIB_num": 15,
        "pass_FIB": [
          "Chart_11_n41.txt",
          "Chart_11_n1.txt",
          "Chart_11_n9.txt",
          "Chart_11_n17.txt",
          "Chart_11_n44.txt",
          "Chart_11_n14.txt",
          "Chart_11_n30.txt",
          "Chart_11_n47.txt",
          "Chart_11_n21.txt",
          "Chart_11_n35.txt",
          "Chart_11_n0.txt",
          "Chart_11_n29.txt",
          "Chart_11_n19.txt",
          "Chart_11_n6.txt",
          "Chart_11_n45.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Tests two polygons for equality.  If both are <code>null</code> this\n     * method returns <code>true</code>.\n     *\n     * @param p1  path 1 (<code>null</code> permitted).\n     * @param p2  path 2 (<code>null</code> permitted).\n     *\n     * @return A boolean.\n     */\n    public static boolean equal(GeneralPath p1, GeneralPath p2) {\n        if (p1 == null) {\n            return (p2 == null);\n        }\n        if (p2 == null) {\n            return false;\n        }\n        if (p1.getWindingRule() != p2.getWindingRule()) {\n            return false;\n        }\n        PathIterator iterator1 = p1.getPathIterator(null);\n        PathIterator iterator2 = p2.getPathIterator(null); // Fixed: Changed p1 to p2\n        double[] d1 = new double[6];\n        double[] d2 = new double[6];\n        boolean done = iterator1.isDone() && iterator2.isDone();\n        while (!done) {\n            if (iterator1.isDone() != iterator2.isDone()) {\n                return false;\n            }\n            int seg1 = iterator1.currentSegment(d1);\n            int seg2 = iterator2.currentSegment(d2);\n            if (seg1 != seg2) {\n                return false;\n            }\n            if (!Arrays.equals(d1, d2)) {\n                return false;\n            }\n            iterator1.next();\n            iterator2.next();\n            done = iterator1.isDone() && iterator2.isDone();\n        }\n        return true;\n    }\n",
        "index": 21,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 105,
        "failing_relevant": 0,
        "passing_tests": [
          "org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths"
        ],
        "failing_tests": [],
        "sum_entropy": -3.6262063876520307,
        "mean_entropy": -0.010480365282231303,
        "pass_FIB_num": 15,
        "pass_FIB": [
          "Chart_11_n41.txt",
          "Chart_11_n1.txt",
          "Chart_11_n9.txt",
          "Chart_11_n17.txt",
          "Chart_11_n44.txt",
          "Chart_11_n14.txt",
          "Chart_11_n30.txt",
          "Chart_11_n47.txt",
          "Chart_11_n21.txt",
          "Chart_11_n35.txt",
          "Chart_11_n0.txt",
          "Chart_11_n29.txt",
          "Chart_11_n19.txt",
          "Chart_11_n6.txt",
          "Chart_11_n45.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Tests two polygons for equality.  If both are <code>null</code> this\n     * method returns <code>true</code>.\n     *\n     * @param p1  path 1 (<code>null</code> permitted).\n     * @param p2  path 2 (<code>null</code> permitted).\n     *\n     * @return A boolean.\n     */\n    public static boolean equal(GeneralPath p1, GeneralPath p2) {\n        if (p1 == null) {\n            return (p2 == null);\n        }\n        if (p2 == null) {\n            return false;\n        }\n        if (p1.getWindingRule() != p2.getWindingRule()) {\n            return false;\n        }\n        PathIterator iterator1 = p1.getPathIterator(null);\n        PathIterator iterator2 = p2.getPathIterator(null); // Fixed: Use p2 instead of p1\n        double[] d1 = new double[6];\n        double[] d2 = new double[6];\n        boolean done = iterator1.isDone() && iterator2.isDone();\n        while (!done) {\n            if (iterator1.isDone() != iterator2.isDone()) {\n                return false;\n            }\n            int seg1 = iterator1.currentSegment(d1);\n            int seg2 = iterator2.currentSegment(d2);\n            if (seg1 != seg2) {\n                return false;\n            }\n            if (!Arrays.equals(d1, d2)) {\n                return false;\n            }\n            iterator1.next();\n            iterator2.next();\n            done = iterator1.isDone() && iterator2.isDone();\n        }\n        return true;\n    }\n",
        "index": 0,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 105,
        "failing_relevant": 0,
        "passing_tests": [
          "org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths"
        ],
        "failing_tests": [],
        "sum_entropy": -3.7089329578350716,
        "mean_entropy": -0.010688567601830177,
        "pass_FIB_num": 15,
        "pass_FIB": [
          "Chart_11_n41.txt",
          "Chart_11_n1.txt",
          "Chart_11_n9.txt",
          "Chart_11_n17.txt",
          "Chart_11_n44.txt",
          "Chart_11_n14.txt",
          "Chart_11_n30.txt",
          "Chart_11_n47.txt",
          "Chart_11_n21.txt",
          "Chart_11_n35.txt",
          "Chart_11_n0.txt",
          "Chart_11_n29.txt",
          "Chart_11_n19.txt",
          "Chart_11_n6.txt",
          "Chart_11_n45.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    public static boolean equal(GeneralPath p1, GeneralPath p2) {\n        if (p1 == null && p2 == null) {\n            return true;\n        }\n        if (p1 == null || p2 == null) {\n            return false;\n        }\n        if (p1.getWindingRule() != p2.getWindingRule()) {\n            return false;\n        }\n        PathIterator iterator1 = p1.getPathIterator(null);\n        PathIterator iterator2 = p2.getPathIterator(null); // Change p1 to p2 here\n        double[] d1 = new double[6];\n        double[] d2 = new double[6];\n        boolean done = iterator1.isDone() && iterator2.isDone();\n        while (!done) {\n            if (iterator1.isDone() != iterator2.isDone()) {\n                return false;\n            }\n            int seg1 = iterator1.currentSegment(d1);\n            int seg2 = iterator2.currentSegment(d2);\n            if (seg1 != seg2) {\n                return false;\n            }\n            if (!Arrays.equals(d1, d2)) {\n                return false;\n            }\n            iterator1.next();\n            iterator2.next();\n            done = iterator1.isDone() && iterator2.isDone();\n        }\n        return true;\n    }\n",
        "index": 94,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 105,
        "failing_relevant": 0,
        "passing_tests": [
          "org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths"
        ],
        "failing_tests": [],
        "sum_entropy": -8.68812376941538,
        "mean_entropy": -0.032178236183019925,
        "pass_FIB_num": 15,
        "pass_FIB": [
          "Chart_11_n41.txt",
          "Chart_11_n1.txt",
          "Chart_11_n9.txt",
          "Chart_11_n17.txt",
          "Chart_11_n44.txt",
          "Chart_11_n14.txt",
          "Chart_11_n30.txt",
          "Chart_11_n47.txt",
          "Chart_11_n21.txt",
          "Chart_11_n35.txt",
          "Chart_11_n0.txt",
          "Chart_11_n29.txt",
          "Chart_11_n19.txt",
          "Chart_11_n6.txt",
          "Chart_11_n45.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * Tests two polygons for equality. If both are <code>null</code> this\n     * method returns <code>true</code>.\n     *\n     * @param p1 path 1 (<code>null</code> permitted).\n     * @param p2 path 2 (<code>null</code> permitted).\n     *\n     * @return A boolean.\n     */\n    public static boolean equal(GeneralPath p1, GeneralPath p2) {\n        if (p1 == null) {\n            return (p2 == null);\n        }\n        if (p2 == null) {\n            return false;\n        }\n        if (p1.getWindingRule() != p2.getWindingRule()) {\n            return false;\n        }\n        PathIterator iterator1 = p1.getPathIterator(null);\n        PathIterator iterator2 = p2.getPathIterator(null); // Fixed typo: p2 instead of p1\n        double[] d1 = new double[6];\n        double[] d2 = new double[6];\n        boolean done = iterator1.isDone() && iterator2.isDone();\n        while (!done) {\n            if (iterator1.isDone() != iterator2.isDone()) {\n                return false;\n            }\n            int seg1 = iterator1.currentSegment(d1);\n            int seg2 = iterator2.currentSegment(d2);\n            if (seg1 != seg2) {\n                return false;\n            }\n            if (!Arrays.equals(d1, d2)) {\n                return false;\n            }\n            iterator1.next();\n            iterator2.next();\n            done = iterator1.isDone() && iterator2.isDone();\n        }\n        return true;\n    }\n",
        "index": 93,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 105,
        "failing_relevant": 0,
        "passing_tests": [
          "org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths"
        ],
        "failing_tests": [],
        "sum_entropy": -11.136890933606256,
        "mean_entropy": -0.032374682946529815,
        "pass_FIB_num": 15,
        "pass_FIB": [
          "Chart_11_n41.txt",
          "Chart_11_n1.txt",
          "Chart_11_n9.txt",
          "Chart_11_n17.txt",
          "Chart_11_n44.txt",
          "Chart_11_n14.txt",
          "Chart_11_n30.txt",
          "Chart_11_n47.txt",
          "Chart_11_n21.txt",
          "Chart_11_n35.txt",
          "Chart_11_n0.txt",
          "Chart_11_n29.txt",
          "Chart_11_n19.txt",
          "Chart_11_n6.txt",
          "Chart_11_n45.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Tests two polygons for equality. If both are <code>null</code> this\n     * method returns <code>true</code>.\n     *\n     * @param p1 path 1 (<code>null</code> permitted).\n     * @param p2 path 2 (<code>null</code> permitted).\n     *\n     * @return A boolean.\n     */\n    public static boolean equal(GeneralPath p1, GeneralPath p2) {\n        if (p1 == null) {\n            return (p2 == null);\n        }\n        if (p2 == null) {\n            return false;\n        }\n        if (p1.getWindingRule() != p2.getWindingRule()) {\n            return false;\n        }\n        PathIterator iterator1 = p1.getPathIterator(null);\n        PathIterator iterator2 = p2.getPathIterator(null); // Fixed: Corrected to use p2 here\n        double[] d1 = new double[6];\n        double[] d2 = new double[6];\n        boolean done = iterator1.isDone() && iterator2.isDone();\n        while (!done) {\n            if (iterator1.isDone() != iterator2.isDone()) {\n                return false;\n            }\n            int seg1 = iterator1.currentSegment(d1);\n            int seg2 = iterator2.currentSegment(d2);\n            if (seg1 != seg2) {\n                return false;\n            }\n            if (!Arrays.equals(d1, d2)) {\n                return false;\n            }\n            iterator1.next();\n            iterator2.next();\n            done = iterator1.isDone() && iterator2.isDone();\n        }\n        return true;\n    }\n",
        "index": 73,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 105,
        "failing_relevant": 0,
        "passing_tests": [
          "org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths"
        ],
        "failing_tests": [],
        "sum_entropy": -11.68814378644697,
        "mean_entropy": -0.033977162169903985,
        "pass_FIB_num": 15,
        "pass_FIB": [
          "Chart_11_n41.txt",
          "Chart_11_n1.txt",
          "Chart_11_n9.txt",
          "Chart_11_n17.txt",
          "Chart_11_n44.txt",
          "Chart_11_n14.txt",
          "Chart_11_n30.txt",
          "Chart_11_n47.txt",
          "Chart_11_n21.txt",
          "Chart_11_n35.txt",
          "Chart_11_n0.txt",
          "Chart_11_n29.txt",
          "Chart_11_n19.txt",
          "Chart_11_n6.txt",
          "Chart_11_n45.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\npublic static boolean equal(GeneralPath p1, GeneralPath p2) {\n    if (p1 == null) {\n        return (p2 == null);\n    }\n    if (p2 == null) {\n        return false;\n    }\n    if (p1.getWindingRule() != p2.getWindingRule()) {\n        return false;\n    }\n    PathIterator iterator1 = p1.getPathIterator(null);\n    PathIterator iterator2 = p2.getPathIterator(null); // Corrected from p1 to p2\n    double[] d1 = new double[6];\n    double[] d2 = new double[6];\n    boolean done = iterator1.isDone() && iterator2.isDone();\n    while (!done) {\n        if (iterator1.isDone() != iterator2.isDone()) {\n            return false;\n        }\n        int seg1 = iterator1.currentSegment(d1);\n        int seg2 = iterator2.currentSegment(d2);\n        if (seg1 != seg2) {\n            return false;\n        }\n        if (!Arrays.equals(d1, d2)) {\n            return false;\n        }\n        iterator1.next();\n        iterator2.next();\n        done = iterator1.isDone() && iterator2.isDone();\n    }\n    return true;\n}\n",
        "index": 26,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 105,
        "failing_relevant": 0,
        "passing_tests": [
          "org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths"
        ],
        "failing_tests": [],
        "sum_entropy": -8.993341886772908,
        "mean_entropy": -0.03419521629951676,
        "pass_FIB_num": 15,
        "pass_FIB": [
          "Chart_11_n41.txt",
          "Chart_11_n1.txt",
          "Chart_11_n9.txt",
          "Chart_11_n17.txt",
          "Chart_11_n44.txt",
          "Chart_11_n14.txt",
          "Chart_11_n30.txt",
          "Chart_11_n47.txt",
          "Chart_11_n21.txt",
          "Chart_11_n35.txt",
          "Chart_11_n0.txt",
          "Chart_11_n29.txt",
          "Chart_11_n19.txt",
          "Chart_11_n6.txt",
          "Chart_11_n45.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\npublic static boolean equal(GeneralPath p1, GeneralPath p2) {\n    if (p1 == null) {\n        return (p2 == null);\n    }\n    if (p2 == null) {\n        return false;\n    }\n    if (p1.getWindingRule() != p2.getWindingRule()) {\n        return false;\n    }\n    PathIterator iterator1 = p1.getPathIterator(null);\n    PathIterator iterator2 = p2.getPathIterator(null); // Fixed: Change p1 to p2\n    double[] d1 = new double[6];\n    double[] d2 = new double[6];\n    boolean done = iterator1.isDone() && iterator2.isDone();\n    while (!done) {\n        if (iterator1.isDone() != iterator2.isDone()) {\n            return false;\n        }\n        int seg1 = iterator1.currentSegment(d1);\n        int seg2 = iterator2.currentSegment(d2);\n        if (seg1 != seg2) {\n            return false;\n        }\n        if (!Arrays.equals(d1, d2)) {\n            return false;\n        }\n        iterator1.next();\n        iterator2.next();\n        done = iterator1.isDone() && iterator2.isDone();\n    }\n    return true;\n}\n",
        "index": 86,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 105,
        "failing_relevant": 0,
        "passing_tests": [
          "org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths"
        ],
        "failing_tests": [],
        "sum_entropy": -9.76513716377153,
        "mean_entropy": -0.03712979910179289,
        "pass_FIB_num": 15,
        "pass_FIB": [
          "Chart_11_n41.txt",
          "Chart_11_n1.txt",
          "Chart_11_n9.txt",
          "Chart_11_n17.txt",
          "Chart_11_n44.txt",
          "Chart_11_n14.txt",
          "Chart_11_n30.txt",
          "Chart_11_n47.txt",
          "Chart_11_n21.txt",
          "Chart_11_n35.txt",
          "Chart_11_n0.txt",
          "Chart_11_n29.txt",
          "Chart_11_n19.txt",
          "Chart_11_n6.txt",
          "Chart_11_n45.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      }
    ]
  }
}