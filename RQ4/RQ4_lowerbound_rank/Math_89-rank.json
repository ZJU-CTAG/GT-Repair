{
  "Math_89_src/java/org/apache/commons/math/stat/Frequency.java_96_111": {
    "patches": [
      {
        "patch": "\n    /**\n     * Adds 1 to the frequency count for v.\n     * <p>\n     * If other objects have already been added to this Frequency, v must\n     * be comparable to those that have already been added.\n     * </p>\n     * \n     * @param v the value to add.\n     * @throws IllegalArgumentException if <code>v</code> is not Comparable, \n     *         or is not comparable with previous entries\n     * @deprecated use {@link #addValue(Comparable)} instead\n     */\n    @Deprecated\n    public void addValue(Object v) {\n        if (!(v instanceof Comparable)) {\n            throw new IllegalArgumentException(\"Object must be Comparable\");\n        }\n        addValue((Comparable<?>) v);            \n    }\n",
        "index": 1,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.FrequencyTest::testAddNonComparable"
        ],
        "failing_tests": [],
        "sum_entropy": -1.89436457874329,
        "mean_entropy": -0.012143362684251858,
        "pass_FIB_num": 7,
        "pass_FIB": [
          "Math_89_n48.txt",
          "Math_89_n2.txt",
          "Math_89_n17.txt",
          "Math_89_n39.txt",
          "Math_89_n31.txt",
          "Math_89_n41.txt",
          "Math_89_n29.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Adds 1 to the frequency count for v.\n     * <p>\n     * If other objects have already been added to this Frequency, v must\n     * be comparable to those that have already been added.\n     * </p>\n     * \n     * @param v the value to add.\n     * @throws IllegalArgumentException if <code>v</code> is not Comparable, \n     *         or is not comparable with previous entries\n     * @deprecated use {@link #addValue(Comparable)} instead\n     */\n    @Deprecated\n    public void addValue(Object v) {\n        if (!(v instanceof Comparable)) {\n            throw new IllegalArgumentException(\"Object must be Comparable\");\n        }\n        addValue((Comparable<?>) v);            \n    }\n",
        "index": 3,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.FrequencyTest::testAddNonComparable"
        ],
        "failing_tests": [],
        "sum_entropy": -1.89436457874329,
        "mean_entropy": -0.012143362684251858,
        "pass_FIB_num": 7,
        "pass_FIB": [
          "Math_89_n48.txt",
          "Math_89_n2.txt",
          "Math_89_n17.txt",
          "Math_89_n39.txt",
          "Math_89_n31.txt",
          "Math_89_n41.txt",
          "Math_89_n29.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Adds 1 to the frequency count for v.\n     * <p>\n     * If other objects have already been added to this Frequency, v must\n     * be comparable to those that have already been added.\n     * </p>\n     * \n     * @param v the value to add.\n     * @throws IllegalArgumentException if <code>v</code> is not Comparable, \n     *         or is not comparable with previous entries\n     * @deprecated use {@link #addValue(Comparable)} instead\n     */\n    @Deprecated\n    public void addValue(Object v) {\n        if (!(v instanceof Comparable)) {\n            throw new IllegalArgumentException(\"Object must be Comparable\");\n        }\n        addValue((Comparable<?>) v);            \n    }\n",
        "index": 9,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.FrequencyTest::testAddNonComparable"
        ],
        "failing_tests": [],
        "sum_entropy": -1.89436457874329,
        "mean_entropy": -0.012143362684251858,
        "pass_FIB_num": 7,
        "pass_FIB": [
          "Math_89_n48.txt",
          "Math_89_n2.txt",
          "Math_89_n17.txt",
          "Math_89_n39.txt",
          "Math_89_n31.txt",
          "Math_89_n41.txt",
          "Math_89_n29.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Adds 1 to the frequency count for v.\n     * <p>\n     * If other objects have already been added to this Frequency, v must\n     * be comparable to those that have already been added.\n     * </p>\n     * \n     * @param v the value to add.\n     * @throws IllegalArgumentException if <code>v</code> is not Comparable, \n     *         or is not comparable with previous entries\n     * @deprecated use {@link #addValue(Comparable)} instead\n     */\n    @Deprecated\n    public void addValue(Object v) {\n        if (!(v instanceof Comparable)) {\n            throw new IllegalArgumentException(\"Object must be Comparable\");\n        }\n        addValue((Comparable<?>) v);            \n    }\n",
        "index": 12,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.FrequencyTest::testAddNonComparable"
        ],
        "failing_tests": [],
        "sum_entropy": -1.89436457874329,
        "mean_entropy": -0.012143362684251858,
        "pass_FIB_num": 7,
        "pass_FIB": [
          "Math_89_n48.txt",
          "Math_89_n2.txt",
          "Math_89_n17.txt",
          "Math_89_n39.txt",
          "Math_89_n31.txt",
          "Math_89_n41.txt",
          "Math_89_n29.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Adds 1 to the frequency count for v.\n     * <p>\n     * If other objects have already been added to this Frequency, v must\n     * be comparable to those that have already been added.\n     * </p>\n     * \n     * @param v the value to add.\n     * @throws IllegalArgumentException if <code>v</code> is not Comparable, \n     *         or is not comparable with previous entries\n     * @deprecated use {@link #addValue(Comparable)} instead\n     */\n    @Deprecated\n    public void addValue(Object v) {\n        if (!(v instanceof Comparable)) {\n            throw new IllegalArgumentException(\"Object must be Comparable\");\n        }\n        addValue((Comparable<?>) v);            \n    }\n",
        "index": 14,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.FrequencyTest::testAddNonComparable"
        ],
        "failing_tests": [],
        "sum_entropy": -1.89436457874329,
        "mean_entropy": -0.012143362684251858,
        "pass_FIB_num": 7,
        "pass_FIB": [
          "Math_89_n48.txt",
          "Math_89_n2.txt",
          "Math_89_n17.txt",
          "Math_89_n39.txt",
          "Math_89_n31.txt",
          "Math_89_n41.txt",
          "Math_89_n29.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Adds 1 to the frequency count for v.\n     * <p>\n     * If other objects have already been added to this Frequency, v must\n     * be comparable to those that have already been added.\n     * </p>\n     * \n     * @param v the value to add.\n     * @throws IllegalArgumentException if <code>v</code> is not Comparable, \n     *         or is not comparable with previous entries\n     * @deprecated use {@link #addValue(Comparable)} instead\n     */\n    @Deprecated\n    public void addValue(Object v) {\n        if (!(v instanceof Comparable)) {\n            throw new IllegalArgumentException(\"Object must be Comparable\");\n        }\n        addValue((Comparable<?>) v);            \n    }\n",
        "index": 80,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.FrequencyTest::testAddNonComparable"
        ],
        "failing_tests": [],
        "sum_entropy": -2.0414545498762497,
        "mean_entropy": -0.013086247114591344,
        "pass_FIB_num": 7,
        "pass_FIB": [
          "Math_89_n48.txt",
          "Math_89_n2.txt",
          "Math_89_n17.txt",
          "Math_89_n39.txt",
          "Math_89_n31.txt",
          "Math_89_n41.txt",
          "Math_89_n29.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Adds 1 to the frequency count for v.\n     * <p>\n     * If other objects have already been added to this Frequency, v must\n     * be comparable to those that have already been added.\n     * </p>\n     * \n     * @param v the value to add.\n     * @throws IllegalArgumentException if <code>v</code> is not Comparable, \n     *         or is not comparable with previous entries\n     * @deprecated use {@link #addValue(Comparable)} instead\n     */\n    @Deprecated\n    public void addValue(Object v) {\n        if (!(v instanceof Comparable)) {\n            throw new IllegalArgumentException(\"Object must be Comparable\");\n        }\n        addValue((Comparable<?>) v);            \n    }\n",
        "index": 81,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.FrequencyTest::testAddNonComparable"
        ],
        "failing_tests": [],
        "sum_entropy": -2.0414545498762497,
        "mean_entropy": -0.013086247114591344,
        "pass_FIB_num": 7,
        "pass_FIB": [
          "Math_89_n48.txt",
          "Math_89_n2.txt",
          "Math_89_n17.txt",
          "Math_89_n39.txt",
          "Math_89_n31.txt",
          "Math_89_n41.txt",
          "Math_89_n29.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Adds 1 to the frequency count for v.\n     * <p>\n     * If other objects have already been added to this Frequency, v must\n     * be comparable to those that have already been added.\n     * </p>\n     * \n     * @param v the value to add.\n     * @throws IllegalArgumentException if <code>v</code> is not Comparable, \n     *         or is not comparable with previous entries\n     * @deprecated use {@link #addValue(Comparable)} instead\n     */\n    @Deprecated\n    public void addValue(Object v) {\n        if (!(v instanceof Comparable)) {\n            throw new IllegalArgumentException(\"Object must be Comparable\");\n        }\n        addValue((Comparable<?>) v);            \n    }\n",
        "index": 82,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.FrequencyTest::testAddNonComparable"
        ],
        "failing_tests": [],
        "sum_entropy": -2.0414545498762497,
        "mean_entropy": -0.013086247114591344,
        "pass_FIB_num": 7,
        "pass_FIB": [
          "Math_89_n48.txt",
          "Math_89_n2.txt",
          "Math_89_n17.txt",
          "Math_89_n39.txt",
          "Math_89_n31.txt",
          "Math_89_n41.txt",
          "Math_89_n29.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Adds 1 to the frequency count for v.\n     * <p>\n     * If other objects have already been added to this Frequency, v must\n     * be comparable to those that have already been added.\n     * </p>\n     * \n     * @param v the value to add.\n     * @throws IllegalArgumentException if <code>v</code> is not Comparable, \n     *         or is not comparable with previous entries\n     * @deprecated use {@link #addValue(Comparable)} instead\n     */\n    @Deprecated\n    public void addValue(Object v) {\n        if (!(v instanceof Comparable)) {\n            throw new IllegalArgumentException(\"Object must be Comparable\");\n        }\n        addValue((Comparable<?>) v);            \n    }\n",
        "index": 83,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.FrequencyTest::testAddNonComparable"
        ],
        "failing_tests": [],
        "sum_entropy": -2.0414545498762497,
        "mean_entropy": -0.013086247114591344,
        "pass_FIB_num": 7,
        "pass_FIB": [
          "Math_89_n48.txt",
          "Math_89_n2.txt",
          "Math_89_n17.txt",
          "Math_89_n39.txt",
          "Math_89_n31.txt",
          "Math_89_n41.txt",
          "Math_89_n29.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Adds 1 to the frequency count for v.\n     * <p>\n     * If other objects have already been added to this Frequency, v must\n     * be comparable to those that have already been added.\n     * </p>\n     * \n     * @param v the value to add.\n     * @throws IllegalArgumentException if <code>v</code> is not Comparable, \n     *         or is not comparable with previous entries\n     * @deprecated use {@link #addValue(Comparable)} instead\n     */\n    @Deprecated\n    public void addValue(Object v) {\n        if (!(v instanceof Comparable)) {\n            throw new IllegalArgumentException(\"Object must be Comparable\");\n        }\n        addValue((Comparable<?>) v);            \n    }\n",
        "index": 88,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.FrequencyTest::testAddNonComparable"
        ],
        "failing_tests": [],
        "sum_entropy": -2.0414545498762497,
        "mean_entropy": -0.013086247114591344,
        "pass_FIB_num": 7,
        "pass_FIB": [
          "Math_89_n48.txt",
          "Math_89_n2.txt",
          "Math_89_n17.txt",
          "Math_89_n39.txt",
          "Math_89_n31.txt",
          "Math_89_n41.txt",
          "Math_89_n29.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Adds 1 to the frequency count for v.\n     * <p>\n     * If other objects have already been added to this Frequency, v must\n     * be comparable to those that have already been added.\n     * </p>\n     * \n     * @param v the value to add.\n     * @throws IllegalArgumentException if <code>v</code> is not Comparable, \n     *         or is not comparable with previous entries\n     * @deprecated use {@link #addValue(Comparable)} instead\n     */\n    @Deprecated\n    public void addValue(Object v) {\n        if (!(v instanceof Comparable)) {\n            throw new IllegalArgumentException(\"Object must be Comparable\");\n        }\n        addValue((Comparable<?>) v);            \n    }\n",
        "index": 95,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.FrequencyTest::testAddNonComparable"
        ],
        "failing_tests": [],
        "sum_entropy": -2.0414545498762497,
        "mean_entropy": -0.013086247114591344,
        "pass_FIB_num": 7,
        "pass_FIB": [
          "Math_89_n48.txt",
          "Math_89_n2.txt",
          "Math_89_n17.txt",
          "Math_89_n39.txt",
          "Math_89_n31.txt",
          "Math_89_n41.txt",
          "Math_89_n29.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Adds 1 to the frequency count for v.\n     * <p>\n     * If other objects have already been added to this Frequency, v must\n     * be comparable to those that have already been added.\n     * </p>\n     * \n     * @param v the value to add.\n     * @throws IllegalArgumentException if <code>v</code> is not Comparable, \n     *         or is not comparable with previous entries\n     * @deprecated use {@link #addValue(Comparable)} instead\n     */\n    @Deprecated\n    public void addValue(Object v) {\n        if (!(v instanceof Comparable)) {\n            throw new IllegalArgumentException(\"Object must be Comparable\");\n        }\n        addValue((Comparable<?>) v);            \n    }\n",
        "index": 17,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.FrequencyTest::testAddNonComparable"
        ],
        "failing_tests": [],
        "sum_entropy": -2.0442821184920907,
        "mean_entropy": -0.013104372554436479,
        "pass_FIB_num": 7,
        "pass_FIB": [
          "Math_89_n48.txt",
          "Math_89_n2.txt",
          "Math_89_n17.txt",
          "Math_89_n39.txt",
          "Math_89_n31.txt",
          "Math_89_n41.txt",
          "Math_89_n29.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Adds 1 to the frequency count for v.\n     * <p>\n     * If other objects have already been added to this Frequency, v must\n     * be comparable to those that have already been added.\n     * </p>\n     * \n     * @param v the value to add.\n     * @throws IllegalArgumentException if <code>v</code> is not Comparable, \n     *         or is not comparable with previous entries\n     * @deprecated use {@link #addValue(Comparable)} instead\n     */\n    @Deprecated\n    public void addValue(Object v) {\n        if (!(v instanceof Comparable)) {\n            throw new IllegalArgumentException(\"Object must be Comparable\");\n        }\n        addValue((Comparable<?>) v);            \n    }\n",
        "index": 22,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.FrequencyTest::testAddNonComparable"
        ],
        "failing_tests": [],
        "sum_entropy": -2.0442821184920907,
        "mean_entropy": -0.013104372554436479,
        "pass_FIB_num": 7,
        "pass_FIB": [
          "Math_89_n48.txt",
          "Math_89_n2.txt",
          "Math_89_n17.txt",
          "Math_89_n39.txt",
          "Math_89_n31.txt",
          "Math_89_n41.txt",
          "Math_89_n29.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Adds 1 to the frequency count for v.\n     * <p>\n     * If other objects have already been added to this Frequency, v must\n     * be comparable to those that have already been added.\n     * </p>\n     * \n     * @param v the value to add.\n     * @throws IllegalArgumentException if <code>v</code> is not Comparable, \n     *         or is not comparable with previous entries\n     * @deprecated use {@link #addValue(Comparable)} instead\n     */\n    @Deprecated\n    public void addValue(Object v) {\n        if (!(v instanceof Comparable)) {\n            throw new IllegalArgumentException(\"Object must be Comparable\");\n        }\n        addValue((Comparable<?>) v);            \n    }\n",
        "index": 26,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.FrequencyTest::testAddNonComparable"
        ],
        "failing_tests": [],
        "sum_entropy": -2.0442821184920907,
        "mean_entropy": -0.013104372554436479,
        "pass_FIB_num": 7,
        "pass_FIB": [
          "Math_89_n48.txt",
          "Math_89_n2.txt",
          "Math_89_n17.txt",
          "Math_89_n39.txt",
          "Math_89_n31.txt",
          "Math_89_n41.txt",
          "Math_89_n29.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Adds 1 to the frequency count for v.\n     * <p>\n     * If other objects have already been added to this Frequency, v must\n     * be comparable to those that have already been added.\n     * </p>\n     * \n     * @param v the value to add.\n     * @throws IllegalArgumentException if <code>v</code> is not Comparable, \n     *         or is not comparable with previous entries\n     * @deprecated use {@link #addValue(Comparable)} instead\n     */\n    @Deprecated\n    public void addValue(Object v) {\n        if (!(v instanceof Comparable)) {\n            throw new IllegalArgumentException(\"Object must be Comparable\");\n        }\n        addValue((Comparable<?>) v);            \n    }\n",
        "index": 31,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.FrequencyTest::testAddNonComparable"
        ],
        "failing_tests": [],
        "sum_entropy": -2.0442821184920907,
        "mean_entropy": -0.013104372554436479,
        "pass_FIB_num": 7,
        "pass_FIB": [
          "Math_89_n48.txt",
          "Math_89_n2.txt",
          "Math_89_n17.txt",
          "Math_89_n39.txt",
          "Math_89_n31.txt",
          "Math_89_n41.txt",
          "Math_89_n29.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Adds 1 to the frequency count for v.\n     * <p>\n     * If other objects have already been added to this Frequency, v must\n     * be comparable to those that have already been added.\n     * </p>\n     * \n     * @param v the value to add.\n     * @throws IllegalArgumentException if <code>v</code> is not Comparable, \n     *         or is not comparable with previous entries\n     * @deprecated use {@link #addValue(Comparable)} instead\n     */\n    @Deprecated\n    public void addValue(Object v) {\n        if (v instanceof Comparable) {\n            addValue((Comparable<?>) v);\n        } else {\n            throw new IllegalArgumentException(\"Object must be Comparable.\");\n        }            \n    }\n",
        "index": 16,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.FrequencyTest::testAddNonComparable"
        ],
        "failing_tests": [],
        "sum_entropy": -8.41838178301453,
        "mean_entropy": -0.052614886143840814,
        "pass_FIB_num": 7,
        "pass_FIB": [
          "Math_89_n48.txt",
          "Math_89_n2.txt",
          "Math_89_n17.txt",
          "Math_89_n39.txt",
          "Math_89_n31.txt",
          "Math_89_n41.txt",
          "Math_89_n29.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Adds 1 to the frequency count for v if v is Comparable.\n     * <p>\n     * If other objects have already been added to this Frequency, v must\n     * be comparable to those that have already been added.\n     * </p>\n     * \n     * @param v the value to add.\n     * @throws IllegalArgumentException if <code>v</code> is not Comparable, \n     *         or is not comparable with previous entries\n     * @deprecated use {@link #addValue(Comparable)} instead\n     */\n    @Deprecated\n    public void addValue(Object v) {\n        if (v instanceof Comparable) {\n            addValue((Comparable<?>) v);            \n        } else {\n            throw new IllegalArgumentException(\"Object must be Comparable.\");\n        }\n    }\n",
        "index": 93,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.FrequencyTest::testAddNonComparable"
        ],
        "failing_tests": [],
        "sum_entropy": -8.73314607769627,
        "mean_entropy": -0.05325089071766018,
        "pass_FIB_num": 7,
        "pass_FIB": [
          "Math_89_n48.txt",
          "Math_89_n2.txt",
          "Math_89_n17.txt",
          "Math_89_n39.txt",
          "Math_89_n31.txt",
          "Math_89_n41.txt",
          "Math_89_n29.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Adds 1 to the frequency count for v.\n     * <p>\n     * If other objects have already been added to this Frequency, v must\n     * be comparable to those that have already been added.\n     * </p>\n     * \n     * @param v the value to add.\n     * @throws IllegalArgumentException if <code>v</code> is not Comparable, \n     *         or is not comparable with previous entries\n     * @deprecated use {@link #addValue(Comparable)} instead\n     */\n    @Deprecated\n    public void addValue(Object v) {\n        if (v instanceof Comparable) {\n            addValue((Comparable<?>) v);            \n        } else {\n            throw new IllegalArgumentException(\"Object must implement Comparable interface\");\n        }\n    }\n",
        "index": 86,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.FrequencyTest::testAddNonComparable"
        ],
        "failing_tests": [],
        "sum_entropy": -9.11382926166795,
        "mean_entropy": -0.05660763516563944,
        "pass_FIB_num": 7,
        "pass_FIB": [
          "Math_89_n48.txt",
          "Math_89_n2.txt",
          "Math_89_n17.txt",
          "Math_89_n39.txt",
          "Math_89_n31.txt",
          "Math_89_n41.txt",
          "Math_89_n29.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Adds 1 to the frequency count for v if v is Comparable.\n     * <p>\n     * If other objects have already been added to this Frequency, v must\n     * be comparable to those that have already been added.\n     * </p>\n     * \n     * @param v the value to add.\n     * @throws IllegalArgumentException if <code>v</code> is not Comparable, \n     *         or is not comparable with previous entries\n     * @deprecated use {@link #addValue(Comparable)} instead\n     */\n    @Deprecated\n    public void addValue(Object v) {\n        if (!(v instanceof Comparable<?>)) {\n            throw new IllegalArgumentException(\"Value must be Comparable\");\n        }\n        addValue((Comparable<?>) v);            \n    }\n",
        "index": 7,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.FrequencyTest::testAddNonComparable"
        ],
        "failing_tests": [],
        "sum_entropy": -10.128424108426337,
        "mean_entropy": -0.06290946651196483,
        "pass_FIB_num": 7,
        "pass_FIB": [
          "Math_89_n48.txt",
          "Math_89_n2.txt",
          "Math_89_n17.txt",
          "Math_89_n39.txt",
          "Math_89_n31.txt",
          "Math_89_n41.txt",
          "Math_89_n29.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Adds 1 to the frequency count for v.\n     * <p>\n     * If other objects have already been added to this Frequency, v must\n     * be comparable to those that have already been added.\n     * </p>\n     * \n     * @param v the value to add.\n     * @throws IllegalArgumentException if <code>v</code> is not Comparable, \n     *         or is not comparable with previous entries\n     * @deprecated use {@link #addValue(Comparable)} instead\n     */\n    @Deprecated\n    public void addValue(Object v) {\n        if (!(v instanceof Comparable<?>)) {\n            throw new IllegalArgumentException(\"Object must implement Comparable interface\");\n        }\n        addValue((Comparable<?>) v);\n    }\n",
        "index": 45,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.FrequencyTest::testAddNonComparable"
        ],
        "failing_tests": [],
        "sum_entropy": -10.327975562928879,
        "mean_entropy": -0.06578328384031133,
        "pass_FIB_num": 7,
        "pass_FIB": [
          "Math_89_n48.txt",
          "Math_89_n2.txt",
          "Math_89_n17.txt",
          "Math_89_n39.txt",
          "Math_89_n31.txt",
          "Math_89_n41.txt",
          "Math_89_n29.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      }
    ]
  }
}