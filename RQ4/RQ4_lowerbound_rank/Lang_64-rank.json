{
  "Lang_64_src/java/org/apache/commons/lang/enums/ValuedEnum.java_165_184": {
    "patches": [
      {
        "patch": "\n    /**\n     * <p>Tests for order.</p>\n     *\n     * <p>The default ordering is numeric by value, but this\n     * can be overridden by subclasses.</p>\n     *\n     * <p>NOTE: From v2.2 the enums must be of the same type.\n     * If the parameter is in a different class loader than this instance,\n     * reflection is used to compare the values.</p>\n     *\n     * @see java.lang.Comparable#compareTo(Object)\n     * @param other  the other object to compare to\n     * @return -ve if this is less than the other object, +ve if greater than,\n     *  <code>0</code> of equal\n     * @throws ClassCastException if other is not an <code>Enum</code>\n     * @throws NullPointerException if other is <code>null</code>\n     */\n    public int compareTo(Object other) {\n        if (other == null) {\n            throw new NullPointerException();\n        }\n        if (other.getClass() != this.getClass()) {\n            throw new ClassCastException();\n        }\n        return iValue - ((ValuedEnum) other).iValue;\n    }\n",
        "index": 51,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 4,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.lang.enums.ValuedEnumTest::testCompareTo_otherEnumType"
        ],
        "failing_tests": [],
        "sum_entropy": -5.945822531534753,
        "mean_entropy": -0.0242686633940194,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * <p>Tests for order.</p>\n     *\n     * <p>The default ordering is numeric by value, but this\n     * can be overridden by subclasses.</p>\n     *\n     * <p>NOTE: From v2.2 the enums must be of the same type.\n     * If the parameter is in a different class loader than this instance,\n     * reflection is used to compare the values.</p>\n     *\n     * @see java.lang.Comparable#compareTo(Object)\n     * @param other  the other object to compare to\n     * @return -ve if this is less than the other object, +ve if greater than,\n     *  <code>0</code> of equal\n     * @throws ClassCastException if other is not an <code>Enum</code>\n     * @throws NullPointerException if other is <code>null</code>\n     */\n    public int compareTo(Object other) {\n        if (other == null) {\n            throw new NullPointerException();\n        }\n        \n        if (other.getClass() != this.getClass()) {\n            throw new ClassCastException();\n        }\n        \n        return iValue - ((ValuedEnum) other).iValue;\n    }\n",
        "index": 76,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 4,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.lang.enums.ValuedEnumTest::testCompareTo_otherEnumType"
        ],
        "failing_tests": [],
        "sum_entropy": -6.675589655903641,
        "mean_entropy": -0.027026678768840653,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * <p>Tests for order.</p>\n     *\n     * <p>The default ordering is numeric by value, but this\n     * can be overridden by subclasses.</p>\n     *\n     * <p>NOTE: From v2.2 the enums must be of the same type.\n     * If the parameter is in a different class loader than this instance,\n     * reflection is used to compare the values.</p>\n     *\n     * @see java.lang.Comparable#compareTo(Object)\n     * @param other  the other object to compare to\n     * @return -ve if this is less than the other object, +ve if greater than,\n     *  <code>0</code> of equal\n     * @throws ClassCastException if other is not an <code>Enum</code>\n     * @throws NullPointerException if other is <code>null</code>\n     */\n    public int compareTo(Object other) {\n        if (getClass() != other.getClass()) {\n            throw new ClassCastException(\"Different enum class types cannot be compared\");\n        }\n        return iValue - ((ValuedEnum) other).iValue;\n    }\n",
        "index": 73,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 4,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.lang.enums.ValuedEnumTest::testCompareTo_otherEnumType"
        ],
        "failing_tests": [],
        "sum_entropy": -6.952616035968093,
        "mean_entropy": -0.029335932641215583,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * <p>Tests for order.</p>\n     *\n     * <p>The default ordering is numeric by value, but this\n     * can be overridden by subclasses.</p>\n     *\n     * <p>NOTE: From v2.2 the enums must be of the same type.\n     * If the parameter is in a different class loader than this instance,\n     * reflection is used to compare the values.</p>\n     *\n     * @see java.lang.Comparable#compareTo(Object)\n     * @param other  the other object to compare to\n     * @return -ve if this is less than the other object, +ve if greater than,\n     *  <code>0</code> of equal\n     * @throws ClassCastException if other is not an <code>Enum</code>\n     * @throws NullPointerException if other is <code>null</code>\n     */\n    public int compareTo(Object other) {\n        if (other == null) {\n            throw new NullPointerException(\"Object to compare to is null\");\n        }\n        if (other.getClass() != this.getClass()) {\n            throw new ClassCastException(\"Object to compare to is not of the same type\");\n        }\n        return iValue - ((ValuedEnum) other).iValue;\n    }\n",
        "index": 62,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 4,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.lang.enums.ValuedEnumTest::testCompareTo_otherEnumType"
        ],
        "failing_tests": [],
        "sum_entropy": -8.268199541269947,
        "mean_entropy": -0.03143802106946748,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n/**\n * <p>Tests for order.</p>\n *\n * <p>The default ordering is numeric by value, but this\n * can be overridden by subclasses.</p>\n *\n * <p>NOTE: From v2.2 the enums must be of the same type.\n * If the parameter is in a different class loader than this instance,\n * reflection is used to compare the values.</p>\n *\n * @see java.lang.Comparable#compareTo(Object)\n * @param other  the other object to compare to\n * @return -ve if this is less than the other object, +ve if greater than,\n *  <code>0</code> of equal\n * @throws ClassCastException if other is not an <code>Enum</code>\n * @throws NullPointerException if other is <code>null</code>\n */\npublic int compareTo(Object other) {\n    if (other == null) {\n        throw new NullPointerException();\n    }\n    if (other.getClass() != this.getClass()) {\n        throw new ClassCastException();\n    }\n    return iValue - ((ValuedEnum) other).iValue;\n}\n",
        "index": 48,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 4,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.lang.enums.ValuedEnumTest::testCompareTo_otherEnumType"
        ],
        "failing_tests": [],
        "sum_entropy": -7.421403901412539,
        "mean_entropy": -0.03283807036023247,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * <p>Tests for order.</p>\n     *\n     * <p>The default ordering is numeric by value, but this\n     * can be overridden by subclasses.</p>\n     *\n     * <p>NOTE: From v2.2 the enums must be of the same type.\n     * If the parameter is in a different class loader than this instance,\n     * reflection is used to compare the values.</p>\n     *\n     * @see java.lang.Comparable#compareTo(Object)\n     * @param other  the other object to compare to\n     * @return -ve if this is less than the other object, +ve if greater than,\n     *  <code>0</code> of equal\n     * @throws ClassCastException if other is not an <code>Enum</code>\n     * @throws NullPointerException if other is <code>null</code>\n     */\n    public int compareTo(Object other) {\n        if (other == null) {\n            throw new NullPointerException(\"Object to compare to is null\");\n        }\n        \n        if (!(other instanceof ValuedEnum)) {\n            throw new ClassCastException(\"Object to compare to is not an instance of ValuedEnum\");\n        }\n        \n        ValuedEnum otherEnum = (ValuedEnum) other;\n        \n        if (this.getClass() != otherEnum.getClass()) {\n            throw new ClassCastException(\"Enums must be of the same type for comparison\");\n        }\n        \n        return Integer.compare(this.iValue, otherEnum.iValue);\n    }\n",
        "index": 86,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 4,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.lang.enums.ValuedEnumTest::testCompareTo_otherEnumType"
        ],
        "failing_tests": [],
        "sum_entropy": -10.280912617579999,
        "mean_entropy": -0.03316423425025806,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * <p>Tests for order.</p>\n     *\n     * <p>The default ordering is numeric by value, but this\n     * can be overridden by subclasses.</p>\n     *\n     * <p>NOTE: From v2.2 the enums must be of the same type.\n     * If the parameter is in a different class loader than this instance,\n     * reflection is used to compare the values.</p>\n     *\n     * @see java.lang.Comparable#compareTo(Object)\n     * @param other  the other object to compare to\n     * @return -ve if this is less than the other object, +ve if greater than,\n     *  <code>0</code> of equal\n     * @throws ClassCastException if other is not an <code>Enum</code>\n     * @throws NullPointerException if other is <code>null</code>\n     */\n    public int compareTo(Object other) {\n        if (other == null) {\n            throw new NullPointerException(\"Argument 'other' cannot be null\");\n        }\n        \n        if (other.getClass() != this.getClass()) {\n            throw new ClassCastException(\"Argument 'other' must be of the same type as this instance\");\n        }\n        \n        return iValue - ((ValuedEnum) other).iValue;\n    }\n",
        "index": 96,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 4,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.lang.enums.ValuedEnumTest::testCompareTo_otherEnumType"
        ],
        "failing_tests": [],
        "sum_entropy": -9.63004145329949,
        "mean_entropy": -0.0357994106070613,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * <p>Tests for order.</p>\n     *\n     * <p>The default ordering is numeric by value, but this\n     * can be overridden by subclasses.</p>\n     *\n     * <p>NOTE: From v2.2 the enums must be of the same type.\n     * If the parameter is in a different class loader than this instance,\n     * reflection is used to compare the values.</p>\n     *\n     * @see java.lang.Comparable#compareTo(Object)\n     * @param other  the other object to compare to\n     * @return -ve if this is less than the other object, +ve if greater than,\n     *  <code>0</code> of equal\n     * @throws ClassCastException if other is not an <code>Enum</code>\n     * @throws NullPointerException if other is <code>null</code>\n     */\n    public int compareTo(Object other) {\n        if (other == null) {\n            throw new NullPointerException(\"Object to compare to is null\");\n        }\n        \n        if (!(other instanceof ValuedEnum)) {\n            throw new ClassCastException(\"Object to compare to is not a ValuedEnum\");\n        }\n        \n        ValuedEnum otherEnum = (ValuedEnum) other;\n        if (this.getClass() != otherEnum.getClass()) {\n            throw new ClassCastException(\"Cannot compare enums of different classes\");\n        }\n        \n        return Integer.compare(this.iValue, otherEnum.iValue);\n    }\n",
        "index": 47,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 4,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.lang.enums.ValuedEnumTest::testCompareTo_otherEnumType"
        ],
        "failing_tests": [],
        "sum_entropy": -11.143624954434152,
        "mean_entropy": -0.03665666103432287,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * <p>Tests for order.</p>\n     *\n     * <p>The default ordering is numeric by value, but this\n     * can be overridden by subclasses.</p>\n     *\n     * <p>NOTE: From v2.2 the enums must be of the same type.\n     * If the parameter is in a different class loader than this instance,\n     * reflection is used to compare the values.</p>\n     *\n     * @see java.lang.Comparable#compareTo(Object)\n     * @param other  the other object to compare to\n     * @return -ve if this is less than the other object, +ve if greater than,\n     *  <code>0</code> of equal\n     * @throws ClassCastException if other is not an <code>Enum</code>\n     * @throws NullPointerException if other is <code>null</code>\n     */\n    public int compareTo(Object other) {\n        if (other == null) {\n            throw new NullPointerException(\"Argument 'other' cannot be null\");\n        }\n        if (other.getClass() != this.getClass()) {\n            throw new ClassCastException(\"Argument 'other' is not the same type as this instance\");\n        }\n        return iValue - ((ValuedEnum) other).iValue;\n    }\n",
        "index": 84,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 4,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.lang.enums.ValuedEnumTest::testCompareTo_otherEnumType"
        ],
        "failing_tests": [],
        "sum_entropy": -9.757731666318993,
        "mean_entropy": -0.03668320175307892,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * <p>Tests for order.</p>\n     *\n     * <p>The default ordering is numeric by value, but this\n     * can be overridden by subclasses.</p>\n     *\n     * <p>NOTE: From v2.2 the enums must be of the same type.\n     * If the parameter is in a different class loader than this instance,\n     * reflection is used to compare the values.</p>\n     *\n     * @see java.lang.Comparable#compareTo(Object)\n     * @param other  the other object to compare to\n     * @return -ve if this is less than the other object, +ve if greater than,\n     *  <code>0</code> of equal\n     * @throws ClassCastException if other is not an <code>Enum</code>\n     * @throws NullPointerException if other is <code>null</code>\n     */\n    public int compareTo(Object other) {\n        if (other == null) {\n            throw new NullPointerException();\n        }\n        \n        if (other.getClass() != this.getClass()) {\n            throw new ClassCastException();\n        }\n\n        return iValue - ((ValuedEnum) other).iValue;\n    }\n",
        "index": 12,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 4,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.lang.enums.ValuedEnumTest::testCompareTo_otherEnumType"
        ],
        "failing_tests": [],
        "sum_entropy": -9.773591516518398,
        "mean_entropy": -0.03973004681511544,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * <p>Tests for order.</p>\n     *\n     * <p>The default ordering is numeric by value, but this\n     * can be overridden by subclasses.</p>\n     *\n     * <p>NOTE: From v2.2 the enums must be of the same type.\n     * If the parameter is in a different class loader than this instance,\n     * reflection is used to compare the values.</p>\n     *\n     * @see java.lang.Comparable#compareTo(Object)\n     * @param other  the other object to compare to\n     * @return -ve if this is less than the other object, +ve if greater than,\n     *  <code>0</code> of equal\n     * @throws ClassCastException if other is not an <code>Enum</code>\n     * @throws NullPointerException if other is <code>null</code>\n     */\n    public int compareTo(Object other) {\n        if (other == null) {\n            throw new NullPointerException(\"Object to compare to is null\");\n        }\n        if (!(other instanceof ValuedEnum)) {\n            throw new ClassCastException(\"Object to compare to is not a ValuedEnum\");\n        }\n        ValuedEnum otherEnum = (ValuedEnum) other;\n        if (this.getClass() != otherEnum.getClass()) {\n            throw new ClassCastException(\"Cannot compare different types of ValuedEnum\");\n        }\n        return iValue - otherEnum.iValue;\n    }\n",
        "index": 13,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 4,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.lang.enums.ValuedEnumTest::testCompareTo_otherEnumType"
        ],
        "failing_tests": [],
        "sum_entropy": -12.526829157110498,
        "mean_entropy": -0.041756097190368324,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * <p>Tests for order.</p>\n     *\n     * <p>The default ordering is numeric by value, but this\n     * can be overridden by subclasses.</p>\n     *\n     * <p>NOTE: From v2.2 the enums must be of the same type.\n     * If the parameter is in a different class loader than this instance,\n     * reflection is used to compare the values.</p>\n     *\n     * @see java.lang.Comparable#compareTo(Object)\n     * @param other  the other object to compare to\n     * @return -ve if this is less than the other object, +ve if greater than,\n     *  <code>0</code> of equal\n     * @throws ClassCastException if other is not an <code>Enum</code>\n     * @throws NullPointerException if other is <code>null</code>\n     */\n    public int compareTo(Object other) {\n        if (other == null) {\n            throw new NullPointerException(\"Cannot compare to null\");\n        }\n        if (other.getClass() != this.getClass()) {\n            throw new ClassCastException(\"Cannot compare different enum types\");\n        }\n        return Integer.compare(iValue, ((ValuedEnum) other).iValue);\n    }\n",
        "index": 72,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 4,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.lang.enums.ValuedEnumTest::testCompareTo_otherEnumType"
        ],
        "failing_tests": [],
        "sum_entropy": -10.99474881346374,
        "mean_entropy": -0.04261530547854163,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * <p>Tests for order.</p>\n     *\n     * <p>The default ordering is numeric by value, but this\n     * can be overridden by subclasses.</p>\n     *\n     * <p>NOTE: From v2.2 the enums must be of the same type.\n     * If the parameter is in a different class loader than this instance,\n     * reflection is used to compare the values.</p>\n     *\n     * @see java.lang.Comparable#compareTo(Object)\n     * @param other  the other object to compare to\n     * @return -ve if this is less than the other object, +ve if greater than,\n     *  <code>0</code> of equal\n     * @throws ClassCastException if other is not an <code>Enum</code>\n     * @throws NullPointerException if other is <code>null</code>\n     */\n    public int compareTo(Object other) {\n        if (other == null) {\n            throw new NullPointerException(\"Cannot compare to null\");\n        }\n        if (!(other instanceof ValuedEnum)) {\n            throw new ClassCastException(\"Object is not a ValuedEnum\");\n        }\n        ValuedEnum otherEnum = (ValuedEnum) other;\n        if (!this.getClass().equals(otherEnum.getClass())) {\n            throw new ClassCastException(\"Enums must be of the same type\");\n        }\n        return Integer.compare(this.iValue, otherEnum.iValue);\n    }\n",
        "index": 9,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 4,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.lang.enums.ValuedEnumTest::testCompareTo_otherEnumType"
        ],
        "failing_tests": [],
        "sum_entropy": -12.963063850263108,
        "mean_entropy": -0.043646679630515516,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * <p>Tests for order.</p>\n     *\n     * <p>The default ordering is numeric by value, but this\n     * can be overridden by subclasses.</p>\n     *\n     * <p>NOTE: From v2.2 the enums must be of the same type.\n     * If the parameter is in a different class loader than this instance,\n     * reflection is used to compare the values.</p>\n     *\n     * @see java.lang.Comparable#compareTo(Object)\n     * @param other  the other object to compare to\n     * @return -ve if this is less than the other object, +ve if greater than,\n     *  <code>0</code> of equal\n     * @throws ClassCastException if other is not an <code>Enum</code>\n     * @throws NullPointerException if other is <code>null</code>\n     */\n    public int compareTo(Object other) {\n        if (other == null) {\n            throw new NullPointerException(\"Object to compare to is null\");\n        }\n        if (getClass() != other.getClass()) {\n            throw new ClassCastException(\"Can't compare different types\");\n        }\n        return iValue - ((ValuedEnum) other).iValue;\n    }\n",
        "index": 78,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 4,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.lang.enums.ValuedEnumTest::testCompareTo_otherEnumType"
        ],
        "failing_tests": [],
        "sum_entropy": -12.194802665539692,
        "mean_entropy": -0.04745059402933732,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n/**\n * <p>Tests for order.</p>\n *\n * <p>The default ordering is numeric by value, but this\n * can be overridden by subclasses.</p>\n *\n * <p>NOTE: From v2.2 the enums must be of the same type.\n * If the parameter is in a different class loader than this instance,\n * reflection is used to compare the values.</p>\n *\n * @see java.lang.Comparable#compareTo(Object)\n * @param other  the other object to compare to\n * @return -ve if this is less than the other object, +ve if greater than,\n *  <code>0</code> of equal\n * @throws ClassCastException if other is not an <code>Enum</code>\n * @throws NullPointerException if other is <code>null</code>\n */\npublic int compareTo(Object other) {\n    if (other == null) {\n        throw new NullPointerException();\n    }\n\n    if (other.getClass() != this.getClass()) {\n        throw new ClassCastException();\n    }\n\n    return Integer.compare(iValue, ((ValuedEnum) other).iValue);\n}\n",
        "index": 27,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 4,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.lang.enums.ValuedEnumTest::testCompareTo_otherEnumType"
        ],
        "failing_tests": [],
        "sum_entropy": -12.350569837740439,
        "mean_entropy": -0.05416916595500192,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * <p>Tests for order.</p>\n     *\n     * <p>The default ordering is numeric by value, but this\n     * can be overridden by subclasses.</p>\n     *\n     * <p>NOTE: From v2.2 the enums must be of the same type.\n     * If the parameter is in a different class loader than this instance,\n     * reflection is used to compare the values.</p>\n     *\n     * @see java.lang.Comparable#compareTo(Object)\n     * @param other  the other object to compare to\n     * @return -ve if this is less than the other object, +ve if greater than,\n     *  <code>0</code> of equal\n     * @throws ClassCastException if other is not an <code>Enum</code>\n     * @throws NullPointerException if other is <code>null</code>\n     */\n    public int compareTo(Object other) {\n        if (other == null) {\n            throw new NullPointerException(\"The other object cannot be null\");\n        }\n        if (!(other instanceof ValuedEnum)) {\n            throw new ClassCastException(\"The other object is not an Enum\");\n        }\n        if (this.getClass() != other.getClass()) {\n            throw new ClassCastException(\"Enums must be of the same type\");\n        }\n        \n        return Integer.compare(this.iValue, ((ValuedEnum) other).iValue);\n    }\n",
        "index": 67,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 4,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.lang.enums.ValuedEnumTest::testCompareTo_otherEnumType"
        ],
        "failing_tests": [],
        "sum_entropy": -17.48915832149473,
        "mean_entropy": -0.060307442487912866,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n/**\n * <p>Tests for order.</p>\n *\n * <p>The default ordering is numeric by value, but this\n * can be overridden by subclasses.</p>\n *\n * <p>NOTE: From v2.2 the enums must be of the same type.\n * If the parameter is in a different class loader than this instance,\n * reflection is used to compare the values.</p>\n *\n * @see java.lang.Comparable#compareTo(Object)\n * @param other  the other object to compare to\n * @return -ve if this is less than the other object, +ve if greater than,\n *  <code>0</code> of equal\n * @throws ClassCastException if other is not an <code>Enum</code>\n * @throws NullPointerException if other is <code>null</code>\n */\npublic int compareTo(Object other) {\n    if (other == null) {\n        throw new NullPointerException(\"Object to compare to is null\");\n    }\n    if (other.getClass() != this.getClass()) {\n        throw new ClassCastException(\"Different types are being compared\");\n    }\n    return iValue - ((ValuedEnum) other).iValue;\n}\n",
        "index": 24,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 4,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.lang.enums.ValuedEnumTest::testCompareTo_otherEnumType"
        ],
        "failing_tests": [],
        "sum_entropy": -14.944716663247641,
        "mean_entropy": -0.06253019524371398,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "wrong"
      }
    ]
  }
}