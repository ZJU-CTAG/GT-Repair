{
  "Jsoup_10_src/main/java/org/jsoup/nodes/Node.java_136_179": {
    "patches": [
      {
        "patch": "\n    /**\n     * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or\n     * <code>&lt;img src></code>).\n     * <p/>\n     * E.g.: <code>String absUrl = linkEl.absUrl(\"href\");</code>\n     * <p/>\n     * If the attribute value is already absolute (i.e. it starts with a protocol, like\n     * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is\n     * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made\n     * absolute using that.\n     * <p/>\n     * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:\n     * <code>String absUrl = linkEl.attr(\"abs:href\");</code>\n     *\n     * @param attributeKey The attribute key\n     * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or\n     * could not be made successfully into a URL.\n     * @see #attr\n     * @see java.net.URL#URL(java.net.URL, String)\n     */\n    public String absUrl(String attributeKey) {\n        Validate.notEmpty(attributeKey);\n\n        String relUrl = attr(attributeKey);\n        if (!hasAttr(attributeKey)) {\n            return \"\"; // nothing to make absolute with\n        } else {\n            URL base;\n            try {\n                try {\n                    base = new URL(baseUri);\n                } catch (MalformedURLException e) {\n                    // the base is unsuitable, but the attribute may be abs on its own, so try that\n                    URL abs = new URL(relUrl);\n                    return abs.toExternalForm();\n                }\n                // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n                if (relUrl.startsWith(\"?\")) {\n                    relUrl = base.getPath() + relUrl;\n                }\n                URL abs = new URL(base, relUrl);\n                return abs.toExternalForm();\n            } catch (MalformedURLException e) {\n                return \"\";\n            }\n        }\n    }\n",
        "index": 62,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 13,
        "failing_relevant": 0,
        "passing_tests": [
          "org.jsoup.nodes.NodeTest::absHandlesRelativeQuery"
        ],
        "failing_tests": [],
        "sum_entropy": -7.813773528673692,
        "mean_entropy": -0.015690308290509422,
        "pass_FIB_num": 2,
        "pass_FIB": [
          "Jsoup_10_n13.txt",
          "Jsoup_10_n41.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    public String absUrl(String attributeKey) {\n        Validate.notEmpty(attributeKey);\n\n        String relUrl = attr(attributeKey);\n        if (!hasAttr(attributeKey)) {\n            return \"\"; // nothing to make absolute with\n        } else {\n            URL base;\n            try {\n                try {\n                    base = new URL(baseUri);\n                } catch (MalformedURLException e) {\n                    // the base is unsuitable, but the attribute may be abs on its own, so try that\n                    URL abs = new URL(relUrl);\n                    return abs.toExternalForm();\n                }\n                // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n                if (relUrl.startsWith(\"?\")) {\n                    relUrl = base.getPath() + relUrl;\n                }\n                URL abs = new URL(base, relUrl);\n                return abs.toExternalForm();\n            } catch (MalformedURLException e) {\n                return \"\";\n            }\n        }\n    }\n",
        "index": 80,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 13,
        "failing_relevant": 0,
        "passing_tests": [
          "org.jsoup.nodes.NodeTest::absHandlesRelativeQuery"
        ],
        "failing_tests": [],
        "sum_entropy": -4.477051131751199,
        "mean_entropy": -0.02194632907721176,
        "pass_FIB_num": 2,
        "pass_FIB": [
          "Jsoup_10_n13.txt",
          "Jsoup_10_n41.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    public String absUrl(String attributeKey) {\n        Validate.notEmpty(attributeKey);\n\n        String relUrl = attr(attributeKey);\n        if (!hasAttr(attributeKey)) {\n            return \"\"; // nothing to make absolute with\n        } else {\n            URL base;\n            try {\n                try {\n                    base = new URL(baseUri);\n                } catch (MalformedURLException e) {\n                    // the base is unsuitable, but the attribute may be abs on its own, so try that\n                    URL abs = new URL(relUrl);\n                    return abs.toExternalForm();\n                }\n                // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n                URL abs;\n                if (relUrl.startsWith(\"?\")) {\n                    abs = new URL(base.getProtocol(), base.getHost(), base.getPort(), base.getPath() + relUrl);\n                } else {\n                    abs = new URL(base, relUrl);\n                }\n                return abs.toExternalForm();\n            } catch (MalformedURLException e) {\n                return \"\";\n            }\n        }\n    }\n",
        "index": 33,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 13,
        "failing_relevant": 0,
        "passing_tests": [
          "org.jsoup.nodes.NodeTest::absHandlesRelativeQuery"
        ],
        "failing_tests": [],
        "sum_entropy": -6.11733995239974,
        "mean_entropy": -0.027555585371169998,
        "pass_FIB_num": 2,
        "pass_FIB": [
          "Jsoup_10_n13.txt",
          "Jsoup_10_n41.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\npublic String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n\n    String relUrl = attr(attributeKey);\n    if (!hasAttr(attributeKey)) {\n        return \"\"; // nothing to make absolute with\n    } else {\n        URL base;\n        try {\n            try {\n                base = new URL(baseUri);\n            } catch (MalformedURLException e) {\n                // the base is unsuitable, but the attribute may be abs on its own, so try that\n                URL abs = new URL(relUrl);\n                return abs.toExternalForm();\n            }\n            // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n            URL abs = new URL(base, relUrl);\n            if (relUrl.startsWith(\"?\")) {\n                abs = new URL(base.getProtocol(), base.getHost(), base.getPort(), base.getPath() + relUrl, null);\n            }\n            return abs.toExternalForm();\n        } catch (MalformedURLException e) {\n            return \"\";\n        }\n    }\n}\n",
        "index": 21,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 13,
        "failing_relevant": 0,
        "passing_tests": [
          "org.jsoup.nodes.NodeTest::absHandlesRelativeQuery"
        ],
        "failing_tests": [],
        "sum_entropy": -11.641616955230472,
        "mean_entropy": -0.054147055605723124,
        "pass_FIB_num": 2,
        "pass_FIB": [
          "Jsoup_10_n13.txt",
          "Jsoup_10_n41.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    public String absUrl(String attributeKey) {\n        Validate.notEmpty(attributeKey);\n\n        String relUrl = attr(attributeKey);\n        if (!hasAttr(attributeKey)) {\n            return \"\"; // nothing to make absolute with\n        } else {\n            URL base;\n            try {\n                try {\n                    base = new URL(baseUri);\n                } catch (MalformedURLException e) {\n                    // the base is unsuitable, but the attribute may be abs on its own, so try that\n                    URL abs = new URL(relUrl);\n                    return abs.toExternalForm();\n                }\n                // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n                URL abs = new URL(base, relUrl);\n                // Fix for the bug report\n                if (relUrl.startsWith(\"?\")) {\n                    String baseStr = base.toExternalForm();\n                    if (baseStr.contains(\"?\")) {\n                        return baseStr.substring(0, baseStr.indexOf(\"?\")) + relUrl;\n                    }\n                }\n                return abs.toExternalForm();\n            } catch (MalformedURLException e) {\n                return \"\";\n            }\n        }\n    }\n",
        "index": 28,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 13,
        "failing_relevant": 0,
        "passing_tests": [
          "org.jsoup.nodes.NodeTest::absHandlesRelativeQuery"
        ],
        "failing_tests": [],
        "sum_entropy": -15.169181632726227,
        "mean_entropy": -0.06346937921642773,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    public String absUrl(String attributeKey) {\n        Validate.notEmpty(attributeKey);\n\n        String relUrl = attr(attributeKey);\n        if (!hasAttr(attributeKey)) {\n            return \"\"; // nothing to make absolute with\n        } else {\n            URL base;\n            try {\n                try {\n                    base = new URL(baseUri);\n                } catch (MalformedURLException e) {\n                    // the base is unsuitable, but the attribute may be abs on its own, so try that\n                    URL abs = new URL(relUrl);\n                    return abs.toExternalForm();\n                }\n                // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n                URL abs = new URL(base, relUrl);\n                if (relUrl.startsWith(\"?\")) {\n                    // Handle the case where the relative URL starts with '?'\n                    String baseWithoutQuery = base.toString().split(\"\\\\?\")[0];\n                    return baseWithoutQuery + relUrl;\n                }\n                return abs.toExternalForm();\n            } catch (MalformedURLException e) {\n                return \"\";\n            }\n        }\n    }\n",
        "index": 42,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 13,
        "failing_relevant": 0,
        "passing_tests": [
          "org.jsoup.nodes.NodeTest::absHandlesRelativeQuery"
        ],
        "failing_tests": [],
        "sum_entropy": -16.20393920879659,
        "mean_entropy": -0.07045190960346344,
        "pass_FIB_num": 2,
        "pass_FIB": [
          "Jsoup_10_n13.txt",
          "Jsoup_10_n41.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      }
    ]
  }
}