{
  "JacksonCore_5_src/main/java/com/fasterxml/jackson/core/JsonPointer.java_185_205": {
    "patches": [
      {
        "patch": "\n    private final static int _parseIndex(String str) {\n        final int len = str.length();\n        // [Issue#133]: beware of super long indexes; assume we never\n        // have arrays over 2 billion entries so ints are fine.\n        if (len == 0 || len > 10) {\n            return -1;\n        }\n        for (int i = 0; i < len; ++i) {\n            char c = str.charAt(i);\n            if (c > '9' || c < '0') {\n                return -1;\n            }\n        }\n        if (len == 10) {\n            long l = NumberInput.parseLong(str);\n            if (l > Integer.MAX_VALUE) {\n                return -1;\n            }\n        }\n        return NumberInput.parseInt(str);\n    }\n",
        "index": 1,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "com.fasterxml.jackson.core.TestJsonPointer::testWonkyNumber173"
        ],
        "failing_tests": [],
        "sum_entropy": -1.198984225950251,
        "mean_entropy": -0.007136810868751494,
        "pass_FIB_num": 34,
        "pass_FIB": [
          "JacksonCore_5_n47.txt",
          "JacksonCore_5_n29.txt",
          "JacksonCore_5_n9.txt",
          "JacksonCore_5_n22.txt",
          "JacksonCore_5_n33.txt",
          "JacksonCore_5_n2.txt",
          "JacksonCore_5_n8.txt",
          "JacksonCore_5_n49.txt",
          "JacksonCore_5_n4.txt",
          "JacksonCore_5_n14.txt",
          "JacksonCore_5_n37.txt",
          "JacksonCore_5_n41.txt",
          "JacksonCore_5_n7.txt",
          "JacksonCore_5_n40.txt",
          "JacksonCore_5_n20.txt",
          "JacksonCore_5_n23.txt",
          "JacksonCore_5_n38.txt",
          "JacksonCore_5_n39.txt",
          "JacksonCore_5_n5.txt",
          "JacksonCore_5_n24.txt",
          "JacksonCore_5_n26.txt",
          "JacksonCore_5_n31.txt",
          "JacksonCore_5_n27.txt",
          "JacksonCore_5_n12.txt",
          "JacksonCore_5_n19.txt",
          "JacksonCore_5_n36.txt",
          "JacksonCore_5_n28.txt",
          "JacksonCore_5_n18.txt",
          "JacksonCore_5_n6.txt",
          "JacksonCore_5_n17.txt",
          "JacksonCore_5_n1.txt",
          "JacksonCore_5_n13.txt",
          "JacksonCore_5_n10.txt",
          "JacksonCore_5_n16.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    private final static int _parseIndex(String str) {\n        final int len = str.length();\n        // [Issue#133]: beware of super long indexes; assume we never\n        // have arrays over 2 billion entries so ints are fine.\n        if (len == 0 || len > 10) {\n            return -1;\n        }\n        for (int i = 0; i < len; ++i) {\n            char c = str.charAt(i);\n            if (c > '9' || c < '0') {\n                return -1;\n            }\n        }\n        if (len == 10) {\n            long l = NumberInput.parseLong(str);\n            if (l > Integer.MAX_VALUE) {\n                return -1;\n            }\n        }\n        return NumberInput.parseInt(str);\n    }\n",
        "index": 2,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "com.fasterxml.jackson.core.TestJsonPointer::testWonkyNumber173"
        ],
        "failing_tests": [],
        "sum_entropy": -1.198984225950251,
        "mean_entropy": -0.007136810868751494,
        "pass_FIB_num": 34,
        "pass_FIB": [
          "JacksonCore_5_n47.txt",
          "JacksonCore_5_n29.txt",
          "JacksonCore_5_n9.txt",
          "JacksonCore_5_n22.txt",
          "JacksonCore_5_n33.txt",
          "JacksonCore_5_n2.txt",
          "JacksonCore_5_n8.txt",
          "JacksonCore_5_n49.txt",
          "JacksonCore_5_n4.txt",
          "JacksonCore_5_n14.txt",
          "JacksonCore_5_n37.txt",
          "JacksonCore_5_n41.txt",
          "JacksonCore_5_n7.txt",
          "JacksonCore_5_n40.txt",
          "JacksonCore_5_n20.txt",
          "JacksonCore_5_n23.txt",
          "JacksonCore_5_n38.txt",
          "JacksonCore_5_n39.txt",
          "JacksonCore_5_n5.txt",
          "JacksonCore_5_n24.txt",
          "JacksonCore_5_n26.txt",
          "JacksonCore_5_n31.txt",
          "JacksonCore_5_n27.txt",
          "JacksonCore_5_n12.txt",
          "JacksonCore_5_n19.txt",
          "JacksonCore_5_n36.txt",
          "JacksonCore_5_n28.txt",
          "JacksonCore_5_n18.txt",
          "JacksonCore_5_n6.txt",
          "JacksonCore_5_n17.txt",
          "JacksonCore_5_n1.txt",
          "JacksonCore_5_n13.txt",
          "JacksonCore_5_n10.txt",
          "JacksonCore_5_n16.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    private final static int _parseIndex(String str) {\n        final int len = str.length();\n        // [Issue#133]: beware of super long indexes; assume we never\n        // have arrays over 2 billion entries so ints are fine.\n        if (len == 0 || len > 10) {\n            return -1;\n        }\n        for (int i = 0; i < len; ++i) {\n            char c = str.charAt(i);\n            if (c > '9' || c < '0') {\n                return -1;\n            }\n        }\n        if (len == 10) {\n            long l = NumberInput.parseLong(str);\n            if (l > Integer.MAX_VALUE) {\n                return -1;\n            }\n        }\n        return NumberInput.parseInt(str);\n    }\n",
        "index": 4,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "com.fasterxml.jackson.core.TestJsonPointer::testWonkyNumber173"
        ],
        "failing_tests": [],
        "sum_entropy": -1.198984225950251,
        "mean_entropy": -0.007136810868751494,
        "pass_FIB_num": 34,
        "pass_FIB": [
          "JacksonCore_5_n47.txt",
          "JacksonCore_5_n29.txt",
          "JacksonCore_5_n9.txt",
          "JacksonCore_5_n22.txt",
          "JacksonCore_5_n33.txt",
          "JacksonCore_5_n2.txt",
          "JacksonCore_5_n8.txt",
          "JacksonCore_5_n49.txt",
          "JacksonCore_5_n4.txt",
          "JacksonCore_5_n14.txt",
          "JacksonCore_5_n37.txt",
          "JacksonCore_5_n41.txt",
          "JacksonCore_5_n7.txt",
          "JacksonCore_5_n40.txt",
          "JacksonCore_5_n20.txt",
          "JacksonCore_5_n23.txt",
          "JacksonCore_5_n38.txt",
          "JacksonCore_5_n39.txt",
          "JacksonCore_5_n5.txt",
          "JacksonCore_5_n24.txt",
          "JacksonCore_5_n26.txt",
          "JacksonCore_5_n31.txt",
          "JacksonCore_5_n27.txt",
          "JacksonCore_5_n12.txt",
          "JacksonCore_5_n19.txt",
          "JacksonCore_5_n36.txt",
          "JacksonCore_5_n28.txt",
          "JacksonCore_5_n18.txt",
          "JacksonCore_5_n6.txt",
          "JacksonCore_5_n17.txt",
          "JacksonCore_5_n1.txt",
          "JacksonCore_5_n13.txt",
          "JacksonCore_5_n10.txt",
          "JacksonCore_5_n16.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    private final static int _parseIndex(String str) {\n        final int len = str.length();\n        // [Issue#133]: beware of super long indexes; assume we never\n        // have arrays over 2 billion entries so ints are fine.\n        if (len == 0 || len > 10) {\n            return -1;\n        }\n        for (int i = 0; i < len; ++i) {\n            char c = str.charAt(i);\n            if (c > '9' || c < '0') {\n                return -1;\n            }\n        }\n        if (len == 10) {\n            long l = NumberInput.parseLong(str);\n            if (l > Integer.MAX_VALUE) {\n                return -1;\n            }\n        }\n        return NumberInput.parseInt(str);\n    }\n",
        "index": 5,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "com.fasterxml.jackson.core.TestJsonPointer::testWonkyNumber173"
        ],
        "failing_tests": [],
        "sum_entropy": -1.198984225950251,
        "mean_entropy": -0.007136810868751494,
        "pass_FIB_num": 34,
        "pass_FIB": [
          "JacksonCore_5_n47.txt",
          "JacksonCore_5_n29.txt",
          "JacksonCore_5_n9.txt",
          "JacksonCore_5_n22.txt",
          "JacksonCore_5_n33.txt",
          "JacksonCore_5_n2.txt",
          "JacksonCore_5_n8.txt",
          "JacksonCore_5_n49.txt",
          "JacksonCore_5_n4.txt",
          "JacksonCore_5_n14.txt",
          "JacksonCore_5_n37.txt",
          "JacksonCore_5_n41.txt",
          "JacksonCore_5_n7.txt",
          "JacksonCore_5_n40.txt",
          "JacksonCore_5_n20.txt",
          "JacksonCore_5_n23.txt",
          "JacksonCore_5_n38.txt",
          "JacksonCore_5_n39.txt",
          "JacksonCore_5_n5.txt",
          "JacksonCore_5_n24.txt",
          "JacksonCore_5_n26.txt",
          "JacksonCore_5_n31.txt",
          "JacksonCore_5_n27.txt",
          "JacksonCore_5_n12.txt",
          "JacksonCore_5_n19.txt",
          "JacksonCore_5_n36.txt",
          "JacksonCore_5_n28.txt",
          "JacksonCore_5_n18.txt",
          "JacksonCore_5_n6.txt",
          "JacksonCore_5_n17.txt",
          "JacksonCore_5_n1.txt",
          "JacksonCore_5_n13.txt",
          "JacksonCore_5_n10.txt",
          "JacksonCore_5_n16.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    private final static int _parseIndex(String str) {\n        final int len = str.length();\n        // [Issue#133]: beware of super long indexes; assume we never\n        // have arrays over 2 billion entries so ints are fine.\n        if (len == 0 || len > 10) {\n            return -1;\n        }\n        for (int i = 0; i < len; ++i) {\n            char c = str.charAt(i);\n            if (c > '9' || c < '0') {\n                return -1;\n            }\n        }\n        if (len == 10) {\n            long l = NumberInput.parseLong(str);\n            if (l > Integer.MAX_VALUE) {\n                return -1;\n            }\n        }\n        return NumberInput.parseInt(str);\n    }\n",
        "index": 6,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "com.fasterxml.jackson.core.TestJsonPointer::testWonkyNumber173"
        ],
        "failing_tests": [],
        "sum_entropy": -1.198984225950251,
        "mean_entropy": -0.007136810868751494,
        "pass_FIB_num": 34,
        "pass_FIB": [
          "JacksonCore_5_n47.txt",
          "JacksonCore_5_n29.txt",
          "JacksonCore_5_n9.txt",
          "JacksonCore_5_n22.txt",
          "JacksonCore_5_n33.txt",
          "JacksonCore_5_n2.txt",
          "JacksonCore_5_n8.txt",
          "JacksonCore_5_n49.txt",
          "JacksonCore_5_n4.txt",
          "JacksonCore_5_n14.txt",
          "JacksonCore_5_n37.txt",
          "JacksonCore_5_n41.txt",
          "JacksonCore_5_n7.txt",
          "JacksonCore_5_n40.txt",
          "JacksonCore_5_n20.txt",
          "JacksonCore_5_n23.txt",
          "JacksonCore_5_n38.txt",
          "JacksonCore_5_n39.txt",
          "JacksonCore_5_n5.txt",
          "JacksonCore_5_n24.txt",
          "JacksonCore_5_n26.txt",
          "JacksonCore_5_n31.txt",
          "JacksonCore_5_n27.txt",
          "JacksonCore_5_n12.txt",
          "JacksonCore_5_n19.txt",
          "JacksonCore_5_n36.txt",
          "JacksonCore_5_n28.txt",
          "JacksonCore_5_n18.txt",
          "JacksonCore_5_n6.txt",
          "JacksonCore_5_n17.txt",
          "JacksonCore_5_n1.txt",
          "JacksonCore_5_n13.txt",
          "JacksonCore_5_n10.txt",
          "JacksonCore_5_n16.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    private final static int _parseIndex(String str) {\n        final int len = str.length();\n        // [Issue#133]: beware of super long indexes; assume we never\n        // have arrays over 2 billion entries so ints are fine.\n        if (len == 0 || len > 10) {\n            return -1;\n        }\n        for (int i = 0; i < len; ++i) {\n            char c = str.charAt(i);\n            if (c > '9' || c < '0') {\n                return -1;\n            }\n        }\n        if (len == 10) {\n            long l = NumberInput.parseLong(str);\n            if (l > Integer.MAX_VALUE) {\n                return -1;\n            }\n        }\n        return NumberInput.parseInt(str);\n    }\n",
        "index": 7,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "com.fasterxml.jackson.core.TestJsonPointer::testWonkyNumber173"
        ],
        "failing_tests": [],
        "sum_entropy": -1.198984225950251,
        "mean_entropy": -0.007136810868751494,
        "pass_FIB_num": 34,
        "pass_FIB": [
          "JacksonCore_5_n47.txt",
          "JacksonCore_5_n29.txt",
          "JacksonCore_5_n9.txt",
          "JacksonCore_5_n22.txt",
          "JacksonCore_5_n33.txt",
          "JacksonCore_5_n2.txt",
          "JacksonCore_5_n8.txt",
          "JacksonCore_5_n49.txt",
          "JacksonCore_5_n4.txt",
          "JacksonCore_5_n14.txt",
          "JacksonCore_5_n37.txt",
          "JacksonCore_5_n41.txt",
          "JacksonCore_5_n7.txt",
          "JacksonCore_5_n40.txt",
          "JacksonCore_5_n20.txt",
          "JacksonCore_5_n23.txt",
          "JacksonCore_5_n38.txt",
          "JacksonCore_5_n39.txt",
          "JacksonCore_5_n5.txt",
          "JacksonCore_5_n24.txt",
          "JacksonCore_5_n26.txt",
          "JacksonCore_5_n31.txt",
          "JacksonCore_5_n27.txt",
          "JacksonCore_5_n12.txt",
          "JacksonCore_5_n19.txt",
          "JacksonCore_5_n36.txt",
          "JacksonCore_5_n28.txt",
          "JacksonCore_5_n18.txt",
          "JacksonCore_5_n6.txt",
          "JacksonCore_5_n17.txt",
          "JacksonCore_5_n1.txt",
          "JacksonCore_5_n13.txt",
          "JacksonCore_5_n10.txt",
          "JacksonCore_5_n16.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    private final static int _parseIndex(String str) {\n        final int len = str.length();\n        // [Issue#133]: beware of super long indexes; assume we never\n        // have arrays over 2 billion entries so ints are fine.\n        if (len == 0 || len > 10) {\n            return -1;\n        }\n        for (int i = 0; i < len; ++i) {\n            char c = str.charAt(i);\n            if (c > '9' || c < '0') {\n                return -1;\n            }\n        }\n        if (len == 10) {\n            long l = NumberInput.parseLong(str);\n            if (l > Integer.MAX_VALUE) {\n                return -1;\n            }\n        }\n        return NumberInput.parseInt(str);\n    }\n",
        "index": 10,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "com.fasterxml.jackson.core.TestJsonPointer::testWonkyNumber173"
        ],
        "failing_tests": [],
        "sum_entropy": -1.198984225950251,
        "mean_entropy": -0.007136810868751494,
        "pass_FIB_num": 34,
        "pass_FIB": [
          "JacksonCore_5_n47.txt",
          "JacksonCore_5_n29.txt",
          "JacksonCore_5_n9.txt",
          "JacksonCore_5_n22.txt",
          "JacksonCore_5_n33.txt",
          "JacksonCore_5_n2.txt",
          "JacksonCore_5_n8.txt",
          "JacksonCore_5_n49.txt",
          "JacksonCore_5_n4.txt",
          "JacksonCore_5_n14.txt",
          "JacksonCore_5_n37.txt",
          "JacksonCore_5_n41.txt",
          "JacksonCore_5_n7.txt",
          "JacksonCore_5_n40.txt",
          "JacksonCore_5_n20.txt",
          "JacksonCore_5_n23.txt",
          "JacksonCore_5_n38.txt",
          "JacksonCore_5_n39.txt",
          "JacksonCore_5_n5.txt",
          "JacksonCore_5_n24.txt",
          "JacksonCore_5_n26.txt",
          "JacksonCore_5_n31.txt",
          "JacksonCore_5_n27.txt",
          "JacksonCore_5_n12.txt",
          "JacksonCore_5_n19.txt",
          "JacksonCore_5_n36.txt",
          "JacksonCore_5_n28.txt",
          "JacksonCore_5_n18.txt",
          "JacksonCore_5_n6.txt",
          "JacksonCore_5_n17.txt",
          "JacksonCore_5_n1.txt",
          "JacksonCore_5_n13.txt",
          "JacksonCore_5_n10.txt",
          "JacksonCore_5_n16.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    private final static int _parseIndex(String str) {\n        final int len = str.length();\n        // [Issue#133]: beware of super long indexes; assume we never\n        // have arrays over 2 billion entries so ints are fine.\n        if (len == 0 || len > 10) {\n            return -1;\n        }\n        for (int i = 0; i < len; ++i) {\n            char c = str.charAt(i);\n            if (c > '9' || c < '0') {\n                return -1;\n            }\n        }\n        if (len == 10) {\n            long l = NumberInput.parseLong(str);\n            if (l > Integer.MAX_VALUE) {\n                return -1;\n            }\n        }\n        return NumberInput.parseInt(str);\n    }\n",
        "index": 12,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "com.fasterxml.jackson.core.TestJsonPointer::testWonkyNumber173"
        ],
        "failing_tests": [],
        "sum_entropy": -1.198984225950251,
        "mean_entropy": -0.007136810868751494,
        "pass_FIB_num": 34,
        "pass_FIB": [
          "JacksonCore_5_n47.txt",
          "JacksonCore_5_n29.txt",
          "JacksonCore_5_n9.txt",
          "JacksonCore_5_n22.txt",
          "JacksonCore_5_n33.txt",
          "JacksonCore_5_n2.txt",
          "JacksonCore_5_n8.txt",
          "JacksonCore_5_n49.txt",
          "JacksonCore_5_n4.txt",
          "JacksonCore_5_n14.txt",
          "JacksonCore_5_n37.txt",
          "JacksonCore_5_n41.txt",
          "JacksonCore_5_n7.txt",
          "JacksonCore_5_n40.txt",
          "JacksonCore_5_n20.txt",
          "JacksonCore_5_n23.txt",
          "JacksonCore_5_n38.txt",
          "JacksonCore_5_n39.txt",
          "JacksonCore_5_n5.txt",
          "JacksonCore_5_n24.txt",
          "JacksonCore_5_n26.txt",
          "JacksonCore_5_n31.txt",
          "JacksonCore_5_n27.txt",
          "JacksonCore_5_n12.txt",
          "JacksonCore_5_n19.txt",
          "JacksonCore_5_n36.txt",
          "JacksonCore_5_n28.txt",
          "JacksonCore_5_n18.txt",
          "JacksonCore_5_n6.txt",
          "JacksonCore_5_n17.txt",
          "JacksonCore_5_n1.txt",
          "JacksonCore_5_n13.txt",
          "JacksonCore_5_n10.txt",
          "JacksonCore_5_n16.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    private final static int _parseIndex(String str) {\n        final int len = str.length();\n        // [Issue#133]: beware of super long indexes; assume we never\n        // have arrays over 2 billion entries so ints are fine.\n        if (len == 0 || len > 10) {\n            return -1;\n        }\n        for (int i = 0; i < len; ++i) {\n            char c = str.charAt(i);\n            if (c > '9' || c < '0') {\n                return -1;\n            }\n        }\n        if (len == 10) {\n            long l = NumberInput.parseLong(str);\n            if (l > Integer.MAX_VALUE) {\n                return -1;\n            }\n        }\n        return NumberInput.parseInt(str);\n    }\n",
        "index": 63,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "com.fasterxml.jackson.core.TestJsonPointer::testWonkyNumber173"
        ],
        "failing_tests": [],
        "sum_entropy": -1.3276625362753303,
        "mean_entropy": -0.007902753192115062,
        "pass_FIB_num": 34,
        "pass_FIB": [
          "JacksonCore_5_n47.txt",
          "JacksonCore_5_n29.txt",
          "JacksonCore_5_n9.txt",
          "JacksonCore_5_n22.txt",
          "JacksonCore_5_n33.txt",
          "JacksonCore_5_n2.txt",
          "JacksonCore_5_n8.txt",
          "JacksonCore_5_n49.txt",
          "JacksonCore_5_n4.txt",
          "JacksonCore_5_n14.txt",
          "JacksonCore_5_n37.txt",
          "JacksonCore_5_n41.txt",
          "JacksonCore_5_n7.txt",
          "JacksonCore_5_n40.txt",
          "JacksonCore_5_n20.txt",
          "JacksonCore_5_n23.txt",
          "JacksonCore_5_n38.txt",
          "JacksonCore_5_n39.txt",
          "JacksonCore_5_n5.txt",
          "JacksonCore_5_n24.txt",
          "JacksonCore_5_n26.txt",
          "JacksonCore_5_n31.txt",
          "JacksonCore_5_n27.txt",
          "JacksonCore_5_n12.txt",
          "JacksonCore_5_n19.txt",
          "JacksonCore_5_n36.txt",
          "JacksonCore_5_n28.txt",
          "JacksonCore_5_n18.txt",
          "JacksonCore_5_n6.txt",
          "JacksonCore_5_n17.txt",
          "JacksonCore_5_n1.txt",
          "JacksonCore_5_n13.txt",
          "JacksonCore_5_n10.txt",
          "JacksonCore_5_n16.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    private final static int _parseIndex(String str) {\n        final int len = str.length();\n        // [Issue#133]: beware of super long indexes; assume we never\n        // have arrays over 2 billion entries so ints are fine.\n        if (len == 0 || len > 10) {\n            return -1;\n        }\n        for (int i = 0; i < len; ++i) {\n            char c = str.charAt(i);\n            if (c > '9' || c < '0') {\n                return -1;\n            }\n        }\n        if (len == 10) {\n            long l = NumberInput.parseLong(str);\n            if (l > Integer.MAX_VALUE) {\n                return -1;\n            }\n        }\n        return NumberInput.parseInt(str);\n    }\n",
        "index": 64,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "com.fasterxml.jackson.core.TestJsonPointer::testWonkyNumber173"
        ],
        "failing_tests": [],
        "sum_entropy": -1.3276625362753303,
        "mean_entropy": -0.007902753192115062,
        "pass_FIB_num": 34,
        "pass_FIB": [
          "JacksonCore_5_n47.txt",
          "JacksonCore_5_n29.txt",
          "JacksonCore_5_n9.txt",
          "JacksonCore_5_n22.txt",
          "JacksonCore_5_n33.txt",
          "JacksonCore_5_n2.txt",
          "JacksonCore_5_n8.txt",
          "JacksonCore_5_n49.txt",
          "JacksonCore_5_n4.txt",
          "JacksonCore_5_n14.txt",
          "JacksonCore_5_n37.txt",
          "JacksonCore_5_n41.txt",
          "JacksonCore_5_n7.txt",
          "JacksonCore_5_n40.txt",
          "JacksonCore_5_n20.txt",
          "JacksonCore_5_n23.txt",
          "JacksonCore_5_n38.txt",
          "JacksonCore_5_n39.txt",
          "JacksonCore_5_n5.txt",
          "JacksonCore_5_n24.txt",
          "JacksonCore_5_n26.txt",
          "JacksonCore_5_n31.txt",
          "JacksonCore_5_n27.txt",
          "JacksonCore_5_n12.txt",
          "JacksonCore_5_n19.txt",
          "JacksonCore_5_n36.txt",
          "JacksonCore_5_n28.txt",
          "JacksonCore_5_n18.txt",
          "JacksonCore_5_n6.txt",
          "JacksonCore_5_n17.txt",
          "JacksonCore_5_n1.txt",
          "JacksonCore_5_n13.txt",
          "JacksonCore_5_n10.txt",
          "JacksonCore_5_n16.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    private final static int _parseIndex(String str) {\n        final int len = str.length();\n        // [Issue#133]: beware of super long indexes; assume we never\n        // have arrays over 2 billion entries so ints are fine.\n        if (len == 0 || len > 10) {\n            return -1;\n        }\n        for (int i = 0; i < len; ++i) {\n            char c = str.charAt(i);\n            if (c > '9' || c < '0') {\n                return -1;\n            }\n        }\n        if (len == 10) {\n            long l = NumberInput.parseLong(str);\n            if (l > Integer.MAX_VALUE) {\n                return -1;\n            }\n        }\n        return NumberInput.parseInt(str);\n    }\n",
        "index": 66,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "com.fasterxml.jackson.core.TestJsonPointer::testWonkyNumber173"
        ],
        "failing_tests": [],
        "sum_entropy": -1.3276625362753303,
        "mean_entropy": -0.007902753192115062,
        "pass_FIB_num": 34,
        "pass_FIB": [
          "JacksonCore_5_n47.txt",
          "JacksonCore_5_n29.txt",
          "JacksonCore_5_n9.txt",
          "JacksonCore_5_n22.txt",
          "JacksonCore_5_n33.txt",
          "JacksonCore_5_n2.txt",
          "JacksonCore_5_n8.txt",
          "JacksonCore_5_n49.txt",
          "JacksonCore_5_n4.txt",
          "JacksonCore_5_n14.txt",
          "JacksonCore_5_n37.txt",
          "JacksonCore_5_n41.txt",
          "JacksonCore_5_n7.txt",
          "JacksonCore_5_n40.txt",
          "JacksonCore_5_n20.txt",
          "JacksonCore_5_n23.txt",
          "JacksonCore_5_n38.txt",
          "JacksonCore_5_n39.txt",
          "JacksonCore_5_n5.txt",
          "JacksonCore_5_n24.txt",
          "JacksonCore_5_n26.txt",
          "JacksonCore_5_n31.txt",
          "JacksonCore_5_n27.txt",
          "JacksonCore_5_n12.txt",
          "JacksonCore_5_n19.txt",
          "JacksonCore_5_n36.txt",
          "JacksonCore_5_n28.txt",
          "JacksonCore_5_n18.txt",
          "JacksonCore_5_n6.txt",
          "JacksonCore_5_n17.txt",
          "JacksonCore_5_n1.txt",
          "JacksonCore_5_n13.txt",
          "JacksonCore_5_n10.txt",
          "JacksonCore_5_n16.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    private final static int _parseIndex(String str) {\n        final int len = str.length();\n        // [Issue#133]: beware of super long indexes; assume we never\n        // have arrays over 2 billion entries so ints are fine.\n        if (len == 0 || len > 10) {\n            return -1;\n        }\n        for (int i = 0; i < len; ++i) {\n            char c = str.charAt(i);\n            if (c > '9' || c < '0') {\n                return -1;\n            }\n        }\n        if (len == 10) {\n            long l = NumberInput.parseLong(str);\n            if (l > Integer.MAX_VALUE) {\n                return -1;\n            }\n        }\n        return NumberInput.parseInt(str);\n    }\n",
        "index": 67,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "com.fasterxml.jackson.core.TestJsonPointer::testWonkyNumber173"
        ],
        "failing_tests": [],
        "sum_entropy": -1.3276625362753303,
        "mean_entropy": -0.007902753192115062,
        "pass_FIB_num": 34,
        "pass_FIB": [
          "JacksonCore_5_n47.txt",
          "JacksonCore_5_n29.txt",
          "JacksonCore_5_n9.txt",
          "JacksonCore_5_n22.txt",
          "JacksonCore_5_n33.txt",
          "JacksonCore_5_n2.txt",
          "JacksonCore_5_n8.txt",
          "JacksonCore_5_n49.txt",
          "JacksonCore_5_n4.txt",
          "JacksonCore_5_n14.txt",
          "JacksonCore_5_n37.txt",
          "JacksonCore_5_n41.txt",
          "JacksonCore_5_n7.txt",
          "JacksonCore_5_n40.txt",
          "JacksonCore_5_n20.txt",
          "JacksonCore_5_n23.txt",
          "JacksonCore_5_n38.txt",
          "JacksonCore_5_n39.txt",
          "JacksonCore_5_n5.txt",
          "JacksonCore_5_n24.txt",
          "JacksonCore_5_n26.txt",
          "JacksonCore_5_n31.txt",
          "JacksonCore_5_n27.txt",
          "JacksonCore_5_n12.txt",
          "JacksonCore_5_n19.txt",
          "JacksonCore_5_n36.txt",
          "JacksonCore_5_n28.txt",
          "JacksonCore_5_n18.txt",
          "JacksonCore_5_n6.txt",
          "JacksonCore_5_n17.txt",
          "JacksonCore_5_n1.txt",
          "JacksonCore_5_n13.txt",
          "JacksonCore_5_n10.txt",
          "JacksonCore_5_n16.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    private final static int _parseIndex(String str) {\n        final int len = str.length();\n        // [Issue#133]: beware of super long indexes; assume we never\n        // have arrays over 2 billion entries so ints are fine.\n        if (len == 0 || len > 10) {\n            return -1;\n        }\n        for (int i = 0; i < len; ++i) {\n            char c = str.charAt(i);\n            if (c > '9' || c < '0') {\n                return -1;\n            }\n        }\n        if (len == 10) {\n            long l = NumberInput.parseLong(str);\n            if (l > Integer.MAX_VALUE) {\n                return -1;\n            }\n        }\n        return NumberInput.parseInt(str);\n    }\n",
        "index": 69,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "com.fasterxml.jackson.core.TestJsonPointer::testWonkyNumber173"
        ],
        "failing_tests": [],
        "sum_entropy": -1.3276625362753303,
        "mean_entropy": -0.007902753192115062,
        "pass_FIB_num": 34,
        "pass_FIB": [
          "JacksonCore_5_n47.txt",
          "JacksonCore_5_n29.txt",
          "JacksonCore_5_n9.txt",
          "JacksonCore_5_n22.txt",
          "JacksonCore_5_n33.txt",
          "JacksonCore_5_n2.txt",
          "JacksonCore_5_n8.txt",
          "JacksonCore_5_n49.txt",
          "JacksonCore_5_n4.txt",
          "JacksonCore_5_n14.txt",
          "JacksonCore_5_n37.txt",
          "JacksonCore_5_n41.txt",
          "JacksonCore_5_n7.txt",
          "JacksonCore_5_n40.txt",
          "JacksonCore_5_n20.txt",
          "JacksonCore_5_n23.txt",
          "JacksonCore_5_n38.txt",
          "JacksonCore_5_n39.txt",
          "JacksonCore_5_n5.txt",
          "JacksonCore_5_n24.txt",
          "JacksonCore_5_n26.txt",
          "JacksonCore_5_n31.txt",
          "JacksonCore_5_n27.txt",
          "JacksonCore_5_n12.txt",
          "JacksonCore_5_n19.txt",
          "JacksonCore_5_n36.txt",
          "JacksonCore_5_n28.txt",
          "JacksonCore_5_n18.txt",
          "JacksonCore_5_n6.txt",
          "JacksonCore_5_n17.txt",
          "JacksonCore_5_n1.txt",
          "JacksonCore_5_n13.txt",
          "JacksonCore_5_n10.txt",
          "JacksonCore_5_n16.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    private final static int _parseIndex(String str) {\n        final int len = str.length();\n        // [Issue#133]: beware of super long indexes; assume we never\n        // have arrays over 2 billion entries so ints are fine.\n        if (len == 0 || len > 10) {\n            return -1;\n        }\n        for (int i = 0; i < len; ++i) {\n            char c = str.charAt(i);\n            if (c > '9' || c < '0') {\n                return -1;\n            }\n        }\n        if (len == 10) {\n            long l = NumberInput.parseLong(str);\n            if (l > Integer.MAX_VALUE) {\n                return -1;\n            }\n        }\n        return NumberInput.parseInt(str);\n    }\n",
        "index": 71,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "com.fasterxml.jackson.core.TestJsonPointer::testWonkyNumber173"
        ],
        "failing_tests": [],
        "sum_entropy": -1.3276625362753303,
        "mean_entropy": -0.007902753192115062,
        "pass_FIB_num": 34,
        "pass_FIB": [
          "JacksonCore_5_n47.txt",
          "JacksonCore_5_n29.txt",
          "JacksonCore_5_n9.txt",
          "JacksonCore_5_n22.txt",
          "JacksonCore_5_n33.txt",
          "JacksonCore_5_n2.txt",
          "JacksonCore_5_n8.txt",
          "JacksonCore_5_n49.txt",
          "JacksonCore_5_n4.txt",
          "JacksonCore_5_n14.txt",
          "JacksonCore_5_n37.txt",
          "JacksonCore_5_n41.txt",
          "JacksonCore_5_n7.txt",
          "JacksonCore_5_n40.txt",
          "JacksonCore_5_n20.txt",
          "JacksonCore_5_n23.txt",
          "JacksonCore_5_n38.txt",
          "JacksonCore_5_n39.txt",
          "JacksonCore_5_n5.txt",
          "JacksonCore_5_n24.txt",
          "JacksonCore_5_n26.txt",
          "JacksonCore_5_n31.txt",
          "JacksonCore_5_n27.txt",
          "JacksonCore_5_n12.txt",
          "JacksonCore_5_n19.txt",
          "JacksonCore_5_n36.txt",
          "JacksonCore_5_n28.txt",
          "JacksonCore_5_n18.txt",
          "JacksonCore_5_n6.txt",
          "JacksonCore_5_n17.txt",
          "JacksonCore_5_n1.txt",
          "JacksonCore_5_n13.txt",
          "JacksonCore_5_n10.txt",
          "JacksonCore_5_n16.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    private final static int _parseIndex(String str) {\n        final int len = str.length();\n        // [Issue#133]: beware of super long indexes; assume we never\n        // have arrays over 2 billion entries so ints are fine.\n        if (len == 0 || len > 10) {\n            return -1;\n        }\n        for (int i = 0; i < len; ++i) {\n            char c = str.charAt(i);\n            if (c > '9' || c < '0') {\n                return -1;\n            }\n        }\n        if (len == 10) {\n            long l = NumberInput.parseLong(str);\n            if (l > Integer.MAX_VALUE) {\n                return -1;\n            }\n        }\n        return NumberInput.parseInt(str);\n    }\n",
        "index": 73,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "com.fasterxml.jackson.core.TestJsonPointer::testWonkyNumber173"
        ],
        "failing_tests": [],
        "sum_entropy": -1.3276625362753303,
        "mean_entropy": -0.007902753192115062,
        "pass_FIB_num": 34,
        "pass_FIB": [
          "JacksonCore_5_n47.txt",
          "JacksonCore_5_n29.txt",
          "JacksonCore_5_n9.txt",
          "JacksonCore_5_n22.txt",
          "JacksonCore_5_n33.txt",
          "JacksonCore_5_n2.txt",
          "JacksonCore_5_n8.txt",
          "JacksonCore_5_n49.txt",
          "JacksonCore_5_n4.txt",
          "JacksonCore_5_n14.txt",
          "JacksonCore_5_n37.txt",
          "JacksonCore_5_n41.txt",
          "JacksonCore_5_n7.txt",
          "JacksonCore_5_n40.txt",
          "JacksonCore_5_n20.txt",
          "JacksonCore_5_n23.txt",
          "JacksonCore_5_n38.txt",
          "JacksonCore_5_n39.txt",
          "JacksonCore_5_n5.txt",
          "JacksonCore_5_n24.txt",
          "JacksonCore_5_n26.txt",
          "JacksonCore_5_n31.txt",
          "JacksonCore_5_n27.txt",
          "JacksonCore_5_n12.txt",
          "JacksonCore_5_n19.txt",
          "JacksonCore_5_n36.txt",
          "JacksonCore_5_n28.txt",
          "JacksonCore_5_n18.txt",
          "JacksonCore_5_n6.txt",
          "JacksonCore_5_n17.txt",
          "JacksonCore_5_n1.txt",
          "JacksonCore_5_n13.txt",
          "JacksonCore_5_n10.txt",
          "JacksonCore_5_n16.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\nprivate final static int _parseIndex(String str) {\n    final int len = str.length();\n    // [Issue#133]: beware of super long indexes; assume we never\n    // have arrays over 2 billion entries so ints are fine.\n    if (len == 0 || len > 10) {\n        return -1;\n    }\n    for (int i = 0; i < len; i++) { // Change i++ to i\n        char c = str.charAt(i);\n        if (c > '9' || c < '0') {\n            return -1;\n        }\n    }\n    if (len == 10) {\n        long l = NumberInput.parseLong(str);\n        if (l > Integer.MAX_VALUE) {\n            return -1;\n        }\n    }\n    return NumberInput.parseInt(str);\n}\n",
        "index": 82,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "com.fasterxml.jackson.core.TestJsonPointer::testWonkyNumber173"
        ],
        "failing_tests": [],
        "sum_entropy": -10.827104394232695,
        "mean_entropy": -0.06294828136181799,
        "pass_FIB_num": 34,
        "pass_FIB": [
          "JacksonCore_5_n47.txt",
          "JacksonCore_5_n29.txt",
          "JacksonCore_5_n9.txt",
          "JacksonCore_5_n22.txt",
          "JacksonCore_5_n33.txt",
          "JacksonCore_5_n2.txt",
          "JacksonCore_5_n8.txt",
          "JacksonCore_5_n49.txt",
          "JacksonCore_5_n4.txt",
          "JacksonCore_5_n14.txt",
          "JacksonCore_5_n37.txt",
          "JacksonCore_5_n41.txt",
          "JacksonCore_5_n7.txt",
          "JacksonCore_5_n40.txt",
          "JacksonCore_5_n20.txt",
          "JacksonCore_5_n23.txt",
          "JacksonCore_5_n38.txt",
          "JacksonCore_5_n39.txt",
          "JacksonCore_5_n5.txt",
          "JacksonCore_5_n24.txt",
          "JacksonCore_5_n26.txt",
          "JacksonCore_5_n31.txt",
          "JacksonCore_5_n27.txt",
          "JacksonCore_5_n12.txt",
          "JacksonCore_5_n19.txt",
          "JacksonCore_5_n36.txt",
          "JacksonCore_5_n28.txt",
          "JacksonCore_5_n18.txt",
          "JacksonCore_5_n6.txt",
          "JacksonCore_5_n17.txt",
          "JacksonCore_5_n1.txt",
          "JacksonCore_5_n13.txt",
          "JacksonCore_5_n10.txt",
          "JacksonCore_5_n16.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\nprivate final static int _parseIndex(String str) {\n    final int len = str.length();\n    if (len == 0 || len > 10) {\n        return -1;\n    }\n    for (int i = 0; i < len; ++i) {\n        char c = str.charAt(i);\n        if (c > '9' || c < '0') {\n            return -1;\n        }\n    }\n    try {\n        Integer.parseInt(str);\n    } catch (NumberFormatException e) {\n        return -1;\n    }\n    return Integer.parseInt(str);\n}\n",
        "index": 80,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "com.fasterxml.jackson.core.TestJsonPointer::testWonkyNumber173"
        ],
        "failing_tests": [],
        "sum_entropy": -7.624805285463449,
        "mean_entropy": -0.06354004404552874,
        "pass_FIB_num": 34,
        "pass_FIB": [
          "JacksonCore_5_n47.txt",
          "JacksonCore_5_n29.txt",
          "JacksonCore_5_n9.txt",
          "JacksonCore_5_n22.txt",
          "JacksonCore_5_n33.txt",
          "JacksonCore_5_n2.txt",
          "JacksonCore_5_n8.txt",
          "JacksonCore_5_n49.txt",
          "JacksonCore_5_n4.txt",
          "JacksonCore_5_n14.txt",
          "JacksonCore_5_n37.txt",
          "JacksonCore_5_n41.txt",
          "JacksonCore_5_n7.txt",
          "JacksonCore_5_n40.txt",
          "JacksonCore_5_n20.txt",
          "JacksonCore_5_n23.txt",
          "JacksonCore_5_n38.txt",
          "JacksonCore_5_n39.txt",
          "JacksonCore_5_n5.txt",
          "JacksonCore_5_n24.txt",
          "JacksonCore_5_n26.txt",
          "JacksonCore_5_n31.txt",
          "JacksonCore_5_n27.txt",
          "JacksonCore_5_n12.txt",
          "JacksonCore_5_n19.txt",
          "JacksonCore_5_n36.txt",
          "JacksonCore_5_n28.txt",
          "JacksonCore_5_n18.txt",
          "JacksonCore_5_n6.txt",
          "JacksonCore_5_n17.txt",
          "JacksonCore_5_n1.txt",
          "JacksonCore_5_n13.txt",
          "JacksonCore_5_n10.txt",
          "JacksonCore_5_n16.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    private final static int _parseIndex(String str) {\n        final int len = str.length();\n        if (len == 0) {\n            return -1;\n        }\n        for (int i = 0; i < len; i++) {\n            char c = str.charAt(i);\n            if (c < '0' || c > '9') {\n                return -1;\n            }\n        }\n        long l = NumberInput.parseLong(str);\n        if (l > Integer.MAX_VALUE) {\n            return -1;\n        }\n        return (int) l;\n    }\n",
        "index": 50,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "com.fasterxml.jackson.core.TestJsonPointer::testWonkyNumber173"
        ],
        "failing_tests": [],
        "sum_entropy": -8.475991048970249,
        "mean_entropy": -0.07063325874141874,
        "pass_FIB_num": 34,
        "pass_FIB": [
          "JacksonCore_5_n47.txt",
          "JacksonCore_5_n29.txt",
          "JacksonCore_5_n9.txt",
          "JacksonCore_5_n22.txt",
          "JacksonCore_5_n33.txt",
          "JacksonCore_5_n2.txt",
          "JacksonCore_5_n8.txt",
          "JacksonCore_5_n49.txt",
          "JacksonCore_5_n4.txt",
          "JacksonCore_5_n14.txt",
          "JacksonCore_5_n37.txt",
          "JacksonCore_5_n41.txt",
          "JacksonCore_5_n7.txt",
          "JacksonCore_5_n40.txt",
          "JacksonCore_5_n20.txt",
          "JacksonCore_5_n23.txt",
          "JacksonCore_5_n38.txt",
          "JacksonCore_5_n39.txt",
          "JacksonCore_5_n5.txt",
          "JacksonCore_5_n24.txt",
          "JacksonCore_5_n26.txt",
          "JacksonCore_5_n31.txt",
          "JacksonCore_5_n27.txt",
          "JacksonCore_5_n12.txt",
          "JacksonCore_5_n19.txt",
          "JacksonCore_5_n36.txt",
          "JacksonCore_5_n28.txt",
          "JacksonCore_5_n18.txt",
          "JacksonCore_5_n6.txt",
          "JacksonCore_5_n17.txt",
          "JacksonCore_5_n1.txt",
          "JacksonCore_5_n13.txt",
          "JacksonCore_5_n10.txt",
          "JacksonCore_5_n16.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    private final static int _parseIndex(String str) {\n        final int len = str.length();\n        // [Issue#133]: beware of super long indexes; assume we never\n        // have arrays over 2 billion entries so ints are fine.\n        if (len == 0 || len > 10) {\n            return -1;\n        }\n        for (int i = 0; i < len; i++) {  // Fixed the increment of i inside the loop\n            char c = str.charAt(i);  // Removed the unnecessary increment of i here\n            if (c > '9' || c < '0') {\n                return -1;\n            }\n        }\n        if (len == 10) {\n            long l = NumberInput.parseLong(str);\n            if (l > Integer.MAX_VALUE) {\n                return -1;\n            }\n        }\n        return NumberInput.parseInt(str);\n    }\n",
        "index": 84,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "com.fasterxml.jackson.core.TestJsonPointer::testWonkyNumber173"
        ],
        "failing_tests": [],
        "sum_entropy": -16.3790661565695,
        "mean_entropy": -0.08712269232217819,
        "pass_FIB_num": 34,
        "pass_FIB": [
          "JacksonCore_5_n47.txt",
          "JacksonCore_5_n29.txt",
          "JacksonCore_5_n9.txt",
          "JacksonCore_5_n22.txt",
          "JacksonCore_5_n33.txt",
          "JacksonCore_5_n2.txt",
          "JacksonCore_5_n8.txt",
          "JacksonCore_5_n49.txt",
          "JacksonCore_5_n4.txt",
          "JacksonCore_5_n14.txt",
          "JacksonCore_5_n37.txt",
          "JacksonCore_5_n41.txt",
          "JacksonCore_5_n7.txt",
          "JacksonCore_5_n40.txt",
          "JacksonCore_5_n20.txt",
          "JacksonCore_5_n23.txt",
          "JacksonCore_5_n38.txt",
          "JacksonCore_5_n39.txt",
          "JacksonCore_5_n5.txt",
          "JacksonCore_5_n24.txt",
          "JacksonCore_5_n26.txt",
          "JacksonCore_5_n31.txt",
          "JacksonCore_5_n27.txt",
          "JacksonCore_5_n12.txt",
          "JacksonCore_5_n19.txt",
          "JacksonCore_5_n36.txt",
          "JacksonCore_5_n28.txt",
          "JacksonCore_5_n18.txt",
          "JacksonCore_5_n6.txt",
          "JacksonCore_5_n17.txt",
          "JacksonCore_5_n1.txt",
          "JacksonCore_5_n13.txt",
          "JacksonCore_5_n10.txt",
          "JacksonCore_5_n16.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    private final static int _parseIndex(String str) {\n        final int len = str.length();\n        if (len == 0) {\n            return -1;\n        }\n        for (int i = 0; i < len; ++i) {\n            char c = str.charAt(i);\n            if (c > '9' || c < '0') {\n                // If a non-digit character is found, then it is not a valid index\n                return -1;\n            }\n        }\n        // If no non-digit character is found, then the entire segment should be parsed as an integer\n        try {\n            return Integer.parseInt(str);\n        } catch (NumberFormatException e) {\n            return -1; // Return -1 if parsing as an integer fails\n        }\n    }\n",
        "index": 98,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "com.fasterxml.jackson.core.TestJsonPointer::testWonkyNumber173"
        ],
        "failing_tests": [],
        "sum_entropy": -28.753984158241543,
        "mean_entropy": -0.1774937293718614,
        "pass_FIB_num": 34,
        "pass_FIB": [
          "JacksonCore_5_n47.txt",
          "JacksonCore_5_n29.txt",
          "JacksonCore_5_n9.txt",
          "JacksonCore_5_n22.txt",
          "JacksonCore_5_n33.txt",
          "JacksonCore_5_n2.txt",
          "JacksonCore_5_n8.txt",
          "JacksonCore_5_n49.txt",
          "JacksonCore_5_n4.txt",
          "JacksonCore_5_n14.txt",
          "JacksonCore_5_n37.txt",
          "JacksonCore_5_n41.txt",
          "JacksonCore_5_n7.txt",
          "JacksonCore_5_n40.txt",
          "JacksonCore_5_n20.txt",
          "JacksonCore_5_n23.txt",
          "JacksonCore_5_n38.txt",
          "JacksonCore_5_n39.txt",
          "JacksonCore_5_n5.txt",
          "JacksonCore_5_n24.txt",
          "JacksonCore_5_n26.txt",
          "JacksonCore_5_n31.txt",
          "JacksonCore_5_n27.txt",
          "JacksonCore_5_n12.txt",
          "JacksonCore_5_n19.txt",
          "JacksonCore_5_n36.txt",
          "JacksonCore_5_n28.txt",
          "JacksonCore_5_n18.txt",
          "JacksonCore_5_n6.txt",
          "JacksonCore_5_n17.txt",
          "JacksonCore_5_n1.txt",
          "JacksonCore_5_n13.txt",
          "JacksonCore_5_n10.txt",
          "JacksonCore_5_n16.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      }
    ]
  }
}