{
  "Math_53_src/main/java/org/apache/commons/math/complex/Complex.java_133_155": {
    "patches": [
      {
        "patch": "\n    /**\n     * Return the sum of this complex number and the given complex number.\n     * <p>\n     * Uses the definitional formula\n     * <pre>\n     * (a + bi) + (c + di) = (a+c) + (b+d)i\n     * </pre></p>\n     * <p>\n     * If either this or <code>rhs</code> has a NaN value in either part,\n     * {@link #NaN} is returned; otherwise Infinite and NaN values are\n     * returned in the parts of the result according to the rules for\n     * {@link java.lang.Double} arithmetic.</p>\n     *\n     * @param rhs the other complex number\n     * @return the complex number sum\n     * @throws NullArgumentException if <code>rhs</code> is null\n     */\n    public Complex add(Complex rhs)\n        throws NullArgumentException {\n        if (Double.isNaN(real) || Double.isNaN(imaginary) ||\n            Double.isNaN(rhs.getReal()) || Double.isNaN(rhs.getImaginary())) {\n            return NaN;\n        }\n        return createComplex(real + rhs.getReal(),\n            imaginary + rhs.getImaginary());\n    }\n",
        "index": 1,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 9,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.complex.ComplexTest::testAddNaN"
        ],
        "failing_tests": [],
        "sum_entropy": -2.0324394456949606,
        "mean_entropy": -0.008033357492865456,
        "pass_FIB_num": 1,
        "pass_FIB": [
          "Math_53_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * Return the sum of this complex number and the given complex number.\n     * <p>\n     * Uses the definitional formula\n     * <pre>\n     * (a + bi) + (c + di) = (a+c) + (b+d)i\n     * </pre></p>\n     * <p>\n     * If either this or <code>rhs</code> has a NaN value in either part,\n     * {@link #NaN} is returned; otherwise Infinite and NaN values are\n     * returned in the parts of the result according to the rules for\n     * {@link java.lang.Double} arithmetic.</p>\n     *\n     * @param rhs the other complex number\n     * @return the complex number sum\n     * @throws NullArgumentException if <code>rhs</code> is null\n     */\n    public Complex add(Complex rhs)\n        throws NullArgumentException {\n        if (Double.isNaN(real) || Double.isNaN(imaginary) ||\n            Double.isNaN(rhs.getReal()) || Double.isNaN(rhs.getImaginary())) {\n            return NaN;\n        }\n        return createComplex(real + rhs.getReal(),\n            imaginary + rhs.getImaginary());\n    }\n",
        "index": 2,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 9,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.complex.ComplexTest::testAddNaN"
        ],
        "failing_tests": [],
        "sum_entropy": -2.0324394456949606,
        "mean_entropy": -0.008033357492865456,
        "pass_FIB_num": 1,
        "pass_FIB": [
          "Math_53_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * Return the sum of this complex number and the given complex number.\n     * <p>\n     * Uses the definitional formula\n     * <pre>\n     * (a + bi) + (c + di) = (a+c) + (b+d)i\n     * </pre></p>\n     * <p>\n     * If either this or <code>rhs</code> has a NaN value in either part,\n     * {@link #NaN} is returned; otherwise Infinite and NaN values are\n     * returned in the parts of the result according to the rules for\n     * {@link java.lang.Double} arithmetic.</p>\n     *\n     * @param rhs the other complex number\n     * @return the complex number sum\n     * @throws NullArgumentException if <code>rhs</code> is null\n     */\n    public Complex add(Complex rhs)\n        throws NullArgumentException {\n        if (Double.isNaN(real) || Double.isNaN(imaginary) ||\n            Double.isNaN(rhs.getReal()) || Double.isNaN(rhs.getImaginary())) {\n            return NaN;\n        }\n        return createComplex(real + rhs.getReal(),\n            imaginary + rhs.getImaginary());\n    }\n",
        "index": 3,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 9,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.complex.ComplexTest::testAddNaN"
        ],
        "failing_tests": [],
        "sum_entropy": -2.0324394456949606,
        "mean_entropy": -0.008033357492865456,
        "pass_FIB_num": 1,
        "pass_FIB": [
          "Math_53_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * Return the sum of this complex number and the given complex number.\n     * <p>\n     * Uses the definitional formula\n     * <pre>\n     * (a + bi) + (c + di) = (a+c) + (b+d)i\n     * </pre></p>\n     * <p>\n     * If either this or <code>rhs</code> has a NaN value in either part,\n     * {@link #NaN} is returned; otherwise Infinite and NaN values are\n     * returned in the parts of the result according to the rules for\n     * {@link java.lang.Double} arithmetic.</p>\n     *\n     * @param rhs the other complex number\n     * @return the complex number sum\n     * @throws NullArgumentException if <code>rhs</code> is null\n     */\n    public Complex add(Complex rhs)\n        throws NullArgumentException {\n        if (Double.isNaN(real) || Double.isNaN(imaginary) ||\n            Double.isNaN(rhs.getReal()) || Double.isNaN(rhs.getImaginary())) {\n            return NaN;\n        }\n        return createComplex(real + rhs.getReal(),\n            imaginary + rhs.getImaginary());\n    }\n",
        "index": 7,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 9,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.complex.ComplexTest::testAddNaN"
        ],
        "failing_tests": [],
        "sum_entropy": -2.0324394456949606,
        "mean_entropy": -0.008033357492865456,
        "pass_FIB_num": 1,
        "pass_FIB": [
          "Math_53_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * Return the sum of this complex number and the given complex number.\n     * <p>\n     * Uses the definitional formula\n     * <pre>\n     * (a + bi) + (c + di) = (a+c) + (b+d)i\n     * </pre></p>\n     * <p>\n     * If either this or <code>rhs</code> has a NaN value in either part,\n     * {@link #NaN} is returned; otherwise Infinite and NaN values are\n     * returned in the parts of the result according to the rules for\n     * {@link java.lang.Double} arithmetic.</p>\n     *\n     * @param rhs the other complex number\n     * @return the complex number sum\n     * @throws NullArgumentException if <code>rhs</code> is null\n     */\n    public Complex add(Complex rhs)\n        throws NullArgumentException {\n        if (Double.isNaN(real) || Double.isNaN(imaginary) ||\n            Double.isNaN(rhs.getReal()) || Double.isNaN(rhs.getImaginary())) {\n            return NaN;\n        }\n        return createComplex(real + rhs.getReal(),\n            imaginary + rhs.getImaginary());\n    }\n",
        "index": 10,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 9,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.complex.ComplexTest::testAddNaN"
        ],
        "failing_tests": [],
        "sum_entropy": -2.0324394456949606,
        "mean_entropy": -0.008033357492865456,
        "pass_FIB_num": 1,
        "pass_FIB": [
          "Math_53_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * Return the sum of this complex number and the given complex number.\n     * <p>\n     * Uses the definitional formula\n     * <pre>\n     * (a + bi) + (c + di) = (a+c) + (b+d)i\n     * </pre></p>\n     * <p>\n     * If either this or <code>rhs</code> has a NaN value in either part,\n     * {@link #NaN} is returned; otherwise Infinite and NaN values are\n     * returned in the parts of the result according to the rules for\n     * {@link java.lang.Double} arithmetic.</p>\n     *\n     * @param rhs the other complex number\n     * @return the complex number sum\n     * @throws NullArgumentException if <code>rhs</code> is null\n     */\n    public Complex add(Complex rhs)\n        throws NullArgumentException {\n        if (Double.isNaN(real) || Double.isNaN(imaginary) ||\n            Double.isNaN(rhs.getReal()) || Double.isNaN(rhs.getImaginary())) {\n            return NaN;\n        }\n        return createComplex(real + rhs.getReal(),\n            imaginary + rhs.getImaginary());\n    }\n",
        "index": 13,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 9,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.complex.ComplexTest::testAddNaN"
        ],
        "failing_tests": [],
        "sum_entropy": -2.0324394456949606,
        "mean_entropy": -0.008033357492865456,
        "pass_FIB_num": 1,
        "pass_FIB": [
          "Math_53_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * Return the sum of this complex number and the given complex number.\n     * <p>\n     * Uses the definitional formula\n     * <pre>\n     * (a + bi) + (c + di) = (a+c) + (b+d)i\n     * </pre></p>\n     * <p>\n     * If either this or <code>rhs</code> has a NaN value in either part,\n     * {@link #NaN} is returned; otherwise Infinite and NaN values are\n     * returned in the parts of the result according to the rules for\n     * {@link java.lang.Double} arithmetic.</p>\n     *\n     * @param rhs the other complex number\n     * @return the complex number sum\n     * @throws NullArgumentException if <code>rhs</code> is null\n     */\n    public Complex add(Complex rhs)\n        throws NullArgumentException {\n        if (Double.isNaN(real) || Double.isNaN(imaginary) ||\n            Double.isNaN(rhs.getReal()) || Double.isNaN(rhs.getImaginary())) {\n            return NaN;\n        }\n        return createComplex(real + rhs.getReal(),\n            imaginary + rhs.getImaginary());\n    }\n",
        "index": 14,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 9,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.complex.ComplexTest::testAddNaN"
        ],
        "failing_tests": [],
        "sum_entropy": -2.0324394456949606,
        "mean_entropy": -0.008033357492865456,
        "pass_FIB_num": 1,
        "pass_FIB": [
          "Math_53_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * Return the sum of this complex number and the given complex number.\n     * <p>\n     * Uses the definitional formula\n     * <pre>\n     * (a + bi) + (c + di) = (a+c) + (b+d)i\n     * </pre></p>\n     * <p>\n     * If either this or <code>rhs</code> has a NaN value in either part,\n     * {@link #NaN} is returned; otherwise Infinite and NaN values are\n     * returned in the parts of the result according to the rules for\n     * {@link java.lang.Double} arithmetic.</p>\n     *\n     * @param rhs the other complex number\n     * @return the complex number sum\n     * @throws NullArgumentException if <code>rhs</code> is null\n     */\n    public Complex add(Complex rhs)\n        throws NullArgumentException {\n        if (Double.isNaN(real) || Double.isNaN(imaginary) ||\n            Double.isNaN(rhs.getReal()) || Double.isNaN(rhs.getImaginary())) {\n            return NaN;\n        }\n        return createComplex(real + rhs.getReal(),\n            imaginary + rhs.getImaginary());\n    }\n",
        "index": 31,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 9,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.complex.ComplexTest::testAddNaN"
        ],
        "failing_tests": [],
        "sum_entropy": -2.148229662471309,
        "mean_entropy": -0.008491026333878693,
        "pass_FIB_num": 1,
        "pass_FIB": [
          "Math_53_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * Return the sum of this complex number and the given complex number.\n     * <p>\n     * Uses the definitional formula\n     * <pre>\n     * (a + bi) + (c + di) = (a+c) + (b+d)i\n     * </pre></p>\n     * <p>\n     * If either this or <code>rhs</code> has a NaN value in either part,\n     * {@link #NaN} is returned; otherwise Infinite and NaN values are\n     * returned in the parts of the result according to the rules for\n     * {@link java.lang.Double} arithmetic.</p>\n     *\n     * @param rhs the other complex number\n     * @return the complex number sum\n     * @throws NullArgumentException if <code>rhs</code> is null\n     */\n    public Complex add(Complex rhs)\n        throws NullArgumentException {\n        if (Double.isNaN(real) || Double.isNaN(imaginary) ||\n            Double.isNaN(rhs.getReal()) || Double.isNaN(rhs.getImaginary())) {\n            return NaN;\n        }\n        return createComplex(real + rhs.getReal(),\n            imaginary + rhs.getImaginary());\n    }\n",
        "index": 38,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 9,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.complex.ComplexTest::testAddNaN"
        ],
        "failing_tests": [],
        "sum_entropy": -2.148229662471309,
        "mean_entropy": -0.008491026333878693,
        "pass_FIB_num": 1,
        "pass_FIB": [
          "Math_53_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * Return the sum of this complex number and the given complex number.\n     * <p>\n     * Uses the definitional formula\n     * <pre>\n     * (a + bi) + (c + di) = (a+c) + (b+d)i\n     * </pre></p>\n     * <p>\n     * If either this or <code>rhs</code> has a NaN value in either part,\n     * {@link #NaN} is returned; otherwise Infinite and NaN values are\n     * returned in the parts of the result according to the rules for\n     * {@link java.lang.Double} arithmetic.</p>\n     *\n     * @param rhs the other complex number\n     * @return the complex number sum\n     * @throws NullArgumentException if <code>rhs</code> is null\n     */\n    public Complex add(Complex rhs)\n        throws NullArgumentException {\n        if (Double.isNaN(real) || Double.isNaN(imaginary) ||\n            Double.isNaN(rhs.getReal()) || Double.isNaN(rhs.getImaginary())) {\n            return NaN;\n        }\n        return createComplex(real + rhs.getReal(),\n            imaginary + rhs.getImaginary());\n    }\n",
        "index": 40,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 9,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.complex.ComplexTest::testAddNaN"
        ],
        "failing_tests": [],
        "sum_entropy": -2.148229662471309,
        "mean_entropy": -0.008491026333878693,
        "pass_FIB_num": 1,
        "pass_FIB": [
          "Math_53_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * Return the sum of this complex number and the given complex number.\n     * <p>\n     * Uses the definitional formula\n     * <pre>\n     * (a + bi) + (c + di) = (a+c) + (b+d)i\n     * </pre></p>\n     * <p>\n     * If either this or <code>rhs</code> has a NaN value in either part,\n     * {@link #NaN} is returned; otherwise Infinite and NaN values are\n     * returned in the parts of the result according to the rules for\n     * {@link java.lang.Double} arithmetic.</p>\n     *\n     * @param rhs the other complex number\n     * @return the complex number sum\n     * @throws NullArgumentException if <code>rhs</code> is null\n     */\n    public Complex add(Complex rhs)\n        throws NullArgumentException {\n        if (Double.isNaN(real) || Double.isNaN(imaginary) ||\n            Double.isNaN(rhs.getReal()) || Double.isNaN(rhs.getImaginary())) {\n            return NaN;\n        }\n        return createComplex(real + rhs.getReal(),\n            imaginary + rhs.getImaginary());\n    }\n",
        "index": 43,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 9,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.complex.ComplexTest::testAddNaN"
        ],
        "failing_tests": [],
        "sum_entropy": -2.148229662471309,
        "mean_entropy": -0.008491026333878693,
        "pass_FIB_num": 1,
        "pass_FIB": [
          "Math_53_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * Return the sum of this complex number and the given complex number.\n     * <p>\n     * Uses the definitional formula\n     * <pre>\n     * (a + bi) + (c + di) = (a+c) + (b+d)i\n     * </pre></p>\n     * <p>\n     * If either this or <code>rhs</code> has a NaN value in either part,\n     * {@link #NaN} is returned; otherwise Infinite and NaN values are\n     * returned in the parts of the result according to the rules for\n     * {@link java.lang.Double} arithmetic.</p>\n     *\n     * @param rhs the other complex number\n     * @return the complex number sum\n     * @throws NullArgumentException if <code>rhs</code> is null\n     */\n    public Complex add(Complex rhs)\n        throws NullArgumentException {\n        if (Double.isNaN(real) || Double.isNaN(imaginary) ||\n            Double.isNaN(rhs.getReal()) || Double.isNaN(rhs.getImaginary())) {\n            return NaN;\n        }\n        return createComplex(real + rhs.getReal(),\n            imaginary + rhs.getImaginary());\n    }\n",
        "index": 46,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 9,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.complex.ComplexTest::testAddNaN"
        ],
        "failing_tests": [],
        "sum_entropy": -2.148229662471309,
        "mean_entropy": -0.008491026333878693,
        "pass_FIB_num": 1,
        "pass_FIB": [
          "Math_53_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * Return the sum of this complex number and the given complex number.\n     * <p>\n     * Uses the definitional formula\n     * <pre>\n     * (a + bi) + (c + di) = (a+c) + (b+d)i\n     * </pre></p>\n     * <p>\n     * If either this or <code>rhs</code> has a NaN value in either part,\n     * {@link #NaN} is returned; otherwise Infinite and NaN values are\n     * returned in the parts of the result according to the rules for\n     * {@link java.lang.Double} arithmetic.</p>\n     *\n     * @param rhs the other complex number\n     * @return the complex number sum\n     * @throws NullArgumentException if <code>rhs</code> is null\n     */\n    public Complex add(Complex rhs)\n        throws NullArgumentException {\n        if (Double.isNaN(real) || Double.isNaN(imaginary) ||\n            Double.isNaN(rhs.getReal()) || Double.isNaN(rhs.getImaginary())) {\n            return NaN;\n        }\n        return createComplex(real + rhs.getReal(),\n            imaginary + rhs.getImaginary());\n    }\n",
        "index": 47,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 9,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.complex.ComplexTest::testAddNaN"
        ],
        "failing_tests": [],
        "sum_entropy": -2.17840930396259,
        "mean_entropy": -0.008610313454397589,
        "pass_FIB_num": 1,
        "pass_FIB": [
          "Math_53_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * Return the sum of this complex number and the given complex number.\n     * <p>\n     * Uses the definitional formula\n     * <pre>\n     * (a + bi) + (c + di) = (a+c) + (b+d)i\n     * </pre></p>\n     * <p>\n     * If either this or <code>rhs</code> has a NaN value in either part,\n     * {@link #NaN} is returned; otherwise Infinite and NaN values are\n     * returned in the parts of the result according to the rules for\n     * {@link java.lang.Double} arithmetic.</p>\n     *\n     * @param rhs the other complex number\n     * @return the complex number sum\n     * @throws NullArgumentException if <code>rhs</code> is null\n     */\n    public Complex add(Complex rhs)\n        throws NullArgumentException {\n        if (Double.isNaN(real) || Double.isNaN(imaginary) ||\n            Double.isNaN(rhs.getReal()) || Double.isNaN(rhs.getImaginary())) {\n            return NaN;\n        }\n        return createComplex(real + rhs.getReal(),\n            imaginary + rhs.getImaginary());\n    }\n",
        "index": 49,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 9,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.complex.ComplexTest::testAddNaN"
        ],
        "failing_tests": [],
        "sum_entropy": -2.17840930396259,
        "mean_entropy": -0.008610313454397589,
        "pass_FIB_num": 1,
        "pass_FIB": [
          "Math_53_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * Return the sum of this complex number and the given complex number.\n     * <p>\n     * Uses the definitional formula\n     * <pre>\n     * (a + bi) + (c + di) = (a+c) + (b+d)i\n     * </pre></p>\n     * <p>\n     * If either this or <code>rhs</code> has a NaN value in either part,\n     * {@link #NaN} is returned; otherwise Infinite and NaN values are\n     * returned in the parts of the result according to the rules for\n     * {@link java.lang.Double} arithmetic.</p>\n     *\n     * @param rhs the other complex number\n     * @return the complex number sum\n     * @throws NullArgumentException if <code>rhs</code> is null\n     */\n    public Complex add(Complex rhs)\n        throws NullArgumentException {\n        if (Double.isNaN(real) || Double.isNaN(imaginary) ||\n            Double.isNaN(rhs.getReal()) || Double.isNaN(rhs.getImaginary())) {\n            return NaN;\n        }\n        return createComplex(real + rhs.getReal(),\n            imaginary + rhs.getImaginary());\n    }\n",
        "index": 57,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 9,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.complex.ComplexTest::testAddNaN"
        ],
        "failing_tests": [],
        "sum_entropy": -2.17840930396259,
        "mean_entropy": -0.008610313454397589,
        "pass_FIB_num": 1,
        "pass_FIB": [
          "Math_53_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * Return the sum of this complex number and the given complex number.\n     * <p>\n     * Uses the definitional formula\n     * <pre>\n     * (a + bi) + (c + di) = (a+c) + (b+d)i\n     * </pre></p>\n     * <p>\n     * If either this or <code>rhs</code> has a NaN value in either part,\n     * {@link #NaN} is returned; otherwise Infinite and NaN values are\n     * returned in the parts of the result according to the rules for\n     * {@link java.lang.Double} arithmetic.</p>\n     *\n     * @param rhs the other complex number\n     * @return the complex number sum\n     * @throws NullArgumentException if <code>rhs</code> is null\n     */\n    public Complex add(Complex rhs)\n        throws NullArgumentException {\n        if (Double.isNaN(real) || Double.isNaN(imaginary) ||\n                Double.isNaN(rhs.getReal()) || Double.isNaN(rhs.getImaginary())) {\n            return Complex.NaN;\n        }\n        return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());\n    }\n",
        "index": 37,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 9,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.complex.ComplexTest::testAddNaN"
        ],
        "failing_tests": [],
        "sum_entropy": -5.879342536836941,
        "mean_entropy": -0.023238508050738897,
        "pass_FIB_num": 1,
        "pass_FIB": [
          "Math_53_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * Return the sum of this complex number and the given complex number.\n     * <p>\n     * Uses the definitional formula\n     * <pre>\n     * (a + bi) + (c + di) = (a+c) + (b+d)i\n     * </pre></p>\n     * <p>\n     * If either this or <code>rhs</code> has a NaN value in either part,\n     * {@link #NaN} is returned; otherwise Infinite and NaN values are\n     * returned in the parts of the result according to the rules for\n     * {@link java.lang.Double} arithmetic.</p>\n     *\n     * @param rhs the other complex number\n     * @return the complex number sum\n     * @throws NullArgumentException if <code>rhs</code> is null\n     */\n    public Complex add(Complex rhs)\n        throws NullArgumentException {\n        if (Double.isNaN(real) || Double.isNaN(imaginary) ||\n                Double.isNaN(rhs.getReal()) || Double.isNaN(rhs.getImaginary())) {\n            return Complex.NaN;\n        }\n        return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());\n    }\n",
        "index": 84,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 9,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.complex.ComplexTest::testAddNaN"
        ],
        "failing_tests": [],
        "sum_entropy": -5.9522670985363515,
        "mean_entropy": -0.023526747425044868,
        "pass_FIB_num": 1,
        "pass_FIB": [
          "Math_53_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * Return the sum of this complex number and the given complex number.\n     * <p>\n     * Uses the definitional formula\n     * <pre>\n     * (a + bi) + (c + di) = (a+c) + (b+d)i\n     * </pre></p>\n     * <p>\n     * If either this or <code>rhs</code> has a NaN value in either part,\n     * {@link #NaN} is returned; otherwise Infinite and NaN values are\n     * returned in the parts of the result according to the rules for\n     * {@link java.lang.Double} arithmetic.</p>\n     *\n     * @param rhs the other complex number\n     * @return the complex number sum\n     * @throws NullArgumentException if <code>rhs</code> is null\n     */\n    public Complex add(Complex rhs) throws NullArgumentException {\n        if (Double.isNaN(real) || Double.isNaN(imaginary) ||\n                Double.isNaN(rhs.getReal()) || Double.isNaN(rhs.getImaginary())) {\n            return NaN;\n        }\n        return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());\n    }\n",
        "index": 54,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 9,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.complex.ComplexTest::testAddNaN"
        ],
        "failing_tests": [],
        "sum_entropy": -6.065423761910821,
        "mean_entropy": -0.024165034908011238,
        "pass_FIB_num": 1,
        "pass_FIB": [
          "Math_53_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n/**\n * Return the sum of this complex number and the given complex number.\n * <p>\n * Uses the definitional formula\n * <pre>\n * (a + bi) + (c + di) = (a+c) + (b+d)i\n * </pre></p>\n * <p>\n * If either this or <code>rhs</code> has a NaN value in either part,\n * {@link #NaN} is returned; otherwise Infinite and NaN values are\n * returned in the parts of the result according to the rules for\n * {@link java.lang.Double} arithmetic.</p>\n *\n * @param rhs the other complex number\n * @return the complex number sum\n * @throws NullArgumentException if <code>rhs</code> is null\n */\npublic Complex add(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    if (Double.isNaN(real) || Double.isNaN(imaginary) || Double.isNaN(rhs.getReal()) || Double.isNaN(rhs.getImaginary())) {\n        return NaN;\n    }\n    return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());\n}\n",
        "index": 75,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 9,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.complex.ComplexTest::testAddNaN"
        ],
        "failing_tests": [],
        "sum_entropy": -5.884751020477191,
        "mean_entropy": -0.024725844623853743,
        "pass_FIB_num": 1,
        "pass_FIB": [
          "Math_53_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n/**\n * Return the sum of this complex number and the given complex number.\n * <p>\n * Uses the definitional formula\n * <pre>\n * (a + bi) + (c + di) = (a+c) + (b+d)i\n * </pre></p>\n * <p>\n * If either this or <code>rhs</code> has a NaN value in either part,\n * {@link #NaN} is returned; otherwise Infinite and NaN values are\n * returned in the parts of the result according to the rules for\n * {@link java.lang.Double} arithmetic.</p>\n *\n * @param rhs the other complex number\n * @return the complex number sum\n * @throws NullArgumentException if <code>rhs</code> is null\n */\npublic Complex add(Complex rhs)\n    throws NullArgumentException {\n    if (Double.isNaN(real) || Double.isNaN(imaginary) ||\n        Double.isNaN(rhs.getReal()) || Double.isNaN(rhs.getImaginary())) {\n        return Complex.NaN;\n    }\n    \n    return createComplex(real + rhs.getReal(),\n        imaginary + rhs.getImaginary());\n}\n",
        "index": 93,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 9,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.complex.ComplexTest::testAddNaN"
        ],
        "failing_tests": [],
        "sum_entropy": -7.6542064978667135,
        "mean_entropy": -0.03243307838079116,
        "pass_FIB_num": 1,
        "pass_FIB": [
          "Math_53_n43.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      }
    ]
  }
}