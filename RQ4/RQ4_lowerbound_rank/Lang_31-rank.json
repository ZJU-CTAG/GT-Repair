{
  "Lang_31_src/main/java/org/apache/commons/lang3/StringUtils.java_1417_1457": {
    "patches": [
      {
        "patch": "\n    /**\n     * <p>Checks if the CharSequence contains any character in the given\n     * set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>false</code>.\n     * A <code>null</code> or zero length search array will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.containsAny(null, *)                = false\n     * StringUtils.containsAny(\"\", *)                  = false\n     * StringUtils.containsAny(*, null)                = false\n     * StringUtils.containsAny(*, [])                  = false\n     * StringUtils.containsAny(\"zzabyycdxx\",['z','a']) = true\n     * StringUtils.containsAny(\"zzabyycdxx\",['b','y']) = true\n     * StringUtils.containsAny(\"aba\", ['z'])           = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found,\n     * <code>false</code> if no match or null input\n     * @since 2.4\n     */\n\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n\t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n\t\t\treturn false;\n\t\t}\n\t\tint csLength = cs.length();\n\t\tint searchLength = searchChars.length;\n\t\tfor (int i = 0; i < csLength; i++) {\n\t\t\tchar ch = cs.charAt(i);\n\t\t\tfor (int j = 0; j < searchLength; j++) {\n\t\t\t\tif (Character.codePointAt(searchChars, j) == Character.codePointAt(cs, i)) {\n\t\t\t\t\t\t// ch is a supplementary character\n\t\t\t\t\t\t// ch is in the Basic Multilingual Plane\n\t\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n",
        "index": 16,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 2,
        "passing_trigger": 2,
        "total_relevant": 19,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyCharArrayWithSupplementaryChars",
          "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyStringWithSupplementaryChars"
        ],
        "failing_tests": [],
        "sum_entropy": -5.221227885558867,
        "mean_entropy": -0.012343328334654532,
        "pass_FIB_num": 26,
        "pass_FIB": [
          "Lang_31_n13.txt",
          "Lang_31_n34.txt",
          "Lang_31_n3.txt",
          "Lang_31_n2.txt",
          "Lang_31_n29.txt",
          "Lang_31_n9.txt",
          "Lang_31_n48.txt",
          "Lang_31_n12.txt",
          "Lang_31_n8.txt",
          "Lang_31_n37.txt",
          "Lang_31_n28.txt",
          "Lang_31_n10.txt",
          "Lang_31_n44.txt",
          "Lang_31_n35.txt",
          "Lang_31_n40.txt",
          "Lang_31_n25.txt",
          "Lang_31_n14.txt",
          "Lang_31_n43.txt",
          "Lang_31_n42.txt",
          "Lang_31_n30.txt",
          "Lang_31_n31.txt",
          "Lang_31_n18.txt",
          "Lang_31_n16.txt",
          "Lang_31_n4.txt",
          "Lang_31_n26.txt",
          "Lang_31_n15.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * <p>Checks if the CharSequence contains any character in the given\n     * set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>false</code>.\n     * A <code>null</code> or zero length search array will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.containsAny(null, *)                = false\n     * StringUtils.containsAny(\"\", *)                  = false\n     * StringUtils.containsAny(*, null)                = false\n     * StringUtils.containsAny(*, [])                  = false\n     * StringUtils.containsAny(\"zzabyycdxx\",['z','a']) = true\n     * StringUtils.containsAny(\"zzabyycdxx\",['b','y']) = true\n     * StringUtils.containsAny(\"aba\", ['z'])           = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found,\n     * <code>false</code> if no match or null input\n     * @since 2.4\n     */\n\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n\t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n\t\t\treturn false;\n\t\t}\n\t\tint csLength = cs.length();\n\t\tint searchLength = searchChars.length;\n\t\tfor (int i = 0; i < csLength; i++) {\n\t\t\tchar ch = cs.charAt(i);\n\t\t\tfor (int j = 0; j < searchLength; j++) {\n\t\t\t\tif (Character.codePointAt(searchChars, j) == Character.codePointAt(cs, i)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n",
        "index": 39,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 2,
        "passing_trigger": 2,
        "total_relevant": 19,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyCharArrayWithSupplementaryChars",
          "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyStringWithSupplementaryChars"
        ],
        "failing_tests": [],
        "sum_entropy": -5.526217698591221,
        "mean_entropy": -0.01374681019550055,
        "pass_FIB_num": 26,
        "pass_FIB": [
          "Lang_31_n13.txt",
          "Lang_31_n34.txt",
          "Lang_31_n3.txt",
          "Lang_31_n2.txt",
          "Lang_31_n29.txt",
          "Lang_31_n9.txt",
          "Lang_31_n48.txt",
          "Lang_31_n12.txt",
          "Lang_31_n8.txt",
          "Lang_31_n37.txt",
          "Lang_31_n28.txt",
          "Lang_31_n10.txt",
          "Lang_31_n44.txt",
          "Lang_31_n35.txt",
          "Lang_31_n40.txt",
          "Lang_31_n25.txt",
          "Lang_31_n14.txt",
          "Lang_31_n43.txt",
          "Lang_31_n42.txt",
          "Lang_31_n30.txt",
          "Lang_31_n31.txt",
          "Lang_31_n18.txt",
          "Lang_31_n16.txt",
          "Lang_31_n4.txt",
          "Lang_31_n26.txt",
          "Lang_31_n15.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * <p>Checks if the CharSequence contains any character in the given\n     * set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>false</code>.\n     * A <code>null</code> or zero length search array will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.containsAny(null, *)                = false\n     * StringUtils.containsAny(\"\", *)                  = false\n     * StringUtils.containsAny(*, null)                = false\n     * StringUtils.containsAny(*, [])                  = false\n     * StringUtils.containsAny(\"zzabyycdxx\",['z','a']) = true\n     * StringUtils.containsAny(\"zzabyycdxx\",['b','y']) = true\n     * StringUtils.containsAny(\"aba\", ['z'])           = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found,\n     * <code>false</code> if no match or null input\n     * @since 2.4\n     */\n\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n\t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n\t\t\treturn false;\n\t\t}\n\t\tint csLength = cs.length();\n\t\tint searchLength = searchChars.length;\n\t\tfor (int i = 0; i < csLength; i++) {\n\t\t\tchar ch = cs.charAt(i);\n\t\t\tfor (int j = 0; j < searchLength; j++) {\n\t\t\t\tif (Character.isHighSurrogate(ch) && j + 1 < searchLength && Character.isLowSurrogate(searchChars[j+1])) {\n\t\t\t\t\tif (Character.toCodePoint(ch, searchChars[j+1]) == Character.codePointAt(cs, i)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t} else if (searchChars[j] == ch) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n",
        "index": 17,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 2,
        "passing_trigger": 2,
        "total_relevant": 19,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyCharArrayWithSupplementaryChars",
          "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyStringWithSupplementaryChars"
        ],
        "failing_tests": [],
        "sum_entropy": -10.149111846998668,
        "mean_entropy": -0.02220812220349818,
        "pass_FIB_num": 26,
        "pass_FIB": [
          "Lang_31_n13.txt",
          "Lang_31_n34.txt",
          "Lang_31_n3.txt",
          "Lang_31_n2.txt",
          "Lang_31_n29.txt",
          "Lang_31_n9.txt",
          "Lang_31_n48.txt",
          "Lang_31_n12.txt",
          "Lang_31_n8.txt",
          "Lang_31_n37.txt",
          "Lang_31_n28.txt",
          "Lang_31_n10.txt",
          "Lang_31_n44.txt",
          "Lang_31_n35.txt",
          "Lang_31_n40.txt",
          "Lang_31_n25.txt",
          "Lang_31_n14.txt",
          "Lang_31_n43.txt",
          "Lang_31_n42.txt",
          "Lang_31_n30.txt",
          "Lang_31_n31.txt",
          "Lang_31_n18.txt",
          "Lang_31_n16.txt",
          "Lang_31_n4.txt",
          "Lang_31_n26.txt",
          "Lang_31_n15.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    public static boolean containsAny(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return false;\n        }\n        int csLength = cs.length();\n        int searchLength = searchChars.length;\n        for (int i = 0; i < csLength; i++) {\n            char ch = cs.charAt(i);\n            if (Character.isHighSurrogate(ch)) {\n                if (i + 1 < csLength) {\n                    char ch2 = cs.charAt(i + 1);\n                    if (Character.isLowSurrogate(ch2)) {\n                        int codePoint = Character.toCodePoint(ch, ch2);\n                        for (int j = 0; j < searchLength; j++) {\n                            if (Character.codePointAt(searchChars, j) == codePoint) {\n                                return true;\n                            }\n                        }\n                        i++; // Skip the low surrogate\n                    }\n                }\n            } else {\n                for (int j = 0; j < searchLength; j++) {\n                    if (searchChars[j] == ch) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n",
        "index": 22,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 2,
        "passing_trigger": 2,
        "total_relevant": 19,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyCharArrayWithSupplementaryChars",
          "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyStringWithSupplementaryChars"
        ],
        "failing_tests": [],
        "sum_entropy": -6.471016432861638,
        "mean_entropy": -0.026520559151072286,
        "pass_FIB_num": 26,
        "pass_FIB": [
          "Lang_31_n13.txt",
          "Lang_31_n34.txt",
          "Lang_31_n3.txt",
          "Lang_31_n2.txt",
          "Lang_31_n29.txt",
          "Lang_31_n9.txt",
          "Lang_31_n48.txt",
          "Lang_31_n12.txt",
          "Lang_31_n8.txt",
          "Lang_31_n37.txt",
          "Lang_31_n28.txt",
          "Lang_31_n10.txt",
          "Lang_31_n44.txt",
          "Lang_31_n35.txt",
          "Lang_31_n40.txt",
          "Lang_31_n25.txt",
          "Lang_31_n14.txt",
          "Lang_31_n43.txt",
          "Lang_31_n42.txt",
          "Lang_31_n30.txt",
          "Lang_31_n31.txt",
          "Lang_31_n18.txt",
          "Lang_31_n16.txt",
          "Lang_31_n4.txt",
          "Lang_31_n26.txt",
          "Lang_31_n15.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    public static boolean containsAny(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return false;\n        }\n        int csLength = cs.length();\n        int searchLength = searchChars.length;\n        for (int i = 0; i < csLength; i++) {\n            char ch = cs.charAt(i);\n            if (Character.isHighSurrogate(ch)) {\n                if (i + 1 < csLength) {\n                    char ch2 = cs.charAt(i + 1);\n                    if (Character.isLowSurrogate(ch2)) {\n                        int codePoint = Character.toCodePoint(ch, ch2);\n                        for (int j = 0; j < searchLength; j++) {\n                            if (Character.codePointAt(searchChars, j) == codePoint) {\n                                return true;\n                            }\n                        }\n                        i++; // Skip the low surrogate\n                    }\n                }\n            } else {\n                for (int j = 0; j < searchLength; j++) {\n                    if (searchChars[j] == ch) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n",
        "index": 45,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 2,
        "passing_trigger": 2,
        "total_relevant": 19,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyCharArrayWithSupplementaryChars",
          "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyStringWithSupplementaryChars"
        ],
        "failing_tests": [],
        "sum_entropy": -6.5505956159815995,
        "mean_entropy": -0.026846703344186883,
        "pass_FIB_num": 26,
        "pass_FIB": [
          "Lang_31_n13.txt",
          "Lang_31_n34.txt",
          "Lang_31_n3.txt",
          "Lang_31_n2.txt",
          "Lang_31_n29.txt",
          "Lang_31_n9.txt",
          "Lang_31_n48.txt",
          "Lang_31_n12.txt",
          "Lang_31_n8.txt",
          "Lang_31_n37.txt",
          "Lang_31_n28.txt",
          "Lang_31_n10.txt",
          "Lang_31_n44.txt",
          "Lang_31_n35.txt",
          "Lang_31_n40.txt",
          "Lang_31_n25.txt",
          "Lang_31_n14.txt",
          "Lang_31_n43.txt",
          "Lang_31_n42.txt",
          "Lang_31_n30.txt",
          "Lang_31_n31.txt",
          "Lang_31_n18.txt",
          "Lang_31_n16.txt",
          "Lang_31_n4.txt",
          "Lang_31_n26.txt",
          "Lang_31_n15.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\npublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int csLength = cs.length();\n    int searchLength = searchChars.length;\n    for (int i = 0; i < csLength; i++) {\n        char ch = cs.charAt(i);\n        if (Character.isHighSurrogate(ch)) {\n            if (i + 1 < csLength) {\n                char ch2 = cs.charAt(i + 1);\n                if (Character.isLowSurrogate(ch2)) {\n                    int codePoint = Character.toCodePoint(ch, ch2);\n                    for (int j = 0; j < searchLength; j++) {\n                        if (Character.codePointAt(searchChars, j) == codePoint) {\n                            return true;\n                        }\n                    }\n                    i++; // Skip the low surrogate\n                }\n            }\n        } else {\n            for (int j = 0; j < searchLength; j++) {\n                if (searchChars[j] == ch) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
        "index": 34,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 2,
        "passing_trigger": 2,
        "total_relevant": 19,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyCharArrayWithSupplementaryChars",
          "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyStringWithSupplementaryChars"
        ],
        "failing_tests": [],
        "sum_entropy": -6.834210992839775,
        "mean_entropy": -0.028240541292726344,
        "pass_FIB_num": 26,
        "pass_FIB": [
          "Lang_31_n13.txt",
          "Lang_31_n34.txt",
          "Lang_31_n3.txt",
          "Lang_31_n2.txt",
          "Lang_31_n29.txt",
          "Lang_31_n9.txt",
          "Lang_31_n48.txt",
          "Lang_31_n12.txt",
          "Lang_31_n8.txt",
          "Lang_31_n37.txt",
          "Lang_31_n28.txt",
          "Lang_31_n10.txt",
          "Lang_31_n44.txt",
          "Lang_31_n35.txt",
          "Lang_31_n40.txt",
          "Lang_31_n25.txt",
          "Lang_31_n14.txt",
          "Lang_31_n43.txt",
          "Lang_31_n42.txt",
          "Lang_31_n30.txt",
          "Lang_31_n31.txt",
          "Lang_31_n18.txt",
          "Lang_31_n16.txt",
          "Lang_31_n4.txt",
          "Lang_31_n26.txt",
          "Lang_31_n15.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\npublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int csLength = cs.length();\n    int searchLength = searchChars.length;\n    for (int i = 0; i < csLength; i++) {\n        char ch = cs.charAt(i);\n        if (Character.isHighSurrogate(ch)) {\n            if (i + 1 < csLength) {\n                char ch2 = cs.charAt(i + 1);\n                if (Character.isLowSurrogate(ch2)) {\n                    int codePoint = Character.toCodePoint(ch, ch2);\n                    for (int j = 0; j < searchLength; j++) {\n                        if (Character.codePointAt(searchChars, j) == codePoint) {\n                            return true;\n                        }\n                    }\n                    i++; // Skip the low surrogate\n                }\n            }\n        } else {\n            for (int j = 0; j < searchLength; j++) {\n                if (searchChars[j] == ch) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
        "index": 38,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 2,
        "passing_trigger": 2,
        "total_relevant": 19,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyCharArrayWithSupplementaryChars",
          "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyStringWithSupplementaryChars"
        ],
        "failing_tests": [],
        "sum_entropy": -6.834210992839775,
        "mean_entropy": -0.028240541292726344,
        "pass_FIB_num": 26,
        "pass_FIB": [
          "Lang_31_n13.txt",
          "Lang_31_n34.txt",
          "Lang_31_n3.txt",
          "Lang_31_n2.txt",
          "Lang_31_n29.txt",
          "Lang_31_n9.txt",
          "Lang_31_n48.txt",
          "Lang_31_n12.txt",
          "Lang_31_n8.txt",
          "Lang_31_n37.txt",
          "Lang_31_n28.txt",
          "Lang_31_n10.txt",
          "Lang_31_n44.txt",
          "Lang_31_n35.txt",
          "Lang_31_n40.txt",
          "Lang_31_n25.txt",
          "Lang_31_n14.txt",
          "Lang_31_n43.txt",
          "Lang_31_n42.txt",
          "Lang_31_n30.txt",
          "Lang_31_n31.txt",
          "Lang_31_n18.txt",
          "Lang_31_n16.txt",
          "Lang_31_n4.txt",
          "Lang_31_n26.txt",
          "Lang_31_n15.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    public static boolean containsAny(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return false;\n        }\n        int csLength = cs.length();\n        int searchLength = searchChars.length;\n        for (int i = 0; i < csLength; i++) {\n            char ch = cs.charAt(i);\n            if (Character.isHighSurrogate(ch)) {\n                if (i + 1 < csLength) {\n                    char ch2 = cs.charAt(i + 1);\n                    if (Character.isLowSurrogate(ch2)) {\n                        int codePoint = Character.toCodePoint(ch, ch2);\n                        for (int j = 0; j < searchLength; j++) {\n                            if (Character.codePointAt(searchChars, j) == codePoint) {\n                                return true;\n                            }\n                        }\n                        i++; // Skip low surrogate\n                    }\n                }\n            } else {\n                for (int j = 0; j < searchLength; j++) {\n                    if (searchChars[j] == ch) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n",
        "index": 23,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 2,
        "passing_trigger": 2,
        "total_relevant": 19,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyCharArrayWithSupplementaryChars",
          "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyStringWithSupplementaryChars"
        ],
        "failing_tests": [],
        "sum_entropy": -7.393323734368937,
        "mean_entropy": -0.030425200552958588,
        "pass_FIB_num": 26,
        "pass_FIB": [
          "Lang_31_n13.txt",
          "Lang_31_n34.txt",
          "Lang_31_n3.txt",
          "Lang_31_n2.txt",
          "Lang_31_n29.txt",
          "Lang_31_n9.txt",
          "Lang_31_n48.txt",
          "Lang_31_n12.txt",
          "Lang_31_n8.txt",
          "Lang_31_n37.txt",
          "Lang_31_n28.txt",
          "Lang_31_n10.txt",
          "Lang_31_n44.txt",
          "Lang_31_n35.txt",
          "Lang_31_n40.txt",
          "Lang_31_n25.txt",
          "Lang_31_n14.txt",
          "Lang_31_n43.txt",
          "Lang_31_n42.txt",
          "Lang_31_n30.txt",
          "Lang_31_n31.txt",
          "Lang_31_n18.txt",
          "Lang_31_n16.txt",
          "Lang_31_n4.txt",
          "Lang_31_n26.txt",
          "Lang_31_n15.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n\t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n\t\t\treturn false;\n\t\t}\n\t\tint csLength = cs.length();\n\t\tint searchLength = searchChars.length;\n\t\tfor (int i = 0; i < csLength; i++) {\n\t\t\tchar ch = cs.charAt(i);\n\t\t\tif (Character.isHighSurrogate(ch)) {\n\t\t\t\tif (i + 1 < csLength) {\n\t\t\t\t\tchar ch2 = cs.charAt(i + 1);\n\t\t\t\t\tif (Character.isLowSurrogate(ch2)) {\n\t\t\t\t\t\tint codePoint = Character.toCodePoint(ch, ch2);\n\t\t\t\t\t\tfor (int j = 0; j < searchLength; j++) {\n\t\t\t\t\t\t\tif (Character.codePointAt(searchChars, j) == codePoint) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++; // Skip low surrogate\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor (int j = 0; j < searchLength; j++) {\n\t\t\t\t\tif (searchChars[j] == ch) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n",
        "index": 72,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 2,
        "passing_trigger": 2,
        "total_relevant": 19,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyCharArrayWithSupplementaryChars",
          "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyStringWithSupplementaryChars"
        ],
        "failing_tests": [],
        "sum_entropy": -7.77834617685113,
        "mean_entropy": -0.03086645308274258,
        "pass_FIB_num": 26,
        "pass_FIB": [
          "Lang_31_n13.txt",
          "Lang_31_n34.txt",
          "Lang_31_n3.txt",
          "Lang_31_n2.txt",
          "Lang_31_n29.txt",
          "Lang_31_n9.txt",
          "Lang_31_n48.txt",
          "Lang_31_n12.txt",
          "Lang_31_n8.txt",
          "Lang_31_n37.txt",
          "Lang_31_n28.txt",
          "Lang_31_n10.txt",
          "Lang_31_n44.txt",
          "Lang_31_n35.txt",
          "Lang_31_n40.txt",
          "Lang_31_n25.txt",
          "Lang_31_n14.txt",
          "Lang_31_n43.txt",
          "Lang_31_n42.txt",
          "Lang_31_n30.txt",
          "Lang_31_n31.txt",
          "Lang_31_n18.txt",
          "Lang_31_n16.txt",
          "Lang_31_n4.txt",
          "Lang_31_n26.txt",
          "Lang_31_n15.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n\t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n\t\t\treturn false;\n\t\t}\n\t\tint csLength = cs.length();\n\t\tint searchLength = searchChars.length;\n\t\tfor (int i = 0; i < csLength; i++) {\n\t\t\tchar ch = cs.charAt(i);\n\t\t\tif (Character.isHighSurrogate(ch)) {\n\t\t\t\tif (i + 1 < csLength) {\n\t\t\t\t\tchar ch2 = cs.charAt(i + 1);\n\t\t\t\t\tif (Character.isLowSurrogate(ch2)) {\n\t\t\t\t\t\tint codePoint = Character.toCodePoint(ch, ch2);\n\t\t\t\t\t\tfor (int j = 0; j < searchLength; j++) {\n\t\t\t\t\t\t\tif (Character.codePointAt(searchChars, j) == codePoint) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++; // Skip low surrogate\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor (int j = 0; j < searchLength; j++) {\n\t\t\t\t\tif (searchChars[j] == ch) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n",
        "index": 56,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 2,
        "passing_trigger": 2,
        "total_relevant": 19,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyCharArrayWithSupplementaryChars",
          "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyStringWithSupplementaryChars"
        ],
        "failing_tests": [],
        "sum_entropy": -7.900892478687355,
        "mean_entropy": -0.03135274793129903,
        "pass_FIB_num": 26,
        "pass_FIB": [
          "Lang_31_n13.txt",
          "Lang_31_n34.txt",
          "Lang_31_n3.txt",
          "Lang_31_n2.txt",
          "Lang_31_n29.txt",
          "Lang_31_n9.txt",
          "Lang_31_n48.txt",
          "Lang_31_n12.txt",
          "Lang_31_n8.txt",
          "Lang_31_n37.txt",
          "Lang_31_n28.txt",
          "Lang_31_n10.txt",
          "Lang_31_n44.txt",
          "Lang_31_n35.txt",
          "Lang_31_n40.txt",
          "Lang_31_n25.txt",
          "Lang_31_n14.txt",
          "Lang_31_n43.txt",
          "Lang_31_n42.txt",
          "Lang_31_n30.txt",
          "Lang_31_n31.txt",
          "Lang_31_n18.txt",
          "Lang_31_n16.txt",
          "Lang_31_n4.txt",
          "Lang_31_n26.txt",
          "Lang_31_n15.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * <p>Checks if the CharSequence contains any character in the given\n     * set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>false</code>.\n     * A <code>null</code> or zero length search array will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.containsAny(null, *)                = false\n     * StringUtils.containsAny(\"\", *)                  = false\n     * StringUtils.containsAny(*, null)                = false\n     * StringUtils.containsAny(*, [])                  = false\n     * StringUtils.containsAny(\"zzabyycdxx\",['z','a']) = true\n     * StringUtils.containsAny(\"zzabyycdxx\",['b','y']) = true\n     * StringUtils.containsAny(\"aba\", ['z'])           = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found,\n     * <code>false</code> if no match or null input\n     * @since 2.4\n     */\n\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n\t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n\t\t\treturn false;\n\t\t}\n\t\tint csLength = cs.length();\n\t\tint searchLength = searchChars.length;\n\t\tfor (int i = 0; i < csLength; i++) {\n\t\t\tchar ch = cs.charAt(i);\n\t\t\tfor (int j = 0; j < searchLength; j++) {\n\t\t\t\tif (Character.isHighSurrogate(ch) && j + 1 < searchLength &&\n\t\t\t\t\t\tCharacter.isLowSurrogate(searchChars[j + 1]) && Character.toCodePoint(ch, searchChars[j + 1]) == Character.codePointAt(cs, i)) {\n\t\t\t\t\treturn true;\n\t\t\t\t} else if (!Character.isHighSurrogate(ch) && searchChars[j] == ch) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n",
        "index": 21,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 2,
        "passing_trigger": 2,
        "total_relevant": 19,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyCharArrayWithSupplementaryChars",
          "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyStringWithSupplementaryChars"
        ],
        "failing_tests": [],
        "sum_entropy": -15.365053840526251,
        "mean_entropy": -0.033185861426622575,
        "pass_FIB_num": 26,
        "pass_FIB": [
          "Lang_31_n13.txt",
          "Lang_31_n34.txt",
          "Lang_31_n3.txt",
          "Lang_31_n2.txt",
          "Lang_31_n29.txt",
          "Lang_31_n9.txt",
          "Lang_31_n48.txt",
          "Lang_31_n12.txt",
          "Lang_31_n8.txt",
          "Lang_31_n37.txt",
          "Lang_31_n28.txt",
          "Lang_31_n10.txt",
          "Lang_31_n44.txt",
          "Lang_31_n35.txt",
          "Lang_31_n40.txt",
          "Lang_31_n25.txt",
          "Lang_31_n14.txt",
          "Lang_31_n43.txt",
          "Lang_31_n42.txt",
          "Lang_31_n30.txt",
          "Lang_31_n31.txt",
          "Lang_31_n18.txt",
          "Lang_31_n16.txt",
          "Lang_31_n4.txt",
          "Lang_31_n26.txt",
          "Lang_31_n15.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    public static boolean containsAny(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return false;\n        }\n        int csLength = cs.length();\n        int searchLength = searchChars.length;\n        for (int i = 0; i < csLength; i++) {\n            char ch = cs.charAt(i);\n            if (Character.isHighSurrogate(ch) && i + 1 < csLength) {\n                char ch2 = cs.charAt(i + 1);\n                if (Character.isLowSurrogate(ch2)) {\n                    int codePoint = Character.toCodePoint(ch, ch2);\n                    for (int j = 0; j < searchLength; j++) {\n                        if (Character.codePointAt(searchChars, j) == codePoint) {\n                            return true;\n                        }\n                    }\n                    i++; // Skip low surrogate\n                }\n            } else {\n                for (int j = 0; j < searchLength; j++) {\n                    if (searchChars[j] == ch) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n",
        "index": 12,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 2,
        "passing_trigger": 2,
        "total_relevant": 19,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyCharArrayWithSupplementaryChars",
          "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyStringWithSupplementaryChars"
        ],
        "failing_tests": [],
        "sum_entropy": -8.35912810950505,
        "mean_entropy": -0.0351223870147271,
        "pass_FIB_num": 26,
        "pass_FIB": [
          "Lang_31_n13.txt",
          "Lang_31_n34.txt",
          "Lang_31_n3.txt",
          "Lang_31_n2.txt",
          "Lang_31_n29.txt",
          "Lang_31_n9.txt",
          "Lang_31_n48.txt",
          "Lang_31_n12.txt",
          "Lang_31_n8.txt",
          "Lang_31_n37.txt",
          "Lang_31_n28.txt",
          "Lang_31_n10.txt",
          "Lang_31_n44.txt",
          "Lang_31_n35.txt",
          "Lang_31_n40.txt",
          "Lang_31_n25.txt",
          "Lang_31_n14.txt",
          "Lang_31_n43.txt",
          "Lang_31_n42.txt",
          "Lang_31_n30.txt",
          "Lang_31_n31.txt",
          "Lang_31_n18.txt",
          "Lang_31_n16.txt",
          "Lang_31_n4.txt",
          "Lang_31_n26.txt",
          "Lang_31_n15.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n\t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n\t\t\treturn false;\n\t\t}\n\t\tint csLength = cs.length();\n\t\tint searchLength = searchChars.length;\n\t\tfor (int i = 0; i < csLength; i++) {\n\t\t\tchar ch = cs.charAt(i);\n\t\t\tfor (int j = 0; j < searchLength; j++) {\n\t\t\t\tif (Character.codePointAt(searchChars, j) == Character.codePointAt(cs, i)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n",
        "index": 84,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 2,
        "passing_trigger": 2,
        "total_relevant": 19,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyCharArrayWithSupplementaryChars",
          "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyStringWithSupplementaryChars"
        ],
        "failing_tests": [],
        "sum_entropy": -4.9055567778882,
        "mean_entropy": -0.03607027042564853,
        "pass_FIB_num": 26,
        "pass_FIB": [
          "Lang_31_n13.txt",
          "Lang_31_n34.txt",
          "Lang_31_n3.txt",
          "Lang_31_n2.txt",
          "Lang_31_n29.txt",
          "Lang_31_n9.txt",
          "Lang_31_n48.txt",
          "Lang_31_n12.txt",
          "Lang_31_n8.txt",
          "Lang_31_n37.txt",
          "Lang_31_n28.txt",
          "Lang_31_n10.txt",
          "Lang_31_n44.txt",
          "Lang_31_n35.txt",
          "Lang_31_n40.txt",
          "Lang_31_n25.txt",
          "Lang_31_n14.txt",
          "Lang_31_n43.txt",
          "Lang_31_n42.txt",
          "Lang_31_n30.txt",
          "Lang_31_n31.txt",
          "Lang_31_n18.txt",
          "Lang_31_n16.txt",
          "Lang_31_n4.txt",
          "Lang_31_n26.txt",
          "Lang_31_n15.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\npublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int csLength = cs.length();\n    int searchLength = searchChars.length;\n    for (int i = 0; i < csLength; i++) {\n        char ch = cs.charAt(i);\n        if (Character.isHighSurrogate(ch) && i + 1 < csLength) {\n            char ch2 = cs.charAt(i + 1);\n            if (Character.isLowSurrogate(ch2)) {\n                int codePoint = Character.toCodePoint(ch, ch2);\n                for (int j = 0; j < searchLength; j++) {\n                    if (Character.codePointAt(searchChars, j) == codePoint) {\n                        return true;\n                    }\n                }\n                i++; // Skip the low surrogate\n            }\n        } else {\n            for (int j = 0; j < searchLength; j++) {\n                if (searchChars[j] == ch) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
        "index": 20,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 2,
        "passing_trigger": 2,
        "total_relevant": 19,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyCharArrayWithSupplementaryChars",
          "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyStringWithSupplementaryChars"
        ],
        "failing_tests": [],
        "sum_entropy": -8.567873447892639,
        "mean_entropy": -0.03615136475904067,
        "pass_FIB_num": 26,
        "pass_FIB": [
          "Lang_31_n13.txt",
          "Lang_31_n34.txt",
          "Lang_31_n3.txt",
          "Lang_31_n2.txt",
          "Lang_31_n29.txt",
          "Lang_31_n9.txt",
          "Lang_31_n48.txt",
          "Lang_31_n12.txt",
          "Lang_31_n8.txt",
          "Lang_31_n37.txt",
          "Lang_31_n28.txt",
          "Lang_31_n10.txt",
          "Lang_31_n44.txt",
          "Lang_31_n35.txt",
          "Lang_31_n40.txt",
          "Lang_31_n25.txt",
          "Lang_31_n14.txt",
          "Lang_31_n43.txt",
          "Lang_31_n42.txt",
          "Lang_31_n30.txt",
          "Lang_31_n31.txt",
          "Lang_31_n18.txt",
          "Lang_31_n16.txt",
          "Lang_31_n4.txt",
          "Lang_31_n26.txt",
          "Lang_31_n15.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * <p>Checks if the CharSequence contains any character in the given\n     * set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>false</code>.\n     * A <code>null</code> or zero length search array will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.containsAny(null, *)                = false\n     * StringUtils.containsAny(\"\", *)                  = false\n     * StringUtils.containsAny(*, null)                = false\n     * StringUtils.containsAny(*, [])                  = false\n     * StringUtils.containsAny(\"zzabyycdxx\",['z','a']) = true\n     * StringUtils.containsAny(\"zzabyycdxx\",['b','y']) = true\n     * StringUtils.containsAny(\"aba\", ['z'])           = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found,\n     * <code>false</code> if no match or null input\n     * @since 2.4\n     */\n\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n\t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n\t\t\treturn false;\n\t\t}\n\t\tint csLength = cs.length();\n\t\tint searchLength = searchChars.length;\n\t\tfor (int i = 0; i < csLength; i++) {\n\t\t\tchar ch = cs.charAt(i);\n\t\t\tfor (int j = 0; j < searchLength; j++) {\n\t\t\t\tif (Character.isHighSurrogate(ch)) {\n\t\t\t\t\tif (j + 1 < searchLength && Character.isLowSurrogate(searchChars[j + 1])) {\n\t\t\t\t\t\tif (Character.toCodePoint(ch, searchChars[j + 1]) == Character.codePointAt(cs, i)) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tj++; // Skip the low surrogate as it is already processed\n\t\t\t\t\t}\n\t\t\t\t} else if (searchChars[j] == ch) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n",
        "index": 55,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 2,
        "passing_trigger": 2,
        "total_relevant": 19,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyCharArrayWithSupplementaryChars",
          "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyStringWithSupplementaryChars"
        ],
        "failing_tests": [],
        "sum_entropy": -17.941238627495526,
        "mean_entropy": -0.0374556130010345,
        "pass_FIB_num": 26,
        "pass_FIB": [
          "Lang_31_n13.txt",
          "Lang_31_n34.txt",
          "Lang_31_n3.txt",
          "Lang_31_n2.txt",
          "Lang_31_n29.txt",
          "Lang_31_n9.txt",
          "Lang_31_n48.txt",
          "Lang_31_n12.txt",
          "Lang_31_n8.txt",
          "Lang_31_n37.txt",
          "Lang_31_n28.txt",
          "Lang_31_n10.txt",
          "Lang_31_n44.txt",
          "Lang_31_n35.txt",
          "Lang_31_n40.txt",
          "Lang_31_n25.txt",
          "Lang_31_n14.txt",
          "Lang_31_n43.txt",
          "Lang_31_n42.txt",
          "Lang_31_n30.txt",
          "Lang_31_n31.txt",
          "Lang_31_n18.txt",
          "Lang_31_n16.txt",
          "Lang_31_n4.txt",
          "Lang_31_n26.txt",
          "Lang_31_n15.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    public static boolean containsAny(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return false;\n        }\n        int csLength = cs.length();\n        int searchLength = searchChars.length;\n        for (int i = 0; i < csLength; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLength; j++) {\n                if (Character.codePointAt(searchChars, j) == Character.codePointAt(cs, i)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n",
        "index": 46,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 2,
        "passing_trigger": 2,
        "total_relevant": 19,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyCharArrayWithSupplementaryChars",
          "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyStringWithSupplementaryChars"
        ],
        "failing_tests": [],
        "sum_entropy": -5.250382181014099,
        "mean_entropy": -0.039476557751985705,
        "pass_FIB_num": 26,
        "pass_FIB": [
          "Lang_31_n13.txt",
          "Lang_31_n34.txt",
          "Lang_31_n3.txt",
          "Lang_31_n2.txt",
          "Lang_31_n29.txt",
          "Lang_31_n9.txt",
          "Lang_31_n48.txt",
          "Lang_31_n12.txt",
          "Lang_31_n8.txt",
          "Lang_31_n37.txt",
          "Lang_31_n28.txt",
          "Lang_31_n10.txt",
          "Lang_31_n44.txt",
          "Lang_31_n35.txt",
          "Lang_31_n40.txt",
          "Lang_31_n25.txt",
          "Lang_31_n14.txt",
          "Lang_31_n43.txt",
          "Lang_31_n42.txt",
          "Lang_31_n30.txt",
          "Lang_31_n31.txt",
          "Lang_31_n18.txt",
          "Lang_31_n16.txt",
          "Lang_31_n4.txt",
          "Lang_31_n26.txt",
          "Lang_31_n15.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    public static boolean containsAny(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return false;\n        }\n        int csLength = cs.length();\n        int searchLength = searchChars.length;\n        for (int i = 0; i < csLength; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLength; j++) {\n                if (Character.codePointAt(searchChars, j) == Character.codePointAt(cs, i)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n",
        "index": 33,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 2,
        "passing_trigger": 2,
        "total_relevant": 19,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyCharArrayWithSupplementaryChars",
          "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyStringWithSupplementaryChars"
        ],
        "failing_tests": [],
        "sum_entropy": -5.262324617653101,
        "mean_entropy": -0.03956635050866993,
        "pass_FIB_num": 26,
        "pass_FIB": [
          "Lang_31_n13.txt",
          "Lang_31_n34.txt",
          "Lang_31_n3.txt",
          "Lang_31_n2.txt",
          "Lang_31_n29.txt",
          "Lang_31_n9.txt",
          "Lang_31_n48.txt",
          "Lang_31_n12.txt",
          "Lang_31_n8.txt",
          "Lang_31_n37.txt",
          "Lang_31_n28.txt",
          "Lang_31_n10.txt",
          "Lang_31_n44.txt",
          "Lang_31_n35.txt",
          "Lang_31_n40.txt",
          "Lang_31_n25.txt",
          "Lang_31_n14.txt",
          "Lang_31_n43.txt",
          "Lang_31_n42.txt",
          "Lang_31_n30.txt",
          "Lang_31_n31.txt",
          "Lang_31_n18.txt",
          "Lang_31_n16.txt",
          "Lang_31_n4.txt",
          "Lang_31_n26.txt",
          "Lang_31_n15.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    public static boolean containsAny(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return false;\n        }\n        int csLength = cs.length();\n        int searchLength = searchChars.length;\n        for (int i = 0; i < csLength; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLength; j++) {\n                if (Character.codePointAt(searchChars, j) == Character.codePointAt(cs, i)) {\n                    // ch is a supplementary character\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n",
        "index": 10,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 2,
        "passing_trigger": 2,
        "total_relevant": 19,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyCharArrayWithSupplementaryChars",
          "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyStringWithSupplementaryChars"
        ],
        "failing_tests": [],
        "sum_entropy": -7.3446764256386,
        "mean_entropy": -0.05208990372793333,
        "pass_FIB_num": 26,
        "pass_FIB": [
          "Lang_31_n13.txt",
          "Lang_31_n34.txt",
          "Lang_31_n3.txt",
          "Lang_31_n2.txt",
          "Lang_31_n29.txt",
          "Lang_31_n9.txt",
          "Lang_31_n48.txt",
          "Lang_31_n12.txt",
          "Lang_31_n8.txt",
          "Lang_31_n37.txt",
          "Lang_31_n28.txt",
          "Lang_31_n10.txt",
          "Lang_31_n44.txt",
          "Lang_31_n35.txt",
          "Lang_31_n40.txt",
          "Lang_31_n25.txt",
          "Lang_31_n14.txt",
          "Lang_31_n43.txt",
          "Lang_31_n42.txt",
          "Lang_31_n30.txt",
          "Lang_31_n31.txt",
          "Lang_31_n18.txt",
          "Lang_31_n16.txt",
          "Lang_31_n4.txt",
          "Lang_31_n26.txt",
          "Lang_31_n15.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    public static boolean containsAny(CharSequence cs, char[] searchChars) {\n        if (cs == null || cs.length() == 0 || searchChars == null || searchChars.length == 0) {\n            return false;\n        }\n        for (int i = 0; i < cs.length(); i++) {\n            char ch = cs.charAt(i);\n            for (char searchChar : searchChars) {\n                if (Character.isHighSurrogate(searchChar) && i + 1 < cs.length()) {\n                    char ch2 = cs.charAt(i + 1);\n                    if (Character.isLowSurrogate(ch2) && Character.toCodePoint(searchChar, ch2) == ch) {\n                        return true;\n                    }\n                } else if (searchChar == ch) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n",
        "index": 42,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 2,
        "passing_trigger": 2,
        "total_relevant": 19,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyCharArrayWithSupplementaryChars",
          "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyStringWithSupplementaryChars"
        ],
        "failing_tests": [],
        "sum_entropy": -14.34513941142545,
        "mean_entropy": -0.08104598537528503,
        "pass_FIB_num": 26,
        "pass_FIB": [
          "Lang_31_n13.txt",
          "Lang_31_n34.txt",
          "Lang_31_n3.txt",
          "Lang_31_n2.txt",
          "Lang_31_n29.txt",
          "Lang_31_n9.txt",
          "Lang_31_n48.txt",
          "Lang_31_n12.txt",
          "Lang_31_n8.txt",
          "Lang_31_n37.txt",
          "Lang_31_n28.txt",
          "Lang_31_n10.txt",
          "Lang_31_n44.txt",
          "Lang_31_n35.txt",
          "Lang_31_n40.txt",
          "Lang_31_n25.txt",
          "Lang_31_n14.txt",
          "Lang_31_n43.txt",
          "Lang_31_n42.txt",
          "Lang_31_n30.txt",
          "Lang_31_n31.txt",
          "Lang_31_n18.txt",
          "Lang_31_n16.txt",
          "Lang_31_n4.txt",
          "Lang_31_n26.txt",
          "Lang_31_n15.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    public static boolean containsAny(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return false;\n        }\n        if (searchChars.length == 0) {\n            return false;\n        }\n        int csLength = cs.length();\n        int searchLength = searchChars.length;\n        outer:\n        for (int i = 0; i < csLength; i++) {\n            char ch = cs.charAt(i);\n            int chCodePoint = Character.codePointAt(cs, i);\n            if (Character.isSupplementaryCodePoint(chCodePoint)) {\n                for (int j = 0; j < searchLength; j++) {\n                    int searchCodePoint = Character.codePointAt(searchChars, j);\n                    if (chCodePoint == searchCodePoint) {\n                        return true;\n                    }\n                    if (Character.charCount(searchCodePoint) > 1) {\n                        j++;\n                    }\n                }\n            } else {\n                for (int j = 0; j < searchLength; j++) {\n                    if (searchChars[j] == ch) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n",
        "index": 50,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 2,
        "passing_trigger": 2,
        "total_relevant": 19,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyCharArrayWithSupplementaryChars",
          "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyStringWithSupplementaryChars"
        ],
        "failing_tests": [],
        "sum_entropy": -21.828397318227214,
        "mean_entropy": -0.08801773112188392,
        "pass_FIB_num": 26,
        "pass_FIB": [
          "Lang_31_n13.txt",
          "Lang_31_n34.txt",
          "Lang_31_n3.txt",
          "Lang_31_n2.txt",
          "Lang_31_n29.txt",
          "Lang_31_n9.txt",
          "Lang_31_n48.txt",
          "Lang_31_n12.txt",
          "Lang_31_n8.txt",
          "Lang_31_n37.txt",
          "Lang_31_n28.txt",
          "Lang_31_n10.txt",
          "Lang_31_n44.txt",
          "Lang_31_n35.txt",
          "Lang_31_n40.txt",
          "Lang_31_n25.txt",
          "Lang_31_n14.txt",
          "Lang_31_n43.txt",
          "Lang_31_n42.txt",
          "Lang_31_n30.txt",
          "Lang_31_n31.txt",
          "Lang_31_n18.txt",
          "Lang_31_n16.txt",
          "Lang_31_n4.txt",
          "Lang_31_n26.txt",
          "Lang_31_n15.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "wrong"
      }
    ]
  }
}