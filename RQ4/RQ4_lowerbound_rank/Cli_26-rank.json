{
  "Cli_26_src/java/org/apache/commons/cli/OptionBuilder.java_336_364": {
    "patches": [
      {
        "patch": "\n    /**\n     * Create an Option using the current settings and with\n     * the specified Option <code>char</code>.\n     *\n     * @param opt the <code>java.lang.String</code> representation\n     * of the Option\n     * @return the Option instance\n     * @throws IllegalArgumentException if <code>opt</code> is not\n     * a valid character.  See Option.\n     */\n    public static Option create(String opt) throws IllegalArgumentException\n    {\n        try {\n            // create the option\n            Option option = new Option(opt, description);\n\n            // set the option properties\n            option.setLongOpt(longopt);\n            option.setRequired(required);\n            option.setOptionalArg(optionalArg);\n            option.setArgs(numberOfArgs);\n            option.setType(type);\n            option.setValueSeparator(valuesep);\n            option.setArgName(argName);\n            // reset the OptionBuilder properties\n            OptionBuilder.reset();\n\n            // return the Option instance\n            return option;\n        } catch (IllegalArgumentException e) {\n            OptionBuilder.reset();\n            throw e;\n        }\n    }\n",
        "index": 4,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 15,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.cli.OptionBuilderTest::testBuilderIsResettedAlways"
        ],
        "failing_tests": [],
        "sum_entropy": -3.01945532878356,
        "mean_entropy": -0.013601150129655676,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Create an Option using the current settings and with\n     * the specified Option <code>char</code>.\n     *\n     * @param opt the <code>java.lang.String</code> representation\n     * of the Option\n     * @return the Option instance\n     * @throws IllegalArgumentException if <code>opt</code> is not\n     * a valid character.  See Option.\n     */\n    public static Option create(String opt) throws IllegalArgumentException\n    {\n        try {\n            // create the option\n            Option option = new Option(opt, description);\n\n            // set the option properties\n            option.setLongOpt(longopt);\n            option.setRequired(required);\n            option.setOptionalArg(optionalArg);\n            option.setArgs(numberOfArgs);\n            option.setType(type);\n            option.setValueSeparator(valuesep);\n            option.setArgName(argName);\n            // reset the OptionBuilder properties\n            OptionBuilder.reset();\n\n            // return the Option instance\n            return option;\n        } catch (IllegalArgumentException e) {\n            OptionBuilder.reset();\n            throw e;\n        }\n    }\n",
        "index": 8,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 15,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.cli.OptionBuilderTest::testBuilderIsResettedAlways"
        ],
        "failing_tests": [],
        "sum_entropy": -3.01945532878356,
        "mean_entropy": -0.013601150129655676,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Create an Option using the current settings and with\n     * the specified Option <code>char</code>.\n     *\n     * @param opt the <code>java.lang.String</code> representation\n     * of the Option\n     * @return the Option instance\n     * @throws IllegalArgumentException if <code>opt</code> is not\n     * a valid character.  See Option.\n     */\n    public static Option create(String opt) throws IllegalArgumentException\n    {\n        try {\n            // create the option\n            Option option = new Option(opt, description);\n\n            // set the option properties\n            option.setLongOpt(longopt);\n            option.setRequired(required);\n            option.setOptionalArg(optionalArg);\n            option.setArgs(numberOfArgs);\n            option.setType(type);\n            option.setValueSeparator(valuesep);\n            option.setArgName(argName);\n\n            // reset the OptionBuilder properties\n            OptionBuilder.reset();\n\n            // return the Option instance\n            return option;\n        } catch (IllegalArgumentException e) {\n            OptionBuilder.reset();\n            throw e;\n        }\n    }\n",
        "index": 15,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 15,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.cli.OptionBuilderTest::testBuilderIsResettedAlways"
        ],
        "failing_tests": [],
        "sum_entropy": -3.029291319364969,
        "mean_entropy": -0.013645456393535895,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Create an Option using the current settings and with\n     * the specified Option <code>char</code>.\n     *\n     * @param opt the <code>java.lang.String</code> representation\n     * of the Option\n     * @return the Option instance\n     * @throws IllegalArgumentException if <code>opt</code> is not\n     * a valid character.  See Option.\n     */\n    public static Option create(String opt) throws IllegalArgumentException\n    {\n        try {\n            // create the option\n            Option option = new Option(opt, description);\n\n            // set the option properties\n            option.setLongOpt(longopt);\n            option.setRequired(required);\n            option.setOptionalArg(optionalArg);\n            option.setArgs(numberOfArgs);\n            option.setType(type);\n            option.setValueSeparator(valuesep);\n            option.setArgName(argName);\n\n            // reset the OptionBuilder properties\n            OptionBuilder.reset();\n\n            // return the Option instance\n            return option;\n        } catch (IllegalArgumentException e) {\n            OptionBuilder.reset();\n            throw e;\n        }\n    }\n",
        "index": 21,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 15,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.cli.OptionBuilderTest::testBuilderIsResettedAlways"
        ],
        "failing_tests": [],
        "sum_entropy": -3.029291319364969,
        "mean_entropy": -0.013645456393535895,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Create an Option using the current settings and with\n     * the specified Option <code>char</code>.\n     *\n     * @param opt the <code>java.lang.String</code> representation\n     * of the Option\n     * @return the Option instance\n     * @throws IllegalArgumentException if <code>opt</code> is not\n     * a valid character.  See Option.\n     */\n    public static Option create(String opt) throws IllegalArgumentException\n    {\n        try {\n            // create the option\n            Option option = new Option(opt, description);\n\n            // set the option properties\n            option.setLongOpt(longopt);\n            option.setRequired(required);\n            option.setOptionalArg(optionalArg);\n            option.setArgs(numberOfArgs);\n            option.setType(type);\n            option.setValueSeparator(valuesep);\n            option.setArgName(argName);\n\n            // reset the OptionBuilder properties\n            OptionBuilder.reset();\n\n            // return the Option instance\n            return option;\n        } catch (IllegalArgumentException e) {\n            OptionBuilder.reset();\n            throw e;\n        }\n    }\n",
        "index": 67,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 15,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.cli.OptionBuilderTest::testBuilderIsResettedAlways"
        ],
        "failing_tests": [],
        "sum_entropy": -3.04466066873421,
        "mean_entropy": -0.013714687697000946,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Create an Option using the current settings and with\n     * the specified Option <code>char</code>.\n     *\n     * @param opt the <code>java.lang.String</code> representation\n     * of the Option\n     * @return the Option instance\n     * @throws IllegalArgumentException if <code>opt</code> is not\n     * a valid character.  See Option.\n     */\n    public static Option create(String opt) throws IllegalArgumentException\n    {\n        try {\n            // create the option\n            Option option = new Option(opt, description);\n\n            // set the option properties\n            option.setLongOpt(longopt);\n            option.setRequired(required);\n            option.setOptionalArg(optionalArg);\n            option.setArgs(numberOfArgs);\n            option.setType(type);\n            option.setValueSeparator(valuesep);\n            option.setArgName(argName);\n\n            // reset the OptionBuilder properties\n            OptionBuilder.reset();\n\n            // return the Option instance\n            return option;\n        } catch (IllegalArgumentException e) {\n            OptionBuilder.reset();\n            throw e;\n        }\n    }\n",
        "index": 71,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 15,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.cli.OptionBuilderTest::testBuilderIsResettedAlways"
        ],
        "failing_tests": [],
        "sum_entropy": -3.04466066873421,
        "mean_entropy": -0.013714687697000946,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Create an Option using the current settings and with\n     * the specified Option <code>char</code>.\n     *\n     * @param opt the <code>java.lang.String</code> representation\n     * of the Option\n     * @return the Option instance\n     * @throws IllegalArgumentException if <code>opt</code> is not\n     * a valid character.  See Option.\n     */\n    public static Option create(String opt) throws IllegalArgumentException\n    {\n        try {\n            // create the option\n            Option option = new Option(opt, description);\n\n            // set the option properties\n            option.setLongOpt(longopt);\n            option.setRequired(required);\n            option.setOptionalArg(optionalArg);\n            option.setArgs(numberOfArgs);\n            option.setType(type);\n            option.setValueSeparator(valuesep);\n            option.setArgName(argName);\n\n            // reset the OptionBuilder properties\n            OptionBuilder.reset();\n\n            // return the Option instance\n            return option;\n        } catch (IllegalArgumentException e) {\n            OptionBuilder.reset();\n            throw e;\n        }\n    }\n",
        "index": 31,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 15,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.cli.OptionBuilderTest::testBuilderIsResettedAlways"
        ],
        "failing_tests": [],
        "sum_entropy": -3.07013598305772,
        "mean_entropy": -0.013829441365124866,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Create an Option using the current settings and with\n     * the specified Option <code>char</code>.\n     *\n     * @param opt the <code>java.lang.String</code> representation\n     * of the Option\n     * @return the Option instance\n     * @throws IllegalArgumentException if <code>opt</code> is not\n     * a valid character.  See Option.\n     */\n    public static Option create(String opt) throws IllegalArgumentException\n    {\n        try {\n            // create the option\n            Option option = new Option(opt, description);\n\n            // set the option properties\n            option.setLongOpt(longopt);\n            option.setRequired(required);\n            option.setOptionalArg(optionalArg);\n            option.setArgs(numberOfArgs);\n            option.setType(type);\n            option.setValueSeparator(valuesep);\n            option.setArgName(argName);\n            // reset the OptionBuilder properties\n            OptionBuilder.reset();\n\n            // return the Option instance\n            return option;\n        } catch (IllegalArgumentException e) {\n            OptionBuilder.reset();\n            throw e;\n        }\n    }\n",
        "index": 25,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 15,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.cli.OptionBuilderTest::testBuilderIsResettedAlways"
        ],
        "failing_tests": [],
        "sum_entropy": -3.0750061219701683,
        "mean_entropy": -0.013851378927793551,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Create an Option using the current settings and with\n     * the specified Option <code>char</code>.\n     *\n     * @param opt the <code>java.lang.String</code> representation\n     * of the Option\n     * @return the Option instance\n     * @throws IllegalArgumentException if <code>opt</code> is not\n     * a valid character.  See Option.\n     */\n    public static Option create(String opt) throws IllegalArgumentException\n    {\n        try {\n            // create the option\n            Option option = new Option(opt, description);\n\n            // set the option properties\n            option.setLongOpt(longopt);\n            option.setRequired(required);\n            option.setOptionalArg(optionalArg);\n            option.setArgs(numberOfArgs);\n            option.setType(type);\n            option.setValueSeparator(valuesep);\n            option.setArgName(argName);\n            // reset the OptionBuilder properties\n            OptionBuilder.reset();\n\n            // return the Option instance\n            return option;\n        } catch (IllegalArgumentException e) {\n            OptionBuilder.reset();\n            throw e;\n        }\n    }\n",
        "index": 64,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 15,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.cli.OptionBuilderTest::testBuilderIsResettedAlways"
        ],
        "failing_tests": [],
        "sum_entropy": -3.1574979816909092,
        "mean_entropy": -0.014222963881490582,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Create an Option using the current settings and with\n     * the specified Option <code>char</code>.\n     *\n     * @param opt the <code>java.lang.String</code> representation\n     * of the Option\n     * @return the Option instance\n     * @throws IllegalArgumentException if <code>opt</code> is not\n     * a valid character.  See Option.\n     */\n    public static Option create(String opt) throws IllegalArgumentException\n    {\n        try {\n            // create the option\n            Option option = new Option(opt, description);\n\n            // set the option properties\n            option.setLongOpt(longopt);\n            option.setRequired(required);\n            option.setOptionalArg(optionalArg);\n            option.setArgs(numberOfArgs);\n            option.setType(type);\n            option.setValueSeparator(valuesep);\n            option.setArgName(argName);\n            // reset the OptionBuilder properties\n            OptionBuilder.reset();\n\n            // return the Option instance\n            return option;\n        } catch (IllegalArgumentException e) {\n            OptionBuilder.reset();\n            throw e;\n        }\n    }\n",
        "index": 70,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 15,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.cli.OptionBuilderTest::testBuilderIsResettedAlways"
        ],
        "failing_tests": [],
        "sum_entropy": -3.1574979816909092,
        "mean_entropy": -0.014222963881490582,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Create an Option using the current settings and with\n     * the specified Option <code>char</code>.\n     *\n     * @param opt the <code>java.lang.String</code> representation\n     * of the Option\n     * @return the Option instance\n     * @throws IllegalArgumentException if <code>opt</code> is not\n     * a valid character.  See Option.\n     */\n    public static Option create(String opt) throws IllegalArgumentException\n    {\n        try {\n            // create the option\n            Option option = new Option(opt, description);\n\n            // set the option properties\n            option.setLongOpt(longopt);\n            option.setRequired(required);\n            option.setOptionalArg(optionalArg);\n            option.setArgs(numberOfArgs);\n            option.setType(type);\n            option.setValueSeparator(valuesep);\n            option.setArgName(argName);\n            \n            return option;\n        } finally {\n            // reset the OptionBuilder properties\n            OptionBuilder.reset();\n        }\n    }\n",
        "index": 29,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 15,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.cli.OptionBuilderTest::testBuilderIsResettedAlways"
        ],
        "failing_tests": [],
        "sum_entropy": -2.9168217442166697,
        "mean_entropy": -0.014368580020771772,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * Create an Option using the current settings and with\n     * the specified Option <code>char</code>.\n     *\n     * @param opt the <code>java.lang.String</code> representation\n     * of the Option\n     * @return the Option instance\n     * @throws IllegalArgumentException if <code>opt</code> is not\n     * a valid character.  See Option.\n     */\n    public static Option create(String opt) throws IllegalArgumentException\n    {\n        try {\n            // create the option\n            Option option = new Option(opt, description);\n\n            // set the option properties\n            option.setLongOpt(longopt);\n            option.setRequired(required);\n            option.setOptionalArg(optionalArg);\n            option.setArgs(numberOfArgs);\n            option.setType(type);\n            option.setValueSeparator(valuesep);\n            option.setArgName(argName);\n            \n            return option;\n        } finally {\n            // reset the OptionBuilder properties\n            OptionBuilder.reset();\n        }\n    }\n",
        "index": 68,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 15,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.cli.OptionBuilderTest::testBuilderIsResettedAlways"
        ],
        "failing_tests": [],
        "sum_entropy": -2.92393455622791,
        "mean_entropy": -0.014403618503585763,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Create an Option using the current settings and with\n     * the specified Option <code>char</code>.\n     *\n     * @param opt the <code>java.lang.String</code> representation\n     * of the Option\n     * @return the Option instance\n     * @throws IllegalArgumentException if <code>opt</code> is not\n     * a valid character.  See Option.\n     */\n    public static Option create(String opt) throws IllegalArgumentException\n    {\n        try {\n            // create the option\n            Option option = new Option(opt, description);\n\n            // set the option properties\n            option.setLongOpt(longopt);\n            option.setRequired(required);\n            option.setOptionalArg(optionalArg);\n            option.setArgs(numberOfArgs);\n            option.setType(type);\n            option.setValueSeparator(valuesep);\n            option.setArgName(argName);\n            \n            return option;\n        } finally {\n            // reset the OptionBuilder properties\n            OptionBuilder.reset();\n        }\n    }\n",
        "index": 73,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 15,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.cli.OptionBuilderTest::testBuilderIsResettedAlways"
        ],
        "failing_tests": [],
        "sum_entropy": -2.92393455622791,
        "mean_entropy": -0.014403618503585763,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Create an Option using the current settings and with\n     * the specified Option <code>char</code>.\n     *\n     * @param opt the <code>java.lang.String</code> representation\n     * of the Option\n     * @return the Option instance\n     * @throws IllegalArgumentException if <code>opt</code> is not\n     * a valid character.  See Option.\n     */\n    public static Option create(String opt) throws IllegalArgumentException\n    {\n        try {\n            // create the option\n            Option option = new Option(opt, description);\n\n            // set the option properties\n            option.setLongOpt(longopt);\n            option.setRequired(required);\n            option.setOptionalArg(optionalArg);\n            option.setArgs(numberOfArgs);\n            option.setType(type);\n            option.setValueSeparator(valuesep);\n            option.setArgName(argName);\n            // reset the OptionBuilder properties\n            OptionBuilder.reset();\n\n            // return the Option instance\n            return option;\n        } catch (IllegalArgumentException e) {\n            OptionBuilder.reset();\n            throw e;\n        }\n    }\n",
        "index": 43,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 15,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.cli.OptionBuilderTest::testBuilderIsResettedAlways"
        ],
        "failing_tests": [],
        "sum_entropy": -3.2134184650288202,
        "mean_entropy": -0.014474857950580271,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Create an Option using the current settings and with\n     * the specified Option <code>char</code>.\n     *\n     * @param opt the <code>java.lang.String</code> representation\n     * of the Option\n     * @return the Option instance\n     * @throws IllegalArgumentException if <code>opt</code> is not\n     * a valid character.  See Option.\n     */\n    public static Option create(String opt) throws IllegalArgumentException\n    {\n        try {\n            // create the option\n            Option option = new Option(opt, description);\n\n            // set the option properties\n            option.setLongOpt(longopt);\n            option.setRequired(required);\n            option.setOptionalArg(optionalArg);\n            option.setArgs(numberOfArgs);\n            option.setType(type);\n            option.setValueSeparator(valuesep);\n            option.setArgName(argName);\n\n            // reset the OptionBuilder properties\n            OptionBuilder.reset();\n\n            // return the Option instance\n            return option;\n        } catch (IllegalArgumentException e) {\n            OptionBuilder.reset();\n            throw e;\n        }\n    }\n",
        "index": 80,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 15,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.cli.OptionBuilderTest::testBuilderIsResettedAlways"
        ],
        "failing_tests": [],
        "sum_entropy": -3.3227225804532097,
        "mean_entropy": -0.014967218830870314,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Create an Option using the current settings and with\n     * the specified Option <code>char</code>.\n     *\n     * @param opt the <code>java.lang.String</code> representation\n     * of the Option\n     * @return the Option instance\n     * @throws IllegalArgumentException if <code>opt</code> is not\n     * a valid character.  See Option.\n     */\n    public static Option create(String opt) throws IllegalArgumentException\n    {\n        try {\n            // create the option\n            Option option = new Option(opt, description);\n\n            // set the option properties\n            option.setLongOpt(longopt);\n            option.setRequired(required);\n            option.setOptionalArg(optionalArg);\n            option.setArgs(numberOfArgs);\n            option.setType(type);\n            option.setValueSeparator(valuesep);\n            option.setArgName(argName);\n            \n            // reset the OptionBuilder properties\n            OptionBuilder.reset();\n\n            // return the Option instance\n            return option;\n        } catch (IllegalArgumentException e) {\n            OptionBuilder.reset(); // Reset even if an exception is thrown\n            throw e; // Re-throw the exception\n        }\n    }\n",
        "index": 12,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 15,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.cli.OptionBuilderTest::testBuilderIsResettedAlways"
        ],
        "failing_tests": [],
        "sum_entropy": -12.336123992926963,
        "mean_entropy": -0.05161558156036386,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Create an Option using the current settings and with\n     * the specified Option <code>char</code>.\n     *\n     * @param opt the <code>java.lang.String</code> representation\n     * of the Option\n     * @return the Option instance\n     * @throws IllegalArgumentException if <code>opt</code> is not\n     * a valid character.  See Option.\n     */\n    public static Option create(String opt) throws IllegalArgumentException\n    {\n        // create the option\n        try {\n            Option option = new Option(opt, description);\n\n            // set the option properties\n            option.setLongOpt(longopt);\n            option.setRequired(required);\n            option.setOptionalArg(optionalArg);\n            option.setArgs(numberOfArgs);\n            option.setType(type);\n            option.setValueSeparator(valuesep);\n            option.setArgName(argName);\n\n            // reset the OptionBuilder properties\n            OptionBuilder.reset();\n\n            // return the Option instance\n            return option;\n        } catch (IllegalArgumentException e) {\n            OptionBuilder.reset(); // Reset OptionBuilder in case of exception\n            throw e; // Re-throw the IllegalArgumentException\n        }\n    }\n",
        "index": 55,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 15,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.cli.OptionBuilderTest::testBuilderIsResettedAlways"
        ],
        "failing_tests": [],
        "sum_entropy": -12.355664593750774,
        "mean_entropy": -0.05191455711659989,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Create an Option using the current settings and with\n     * the specified Option <code>char</code>.\n     *\n     * @param opt the <code>java.lang.String</code> representation\n     * of the Option\n     * @return the Option instance\n     * @throws IllegalArgumentException if <code>opt</code> is not\n     * a valid character.  See Option.\n     */\n    public static Option create(String opt) throws IllegalArgumentException\n    {\n        Option option;\n        try {\n            option = new Option(opt, description);\n            option.setLongOpt(longopt);\n            option.setRequired(required);\n            option.setOptionalArg(optionalArg);\n            option.setArgs(numberOfArgs);\n            option.setType(type);\n            option.setValueSeparator(valuesep);\n            option.setArgName(argName);\n        } catch (IllegalArgumentException e) {\n            OptionBuilder.reset();\n            throw e;\n        }\n        \n        OptionBuilder.reset();\n\n        return option;\n    }\n",
        "index": 3,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 15,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.cli.OptionBuilderTest::testBuilderIsResettedAlways"
        ],
        "failing_tests": [],
        "sum_entropy": -10.566622309051553,
        "mean_entropy": -0.053366779338644206,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Create an Option using the current settings and with\n     * the specified Option <code>char</code>.\n     *\n     * @param opt the <code>java.lang.String</code> representation\n     * of the Option\n     * @return the Option instance\n     * @throws IllegalArgumentException if <code>opt</code> is not\n     * a valid character. See Option.\n     */\n    public static Option create(String opt) throws IllegalArgumentException\n    {\n        try {\n            // create the option\n            Option option = new Option(opt, description);\n\n            // set the option properties\n            option.setLongOpt(longopt);\n            option.setRequired(required);\n            option.setOptionalArg(optionalArg);\n            option.setArgs(numberOfArgs);\n            option.setType(type);\n            option.setValueSeparator(valuesep);\n            option.setArgName(argName);\n\n            // reset the OptionBuilder properties\n            OptionBuilder.reset();\n\n            // return the Option instance\n            return option;\n        } catch (IllegalArgumentException e) {\n            // Reset the OptionBuilder properties even in case of exception\n            OptionBuilder.reset();\n            throw e;\n        }\n    }\n",
        "index": 40,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 15,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.cli.OptionBuilderTest::testBuilderIsResettedAlways"
        ],
        "failing_tests": [],
        "sum_entropy": -13.06050189671559,
        "mean_entropy": -0.05581411066972474,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    public static Option create(String opt) throws IllegalArgumentException\n    {\n        try {\n            Option option = new Option(opt, description);\n            option.setLongOpt(longopt);\n            option.setRequired(required);\n            option.setOptionalArg(optionalArg);\n            option.setArgs(numberOfArgs);\n            option.setType(type);\n            option.setValueSeparator(valuesep);\n            option.setArgName(argName);\n            OptionBuilder.reset();\n            return option;\n        } catch (IllegalArgumentException e) {\n            OptionBuilder.reset();\n            throw e;\n        }\n    }\n",
        "index": 22,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 15,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.cli.OptionBuilderTest::testBuilderIsResettedAlways"
        ],
        "failing_tests": [],
        "sum_entropy": -6.095105412052304,
        "mean_entropy": -0.05696360198179723,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "correct"
      }
    ]
  }
}