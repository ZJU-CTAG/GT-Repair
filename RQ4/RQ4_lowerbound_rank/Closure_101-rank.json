{
  "Closure_101_src/com/google/javascript/jscomp/CommandLineRunner.java_418_439": {
    "patches": [
      {
        "patch": "\n  @Override\n  protected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new ClosureCodingConvention());\n    CompilationLevel level = flags.compilation_level;\n    level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n      level.setDebugOptionsForCompilationLevel(options);\n    }\n\n    WarningLevel wLevel = flags.warning_level;\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n      formattingOption.applyToOptions(options);\n    }\n    if (flags.process_closure_primitives) {\n      options.closurePass = true;\n    } else {\n      options.closurePass = false;\n    }\n\n    initOptionsFromFlags(options);\n    return options;\n  }\n",
        "index": 64,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives"
        ],
        "failing_tests": [],
        "sum_entropy": -1.3638770119019596,
        "mean_entropy": -0.008632132986721264,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n  @Override\n  protected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new ClosureCodingConvention());\n    CompilationLevel level = flags.compilation_level;\n    level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n      level.setDebugOptionsForCompilationLevel(options);\n    }\n\n    WarningLevel wLevel = flags.warning_level;\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n      formattingOption.applyToOptions(options);\n    }\n    if (flags.process_closure_primitives) {\n      options.closurePass = true;\n    } else {\n      options.closurePass = false;\n    }\n\n    initOptionsFromFlags(options);\n    return options;\n  }\n",
        "index": 66,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives"
        ],
        "failing_tests": [],
        "sum_entropy": -1.3638770119019596,
        "mean_entropy": -0.008632132986721264,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n  @Override\n  protected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new ClosureCodingConvention());\n    CompilationLevel level = flags.compilation_level;\n    level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n      level.setDebugOptionsForCompilationLevel(options);\n    }\n\n    WarningLevel wLevel = flags.warning_level;\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n      formattingOption.applyToOptions(options);\n    }\n    if (flags.process_closure_primitives) {\n      options.closurePass = true;\n    } else {\n      options.closurePass = false;\n    }\n\n    initOptionsFromFlags(options);\n    return options;\n  }\n",
        "index": 77,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives"
        ],
        "failing_tests": [],
        "sum_entropy": -1.3638770119019596,
        "mean_entropy": -0.008632132986721264,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n  @Override\n  protected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new ClosureCodingConvention());\n    CompilationLevel level = flags.compilation_level;\n    level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n      level.setDebugOptionsForCompilationLevel(options);\n    }\n\n    WarningLevel wLevel = flags.warning_level;\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n      formattingOption.applyToOptions(options);\n    }\n    if (flags.process_closure_primitives) {\n      options.closurePass = true;\n    } else {\n      options.closurePass = false;\n    }\n\n    initOptionsFromFlags(options);\n    return options;\n  }\n",
        "index": 96,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives"
        ],
        "failing_tests": [],
        "sum_entropy": -1.3945828429765188,
        "mean_entropy": -0.008826473689724803,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n  @Override\n  protected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new ClosureCodingConvention());\n    CompilationLevel level = flags.compilation_level;\n    level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n      level.setDebugOptionsForCompilationLevel(options);\n    }\n\n    WarningLevel wLevel = flags.warning_level;\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n      formattingOption.applyToOptions(options);\n    }\n    if (flags.process_closure_primitives) {\n      options.closurePass = true;\n    } else {\n      options.closurePass = false;\n    }\n\n    initOptionsFromFlags(options);\n    return options;\n  }\n",
        "index": 49,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives"
        ],
        "failing_tests": [],
        "sum_entropy": -1.4526935728219001,
        "mean_entropy": -0.00919426311912595,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n  @Override\n  protected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new ClosureCodingConvention());\n    CompilationLevel level = flags.compilation_level;\n    level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n      level.setDebugOptionsForCompilationLevel(options);\n    }\n\n    WarningLevel wLevel = flags.warning_level;\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n      formattingOption.applyToOptions(options);\n    }\n    if (flags.process_closure_primitives) {\n      options.closurePass = true;\n    } else {\n      options.closurePass = false;\n    }\n\n    initOptionsFromFlags(options);\n    return options;\n  }\n",
        "index": 51,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives"
        ],
        "failing_tests": [],
        "sum_entropy": -1.4526935728219001,
        "mean_entropy": -0.00919426311912595,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n  @Override\n  protected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new ClosureCodingConvention());\n    CompilationLevel level = flags.compilation_level;\n    level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n      level.setDebugOptionsForCompilationLevel(options);\n    }\n\n    WarningLevel wLevel = flags.warning_level;\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n      formattingOption.applyToOptions(options);\n    }\n    if (flags.process_closure_primitives) {\n      options.closurePass = true;\n    } else {\n      options.closurePass = false;\n    }\n\n    initOptionsFromFlags(options);\n    return options;\n  }\n",
        "index": 52,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives"
        ],
        "failing_tests": [],
        "sum_entropy": -1.4526935728219001,
        "mean_entropy": -0.00919426311912595,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n  @Override\n  protected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new ClosureCodingConvention());\n    CompilationLevel level = flags.compilation_level;\n    level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n      level.setDebugOptionsForCompilationLevel(options);\n    }\n\n    WarningLevel wLevel = flags.warning_level;\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n      formattingOption.applyToOptions(options);\n    }\n    if (flags.process_closure_primitives) {\n      options.closurePass = true;\n    } else {\n      options.closurePass = false;\n    }\n\n    initOptionsFromFlags(options);\n    return options;\n  }\n",
        "index": 54,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives"
        ],
        "failing_tests": [],
        "sum_entropy": -1.4526935728219001,
        "mean_entropy": -0.00919426311912595,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n  @Override\n  protected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new ClosureCodingConvention());\n    CompilationLevel level = flags.compilation_level;\n    level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n      level.setDebugOptionsForCompilationLevel(options);\n    }\n\n    WarningLevel wLevel = flags.warning_level;\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n      formattingOption.applyToOptions(options);\n    }\n    if (flags.process_closure_primitives) {\n      options.closurePass = true;\n    } else {\n      options.closurePass = false;\n    }\n\n    initOptionsFromFlags(options);\n    return options;\n  }\n",
        "index": 57,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives"
        ],
        "failing_tests": [],
        "sum_entropy": -1.4526935728219001,
        "mean_entropy": -0.00919426311912595,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n  @Override\n  protected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new ClosureCodingConvention());\n    CompilationLevel level = flags.compilation_level;\n    level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n      level.setDebugOptionsForCompilationLevel(options);\n    }\n\n    WarningLevel wLevel = flags.warning_level;\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n      formattingOption.applyToOptions(options);\n    }\n    if (flags.process_closure_primitives) {\n      options.closurePass = true;\n    } else {\n      options.closurePass = false;\n    }\n\n    initOptionsFromFlags(options);\n    return options;\n  }\n",
        "index": 60,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives"
        ],
        "failing_tests": [],
        "sum_entropy": -1.4526935728219001,
        "mean_entropy": -0.00919426311912595,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n  @Override\n  protected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new ClosureCodingConvention());\n    CompilationLevel level = flags.compilation_level;\n    level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n      level.setDebugOptionsForCompilationLevel(options);\n    }\n\n    WarningLevel wLevel = flags.warning_level;\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n      formattingOption.applyToOptions(options);\n    }\n    if (flags.process_closure_primitives) {\n      options.closurePass = true;\n    } else {\n      options.closurePass = false;\n    }\n\n    initOptionsFromFlags(options);\n    return options;\n  }\n",
        "index": 84,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives"
        ],
        "failing_tests": [],
        "sum_entropy": -1.49433562765474,
        "mean_entropy": -0.009457820428194557,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n  @Override\n  protected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new ClosureCodingConvention());\n    CompilationLevel level = flags.compilation_level;\n    level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n      level.setDebugOptionsForCompilationLevel(options);\n    }\n\n    WarningLevel wLevel = flags.warning_level;\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n      formattingOption.applyToOptions(options);\n    }\n    if (flags.process_closure_primitives) {\n      options.closurePass = true;\n    } else {\n      options.closurePass = false;\n    }\n\n    initOptionsFromFlags(options);\n    return options;\n  }\n",
        "index": 87,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives"
        ],
        "failing_tests": [],
        "sum_entropy": -1.49433562765474,
        "mean_entropy": -0.009457820428194557,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n  @Override\n  protected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new ClosureCodingConvention());\n    CompilationLevel level = flags.compilation_level;\n    level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n      level.setDebugOptionsForCompilationLevel(options);\n    }\n\n    WarningLevel wLevel = flags.warning_level;\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n      formattingOption.applyToOptions(options);\n    }\n    if (flags.process_closure_primitives) {\n      options.closurePass = true;\n    } else {\n      options.closurePass = false;\n    }\n\n    initOptionsFromFlags(options);\n    return options;\n  }\n",
        "index": 89,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives"
        ],
        "failing_tests": [],
        "sum_entropy": -1.49433562765474,
        "mean_entropy": -0.009457820428194557,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n  @Override\n  protected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new ClosureCodingConvention());\n    CompilationLevel level = flags.compilation_level;\n    level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n      level.setDebugOptionsForCompilationLevel(options);\n    }\n\n    WarningLevel wLevel = flags.warning_level;\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n      formattingOption.applyToOptions(options);\n    }\n    if (flags.process_closure_primitives) {\n      options.closurePass = true;\n    } else {\n      options.closurePass = false;\n    }\n\n    initOptionsFromFlags(options);\n    return options;\n  }\n",
        "index": 90,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives"
        ],
        "failing_tests": [],
        "sum_entropy": -1.49433562765474,
        "mean_entropy": -0.009457820428194557,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n  @Override\n  protected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new ClosureCodingConvention());\n    CompilationLevel level = flags.compilation_level;\n    level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n      level.setDebugOptionsForCompilationLevel(options);\n    }\n\n    WarningLevel wLevel = flags.warning_level;\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n      formattingOption.applyToOptions(options);\n    }\n    if (flags.process_closure_primitives) {\n      options.closurePass = true;\n    } else {\n      options.closurePass = false;\n    }\n\n    initOptionsFromFlags(options);\n    return options;\n  }\n",
        "index": 17,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives"
        ],
        "failing_tests": [],
        "sum_entropy": -1.6032188411721098,
        "mean_entropy": -0.01014695469096272,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n@Override\nprotected CompilerOptions createOptions() {\n  CompilerOptions options = new CompilerOptions();\n  options.setCodingConvention(new ClosureCodingConvention());\n  CompilationLevel level = flags.compilation_level;\n  level.setOptionsForCompilationLevel(options);\n  if (flags.debug) {\n    level.setDebugOptionsForCompilationLevel(options);\n  }\n\n  WarningLevel wLevel = flags.warning_level;\n  wLevel.setOptionsForWarningLevel(options);\n  for (FormattingOption formattingOption : flags.formatting) {\n    formattingOption.applyToOptions(options);\n  }\n  if (flags.process_closure_primitives) {\n    options.closurePass = true;\n  } else {\n    options.closurePass = false;\n  }\n\n  initOptionsFromFlags(options);\n  return options;\n}\n",
        "index": 74,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives"
        ],
        "failing_tests": [],
        "sum_entropy": -3.53268109490657,
        "mean_entropy": -0.02293948762926344,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n@Override\nprotected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new ClosureCodingConvention());\n    CompilationLevel level = flags.compilation_level;\n    level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n      level.setDebugOptionsForCompilationLevel(options);\n    }\n\n    WarningLevel wLevel = flags.warning_level;\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n      formattingOption.applyToOptions(options);\n    }\n    if (flags.process_closure_primitives) {\n      options.closurePass = true;\n    } else {\n      options.closurePass = false;\n    }\n\n    initOptionsFromFlags(options);\n    return options;\n}\n",
        "index": 41,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives"
        ],
        "failing_tests": [],
        "sum_entropy": -3.5991476627340195,
        "mean_entropy": -0.023371088719052076,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n@Override\nprotected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new ClosureCodingConvention());\n    CompilationLevel level = flags.compilation_level;\n    level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n      level.setDebugOptionsForCompilationLevel(options);\n    }\n\n    WarningLevel wLevel = flags.warning_level;\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n      formattingOption.applyToOptions(options);\n    }\n    if (flags.process_closure_primitives) {\n      options.closurePass = true;\n    } else {\n      options.closurePass = false;\n    }\n\n    initOptionsFromFlags(options);\n    return options;\n}\n",
        "index": 76,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives"
        ],
        "failing_tests": [],
        "sum_entropy": -3.719104311954819,
        "mean_entropy": -0.024150027999706617,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n@Override\nprotected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new ClosureCodingConvention());\n    CompilationLevel level = flags.compilation_level;\n    level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n      level.setDebugOptionsForCompilationLevel(options);\n    }\n\n    WarningLevel wLevel = flags.warning_level;\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n      formattingOption.applyToOptions(options);\n    }\n    if (flags.process_closure_primitives) {\n      options.closurePass = true;\n    } else {\n      options.closurePass = false;\n    }\n\n    initOptionsFromFlags(options);\n    return options;\n}\n",
        "index": 56,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives"
        ],
        "failing_tests": [],
        "sum_entropy": -3.7291555106142504,
        "mean_entropy": -0.024215295523469158,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n@Override\nprotected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new ClosureCodingConvention());\n    CompilationLevel level = flags.compilation_level;\n    level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n        level.setDebugOptionsForCompilationLevel(options);\n    }\n\n    WarningLevel wLevel = flags.warning_level;\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n        formattingOption.applyToOptions(options);\n    }\n    if (flags.process_closure_primitives) {\n        options.closurePass = true;\n    } else {\n        options.closurePass = false; // Set closurePass to false when process_closure_primitives is false\n    }\n\n    initOptionsFromFlags(options);\n    return options;\n}\n",
        "index": 97,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 1,
        "failing_relevant": 0,
        "passing_tests": [
          "com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives"
        ],
        "failing_tests": [],
        "sum_entropy": -7.977593139404613,
        "mean_entropy": -0.04748567344883698,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "correct"
      }
    ]
  }
}