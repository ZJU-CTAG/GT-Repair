{
  "Time_15_src/main/java/org/joda/time/field/FieldUtils.java_126_149": {
    "patches": [
      {
        "patch": "\n    /**\n     * Multiply two values throwing an exception if overflow occurs.\n     * \n     * @param val1  the first value\n     * @param val2  the second value\n     * @return the new total\n     * @throws ArithmeticException if the value is too big or too small\n     * @since 1.2\n     */\n    public static long safeMultiply(long val1, int val2) {\n        switch (val2) {\n            case -1:\n                if (val1 == Long.MIN_VALUE) {\n                    throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n                }\n                return -val1;\n            case 0:\n                return 0L;\n            case 1:\n                return val1;\n        }\n        long total = val1 * val2;\n        if (total / val2 != val1) {\n            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        return total;\n    }\n",
        "index": 98,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 108,
        "failing_relevant": 0,
        "passing_tests": [
          "org.joda.time.field.TestFieldUtils::testSafeMultiplyLongInt"
        ],
        "failing_tests": [],
        "sum_entropy": -1.2665551367214998,
        "mean_entropy": -0.005654264003220981,
        "pass_FIB_num": 12,
        "pass_FIB": [
          "Time_15_n45.txt",
          "Time_15_n36.txt",
          "Time_15_n32.txt",
          "Time_15_n21.txt",
          "Time_15_n33.txt",
          "Time_15_n41.txt",
          "Time_15_n23.txt",
          "Time_15_n4.txt",
          "Time_15_n16.txt",
          "Time_15_n6.txt",
          "Time_15_n46.txt",
          "Time_15_n1.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Multiply two values throwing an exception if overflow occurs.\n     * \n     * @param val1  the first value\n     * @param val2  the second value\n     * @return the new total\n     * @throws ArithmeticException if the value is too big or too small\n     * @since 1.2\n     */\n    public static long safeMultiply(long val1, int val2) {\n        switch (val2) {\n            case -1:\n                if (val1 == Long.MIN_VALUE) {\n                    throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n                }\n                return -val1;\n            case 0:\n                return 0L;\n            case 1:\n                return val1;\n        }\n        long total = val1 * val2;\n        if (total / val2 != val1) {\n            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        return total;\n    }\n",
        "index": 99,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 108,
        "failing_relevant": 0,
        "passing_tests": [
          "org.joda.time.field.TestFieldUtils::testSafeMultiplyLongInt"
        ],
        "failing_tests": [],
        "sum_entropy": -1.2665551367214998,
        "mean_entropy": -0.005654264003220981,
        "pass_FIB_num": 12,
        "pass_FIB": [
          "Time_15_n45.txt",
          "Time_15_n36.txt",
          "Time_15_n32.txt",
          "Time_15_n21.txt",
          "Time_15_n33.txt",
          "Time_15_n41.txt",
          "Time_15_n23.txt",
          "Time_15_n4.txt",
          "Time_15_n16.txt",
          "Time_15_n6.txt",
          "Time_15_n46.txt",
          "Time_15_n1.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Multiply two values throwing an exception if overflow occurs.\n     * \n     * @param val1  the first value\n     * @param val2  the second value\n     * @return the new total\n     * @throws ArithmeticException if the value is too big or too small\n     * @since 1.2\n     */\n    public static long safeMultiply(long val1, int val2) {\n        switch (val2) {\n            case -1:\n                if (val1 == Long.MIN_VALUE) {\n                    throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n                }\n                return -val1;\n            case 0:\n                return 0L;\n            case 1:\n                return val1;\n        }\n        long total = val1 * val2;\n        if (total / val2 != val1) {\n            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        return total;\n    }\n",
        "index": 48,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 108,
        "failing_relevant": 0,
        "passing_tests": [
          "org.joda.time.field.TestFieldUtils::testSafeMultiplyLongInt"
        ],
        "failing_tests": [],
        "sum_entropy": -1.28552162570464,
        "mean_entropy": -0.005738935829038572,
        "pass_FIB_num": 12,
        "pass_FIB": [
          "Time_15_n45.txt",
          "Time_15_n36.txt",
          "Time_15_n32.txt",
          "Time_15_n21.txt",
          "Time_15_n33.txt",
          "Time_15_n41.txt",
          "Time_15_n23.txt",
          "Time_15_n4.txt",
          "Time_15_n16.txt",
          "Time_15_n6.txt",
          "Time_15_n46.txt",
          "Time_15_n1.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Multiply two values throwing an exception if overflow occurs.\n     * \n     * @param val1  the first value\n     * @param val2  the second value\n     * @return the new total\n     * @throws ArithmeticException if the value is too big or too small\n     * @since 1.2\n     */\n    public static long safeMultiply(long val1, int val2) {\n        switch (val2) {\n            case -1:\n                if (val1 == Long.MIN_VALUE) {\n                    throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n                }\n                return -val1;\n            case 0:\n                return 0L;\n            case 1:\n                return val1;\n        }\n        long total = val1 * val2;\n        if (total / val2 != val1) {\n            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        return total;\n    }\n",
        "index": 49,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 108,
        "failing_relevant": 0,
        "passing_tests": [
          "org.joda.time.field.TestFieldUtils::testSafeMultiplyLongInt"
        ],
        "failing_tests": [],
        "sum_entropy": -1.28552162570464,
        "mean_entropy": -0.005738935829038572,
        "pass_FIB_num": 12,
        "pass_FIB": [
          "Time_15_n45.txt",
          "Time_15_n36.txt",
          "Time_15_n32.txt",
          "Time_15_n21.txt",
          "Time_15_n33.txt",
          "Time_15_n41.txt",
          "Time_15_n23.txt",
          "Time_15_n4.txt",
          "Time_15_n16.txt",
          "Time_15_n6.txt",
          "Time_15_n46.txt",
          "Time_15_n1.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Multiply two values throwing an exception if overflow occurs.\n     * \n     * @param val1  the first value\n     * @param val2  the second value\n     * @return the new total\n     * @throws ArithmeticException if the value is too big or too small\n     * @since 1.2\n     */\n    public static long safeMultiply(long val1, int val2) {\n        switch (val2) {\n            case -1:\n                if (val1 == Long.MIN_VALUE) {\n                    throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n                }\n                return -val1;\n            case 0:\n                return 0L;\n            case 1:\n                return val1;\n        }\n        long total = val1 * val2;\n        if (total / val2 != val1) {\n            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        return total;\n    }\n",
        "index": 51,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 108,
        "failing_relevant": 0,
        "passing_tests": [
          "org.joda.time.field.TestFieldUtils::testSafeMultiplyLongInt"
        ],
        "failing_tests": [],
        "sum_entropy": -1.28552162570464,
        "mean_entropy": -0.005738935829038572,
        "pass_FIB_num": 12,
        "pass_FIB": [
          "Time_15_n45.txt",
          "Time_15_n36.txt",
          "Time_15_n32.txt",
          "Time_15_n21.txt",
          "Time_15_n33.txt",
          "Time_15_n41.txt",
          "Time_15_n23.txt",
          "Time_15_n4.txt",
          "Time_15_n16.txt",
          "Time_15_n6.txt",
          "Time_15_n46.txt",
          "Time_15_n1.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Multiply two values throwing an exception if overflow occurs.\n     * \n     * @param val1  the first value\n     * @param val2  the second value\n     * @return the new total\n     * @throws ArithmeticException if the value is too big or too small\n     * @since 1.2\n     */\n    public static long safeMultiply(long val1, int val2) {\n        switch (val2) {\n            case -1:\n                if (val1 == Long.MIN_VALUE) {\n                    throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n                }\n                return -val1;\n            case 0:\n                return 0L;\n            case 1:\n                return val1;\n        }\n        long total = val1 * val2;\n        if (total / val2 != val1) {\n            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        return total;\n    }\n",
        "index": 54,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 108,
        "failing_relevant": 0,
        "passing_tests": [
          "org.joda.time.field.TestFieldUtils::testSafeMultiplyLongInt"
        ],
        "failing_tests": [],
        "sum_entropy": -1.28552162570464,
        "mean_entropy": -0.005738935829038572,
        "pass_FIB_num": 12,
        "pass_FIB": [
          "Time_15_n45.txt",
          "Time_15_n36.txt",
          "Time_15_n32.txt",
          "Time_15_n21.txt",
          "Time_15_n33.txt",
          "Time_15_n41.txt",
          "Time_15_n23.txt",
          "Time_15_n4.txt",
          "Time_15_n16.txt",
          "Time_15_n6.txt",
          "Time_15_n46.txt",
          "Time_15_n1.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Multiply two values throwing an exception if overflow occurs.\n     * \n     * @param val1  the first value\n     * @param val2  the second value\n     * @return the new total\n     * @throws ArithmeticException if the value is too big or too small\n     * @since 1.2\n     */\n    public static long safeMultiply(long val1, int val2) {\n        switch (val2) {\n            case -1:\n                if (val1 == Long.MIN_VALUE) {\n                    throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n                }\n                return -val1;\n            case 0:\n                return 0L;\n            case 1:\n                return val1;\n        }\n        long total = val1 * val2;\n        if (total / val2 != val1) {\n            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        return total;\n    }\n",
        "index": 55,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 108,
        "failing_relevant": 0,
        "passing_tests": [
          "org.joda.time.field.TestFieldUtils::testSafeMultiplyLongInt"
        ],
        "failing_tests": [],
        "sum_entropy": -1.28552162570464,
        "mean_entropy": -0.005738935829038572,
        "pass_FIB_num": 12,
        "pass_FIB": [
          "Time_15_n45.txt",
          "Time_15_n36.txt",
          "Time_15_n32.txt",
          "Time_15_n21.txt",
          "Time_15_n33.txt",
          "Time_15_n41.txt",
          "Time_15_n23.txt",
          "Time_15_n4.txt",
          "Time_15_n16.txt",
          "Time_15_n6.txt",
          "Time_15_n46.txt",
          "Time_15_n1.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Multiply two values throwing an exception if overflow occurs.\n     * \n     * @param val1  the first value\n     * @param val2  the second value\n     * @return the new total\n     * @throws ArithmeticException if the value is too big or too small\n     * @since 1.2\n     */\n    public static long safeMultiply(long val1, int val2) {\n        switch (val2) {\n            case -1:\n                if (val1 == Long.MIN_VALUE) {\n                    throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n                }\n                return -val1;\n            case 0:\n                return 0L;\n            case 1:\n                return val1;\n        }\n        long total = val1 * val2;\n        if (total / val2 != val1) {\n            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        return total;\n    }\n",
        "index": 56,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 108,
        "failing_relevant": 0,
        "passing_tests": [
          "org.joda.time.field.TestFieldUtils::testSafeMultiplyLongInt"
        ],
        "failing_tests": [],
        "sum_entropy": -1.28552162570464,
        "mean_entropy": -0.005738935829038572,
        "pass_FIB_num": 12,
        "pass_FIB": [
          "Time_15_n45.txt",
          "Time_15_n36.txt",
          "Time_15_n32.txt",
          "Time_15_n21.txt",
          "Time_15_n33.txt",
          "Time_15_n41.txt",
          "Time_15_n23.txt",
          "Time_15_n4.txt",
          "Time_15_n16.txt",
          "Time_15_n6.txt",
          "Time_15_n46.txt",
          "Time_15_n1.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Multiply two values throwing an exception if overflow occurs.\n     * \n     * @param val1  the first value\n     * @param val2  the second value\n     * @return the new total\n     * @throws ArithmeticException if the value is too big or too small\n     * @since 1.2\n     */\n    public static long safeMultiply(long val1, int val2) {\n        switch (val2) {\n            case -1:\n                if (val1 == Long.MIN_VALUE) {\n                    throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n                }\n                return -val1;\n            case 0:\n                return 0L;\n            case 1:\n                return val1;\n        }\n        long total = val1 * val2;\n        if (total / val2 != val1) {\n            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        return total;\n    }\n",
        "index": 57,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 108,
        "failing_relevant": 0,
        "passing_tests": [
          "org.joda.time.field.TestFieldUtils::testSafeMultiplyLongInt"
        ],
        "failing_tests": [],
        "sum_entropy": -1.28552162570464,
        "mean_entropy": -0.005738935829038572,
        "pass_FIB_num": 12,
        "pass_FIB": [
          "Time_15_n45.txt",
          "Time_15_n36.txt",
          "Time_15_n32.txt",
          "Time_15_n21.txt",
          "Time_15_n33.txt",
          "Time_15_n41.txt",
          "Time_15_n23.txt",
          "Time_15_n4.txt",
          "Time_15_n16.txt",
          "Time_15_n6.txt",
          "Time_15_n46.txt",
          "Time_15_n1.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Multiply two values throwing an exception if overflow occurs.\n     * \n     * @param val1  the first value\n     * @param val2  the second value\n     * @return the new total\n     * @throws ArithmeticException if the value is too big or too small\n     * @since 1.2\n     */\n    public static long safeMultiply(long val1, int val2) {\n        switch (val2) {\n            case -1:\n                if (val1 == Long.MIN_VALUE) {\n                    throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n                }\n                return -val1;\n            case 0:\n                return 0L;\n            case 1:\n                return val1;\n        }\n        long total = val1 * val2;\n        if (total / val2 != val1) {\n            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        return total;\n    }\n",
        "index": 61,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 108,
        "failing_relevant": 0,
        "passing_tests": [
          "org.joda.time.field.TestFieldUtils::testSafeMultiplyLongInt"
        ],
        "failing_tests": [],
        "sum_entropy": -1.28552162570464,
        "mean_entropy": -0.005738935829038572,
        "pass_FIB_num": 12,
        "pass_FIB": [
          "Time_15_n45.txt",
          "Time_15_n36.txt",
          "Time_15_n32.txt",
          "Time_15_n21.txt",
          "Time_15_n33.txt",
          "Time_15_n41.txt",
          "Time_15_n23.txt",
          "Time_15_n4.txt",
          "Time_15_n16.txt",
          "Time_15_n6.txt",
          "Time_15_n46.txt",
          "Time_15_n1.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Multiply two values throwing an exception if overflow occurs.\n     * \n     * @param val1  the first value\n     * @param val2  the second value\n     * @return the new total\n     * @throws ArithmeticException if the value is too big or too small\n     * @since 1.2\n     */\n    public static long safeMultiply(long val1, int val2) {\n        switch (val2) {\n            case -1:\n                if (val1 == Long.MIN_VALUE) {\n                    throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n                }\n                return -val1;\n            case 0:\n                return 0L;\n            case 1:\n                return val1;\n        }\n        long total = val1 * val2;\n        if (total / val2 != val1) {\n            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        return total;\n    }\n",
        "index": 62,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 108,
        "failing_relevant": 0,
        "passing_tests": [
          "org.joda.time.field.TestFieldUtils::testSafeMultiplyLongInt"
        ],
        "failing_tests": [],
        "sum_entropy": -1.28552162570464,
        "mean_entropy": -0.005738935829038572,
        "pass_FIB_num": 12,
        "pass_FIB": [
          "Time_15_n45.txt",
          "Time_15_n36.txt",
          "Time_15_n32.txt",
          "Time_15_n21.txt",
          "Time_15_n33.txt",
          "Time_15_n41.txt",
          "Time_15_n23.txt",
          "Time_15_n4.txt",
          "Time_15_n16.txt",
          "Time_15_n6.txt",
          "Time_15_n46.txt",
          "Time_15_n1.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Multiply two values throwing an exception if overflow occurs.\n     * \n     * @param val1  the first value\n     * @param val2  the second value\n     * @return the new total\n     * @throws ArithmeticException if the value is too big or too small\n     * @since 1.2\n     */\n    public static long safeMultiply(long val1, int val2) {\n        switch (val2) {\n            case -1:\n                if (val1 == Long.MIN_VALUE) {\n                    throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n                }\n                return -val1;\n            case 0:\n                return 0L;\n            case 1:\n                return val1;\n        }\n        long total = val1 * val2;\n        if (total / val2 != val1) {\n            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        return total;\n    }\n",
        "index": 63,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 108,
        "failing_relevant": 0,
        "passing_tests": [
          "org.joda.time.field.TestFieldUtils::testSafeMultiplyLongInt"
        ],
        "failing_tests": [],
        "sum_entropy": -1.28552162570464,
        "mean_entropy": -0.005738935829038572,
        "pass_FIB_num": 12,
        "pass_FIB": [
          "Time_15_n45.txt",
          "Time_15_n36.txt",
          "Time_15_n32.txt",
          "Time_15_n21.txt",
          "Time_15_n33.txt",
          "Time_15_n41.txt",
          "Time_15_n23.txt",
          "Time_15_n4.txt",
          "Time_15_n16.txt",
          "Time_15_n6.txt",
          "Time_15_n46.txt",
          "Time_15_n1.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Multiply two values throwing an exception if overflow occurs.\n     * \n     * @param val1  the first value\n     * @param val2  the second value\n     * @return the new total\n     * @throws ArithmeticException if the value is too big or too small\n     * @since 1.2\n     */\n    public static long safeMultiply(long val1, int val2) {\n        switch (val2) {\n            case -1:\n                if (val1 == Long.MIN_VALUE) {\n                    throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n                }\n                return -val1;\n            case 0:\n                return 0L;\n            case 1:\n                return val1;\n        }\n        long total = val1 * val2;\n        if (total / val2 != val1) {\n            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        return total;\n    }\n",
        "index": 32,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 108,
        "failing_relevant": 0,
        "passing_tests": [
          "org.joda.time.field.TestFieldUtils::testSafeMultiplyLongInt"
        ],
        "failing_tests": [],
        "sum_entropy": -1.3657901239351697,
        "mean_entropy": -0.006097277338996294,
        "pass_FIB_num": 12,
        "pass_FIB": [
          "Time_15_n45.txt",
          "Time_15_n36.txt",
          "Time_15_n32.txt",
          "Time_15_n21.txt",
          "Time_15_n33.txt",
          "Time_15_n41.txt",
          "Time_15_n23.txt",
          "Time_15_n4.txt",
          "Time_15_n16.txt",
          "Time_15_n6.txt",
          "Time_15_n46.txt",
          "Time_15_n1.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Multiply two values throwing an exception if overflow occurs.\n     * \n     * @param val1  the first value\n     * @param val2  the second value\n     * @return the new total\n     * @throws ArithmeticException if the value is too big or too small\n     * @since 1.2\n     */\n    public static long safeMultiply(long val1, int val2) {\n        switch (val2) {\n            case -1:\n                if (val1 == Long.MIN_VALUE) {\n                    throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n                }\n                return -val1;\n            case 0:\n                return 0L;\n            case 1:\n                return val1;\n        }\n        long total = val1 * val2;\n        if (total / val2 != val1) {\n            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        return total;\n    }\n",
        "index": 33,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 108,
        "failing_relevant": 0,
        "passing_tests": [
          "org.joda.time.field.TestFieldUtils::testSafeMultiplyLongInt"
        ],
        "failing_tests": [],
        "sum_entropy": -1.3657901239351697,
        "mean_entropy": -0.006097277338996294,
        "pass_FIB_num": 12,
        "pass_FIB": [
          "Time_15_n45.txt",
          "Time_15_n36.txt",
          "Time_15_n32.txt",
          "Time_15_n21.txt",
          "Time_15_n33.txt",
          "Time_15_n41.txt",
          "Time_15_n23.txt",
          "Time_15_n4.txt",
          "Time_15_n16.txt",
          "Time_15_n6.txt",
          "Time_15_n46.txt",
          "Time_15_n1.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Multiply two values throwing an exception if overflow occurs.\n     * \n     * @param val1  the first value\n     * @param val2  the second value\n     * @return the new total\n     * @throws ArithmeticException if the value is too big or too small\n     * @since 1.2\n     */\n    public static long safeMultiply(long val1, int val2) {\n        switch (val2) {\n            case -1:\n                if (val1 == Long.MIN_VALUE) {\n                    throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n                }\n                return -val1;\n            case 0:\n                return 0L;\n            case 1:\n                return val1;\n        }\n        long total = val1 * val2;\n        if (total / val2 != val1) {\n            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        return total;\n    }\n",
        "index": 34,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 108,
        "failing_relevant": 0,
        "passing_tests": [
          "org.joda.time.field.TestFieldUtils::testSafeMultiplyLongInt"
        ],
        "failing_tests": [],
        "sum_entropy": -1.3657901239351697,
        "mean_entropy": -0.006097277338996294,
        "pass_FIB_num": 12,
        "pass_FIB": [
          "Time_15_n45.txt",
          "Time_15_n36.txt",
          "Time_15_n32.txt",
          "Time_15_n21.txt",
          "Time_15_n33.txt",
          "Time_15_n41.txt",
          "Time_15_n23.txt",
          "Time_15_n4.txt",
          "Time_15_n16.txt",
          "Time_15_n6.txt",
          "Time_15_n46.txt",
          "Time_15_n1.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Multiply two values throwing an exception if overflow occurs.\n     * \n     * @param val1  the first value\n     * @param val2  the second value\n     * @return the new total\n     * @throws ArithmeticException if the value is too big or too small\n     * @since 1.2\n     */\n    public static long safeMultiply(long val1, int val2) {\n        switch (val2) {\n            case -1:\n                if (val1 == Long.MIN_VALUE) {\n                    throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n                }\n                return -val1;\n            case 0:\n                return 0L;\n            case 1:\n                return val1;\n        }\n        long total = val1 * val2;\n        if (val2 != 0 && total / val2 != val1) {\n          throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        return total;\n    }\n",
        "index": 59,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 108,
        "failing_relevant": 0,
        "passing_tests": [
          "org.joda.time.field.TestFieldUtils::testSafeMultiplyLongInt"
        ],
        "failing_tests": [],
        "sum_entropy": -4.727983411120221,
        "mean_entropy": -0.020556449613566178,
        "pass_FIB_num": 12,
        "pass_FIB": [
          "Time_15_n45.txt",
          "Time_15_n36.txt",
          "Time_15_n32.txt",
          "Time_15_n21.txt",
          "Time_15_n33.txt",
          "Time_15_n41.txt",
          "Time_15_n23.txt",
          "Time_15_n4.txt",
          "Time_15_n16.txt",
          "Time_15_n6.txt",
          "Time_15_n46.txt",
          "Time_15_n1.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Multiply two values throwing an exception if overflow occurs.\n     * \n     * @param val1  the first value\n     * @param val2  the second value\n     * @return the new total\n     * @throws ArithmeticException if the value is too big or too small\n     * @since 1.2\n     */\n    public static long safeMultiply(long val1, int val2) {\n        if (val2 == -1 && val1 == Long.MIN_VALUE) {\n            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        \n        switch (val2) {\n            case -1:\n                return -val1;\n            case 0:\n                return 0L;\n            case 1:\n                return val1;\n        }\n        \n        long total = val1 * val2;\n        if (total / val2 != val1) {\n            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        return total;\n    }\n",
        "index": 22,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 108,
        "failing_relevant": 0,
        "passing_tests": [
          "org.joda.time.field.TestFieldUtils::testSafeMultiplyLongInt"
        ],
        "failing_tests": [],
        "sum_entropy": -5.245599340226902,
        "mean_entropy": -0.022610341983736647,
        "pass_FIB_num": 12,
        "pass_FIB": [
          "Time_15_n45.txt",
          "Time_15_n36.txt",
          "Time_15_n32.txt",
          "Time_15_n21.txt",
          "Time_15_n33.txt",
          "Time_15_n41.txt",
          "Time_15_n23.txt",
          "Time_15_n4.txt",
          "Time_15_n16.txt",
          "Time_15_n6.txt",
          "Time_15_n46.txt",
          "Time_15_n1.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Multiply two values throwing an exception if overflow occurs.\n     * \n     * @param val1  the first value\n     * @param val2  the second value\n     * @return the new total\n     * @throws ArithmeticException if the value is too big or too small\n     * @since 1.2\n     */\n    public static long safeMultiply(long val1, int val2) {\n        if (val2 == -1 && val1 == Long.MIN_VALUE) {\n            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        \n        switch (val2) {\n            case -1:\n                return -val1;\n            case 0:\n                return 0L;\n            case 1:\n                return val1;\n        }\n        \n        long total = val1 * val2;\n        if (total / val2 != val1) {\n            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        \n        return total;\n    }\n",
        "index": 23,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 108,
        "failing_relevant": 0,
        "passing_tests": [
          "org.joda.time.field.TestFieldUtils::testSafeMultiplyLongInt"
        ],
        "failing_tests": [],
        "sum_entropy": -5.282021546954501,
        "mean_entropy": -0.02266962037319528,
        "pass_FIB_num": 12,
        "pass_FIB": [
          "Time_15_n45.txt",
          "Time_15_n36.txt",
          "Time_15_n32.txt",
          "Time_15_n21.txt",
          "Time_15_n33.txt",
          "Time_15_n41.txt",
          "Time_15_n23.txt",
          "Time_15_n4.txt",
          "Time_15_n16.txt",
          "Time_15_n6.txt",
          "Time_15_n46.txt",
          "Time_15_n1.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Multiply two values throwing an exception if overflow occurs.\n     * \n     * @param val1  the first value\n     * @param val2  the second value\n     * @return the new total\n     * @throws ArithmeticException if the value is too big or too small\n     * @since 1.2\n     */\n    public static long safeMultiply(long val1, int val2) {\n        if ((val1 == Long.MIN_VALUE && val2 == -1) || (val1 == -1 && val2 == Long.MIN_VALUE)) {\n            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        \n        switch (val2) {\n            case -1:\n                return -val1;\n            case 0:\n                return 0L;\n            case 1:\n                return val1;\n        }\n        \n        long total = val1 * val2;\n        if (total / val2 != val1) {\n            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        return total;\n    }\n",
        "index": 96,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 108,
        "failing_relevant": 0,
        "passing_tests": [
          "org.joda.time.field.TestFieldUtils::testSafeMultiplyLongInt"
        ],
        "failing_tests": [],
        "sum_entropy": -6.631257209738874,
        "mean_entropy": -0.026847195181129043,
        "pass_FIB_num": 12,
        "pass_FIB": [
          "Time_15_n45.txt",
          "Time_15_n36.txt",
          "Time_15_n32.txt",
          "Time_15_n21.txt",
          "Time_15_n33.txt",
          "Time_15_n41.txt",
          "Time_15_n23.txt",
          "Time_15_n4.txt",
          "Time_15_n16.txt",
          "Time_15_n6.txt",
          "Time_15_n46.txt",
          "Time_15_n1.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      },
      {
        "patch": "\n    /**\n     * Multiply two values throwing an exception if overflow occurs.\n     * \n     * @param val1  the first value\n     * @param val2  the second value\n     * @return the new total\n     * @throws ArithmeticException if the value is too big or too small\n     * @since 1.2\n     */\n    public static long safeMultiply(long val1, int val2) {\n        if (val1 == Long.MIN_VALUE && val2 == -1) {\n            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        \n        switch (val2) {\n            case -1:\n                return -val1;\n            case 0:\n                return 0L;\n            case 1:\n                return val1;\n        }\n        \n        long total = val1 * val2;\n        if (total / val2 != val1) {\n          throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        \n        return total;\n    }\n",
        "index": 97,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 1,
        "passing_trigger": 1,
        "total_relevant": 108,
        "failing_relevant": 0,
        "passing_tests": [
          "org.joda.time.field.TestFieldUtils::testSafeMultiplyLongInt"
        ],
        "failing_tests": [],
        "sum_entropy": -7.809999706342322,
        "mean_entropy": -0.03351931204438765,
        "pass_FIB_num": 12,
        "pass_FIB": [
          "Time_15_n45.txt",
          "Time_15_n36.txt",
          "Time_15_n32.txt",
          "Time_15_n21.txt",
          "Time_15_n33.txt",
          "Time_15_n41.txt",
          "Time_15_n23.txt",
          "Time_15_n4.txt",
          "Time_15_n16.txt",
          "Time_15_n6.txt",
          "Time_15_n46.txt",
          "Time_15_n1.txt"
        ],
        "validation_wo": "plausible",
        "correctness": "correct"
      }
    ]
  }
}