{
  "Math_102_src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java_52_81": {
    "patches": [
      {
        "patch": "\n     /**\n     * {@inheritDoc}\n     * <p><strong>Note: </strong>This implementation rescales the \n     * <code>expected</code> array if necessary to ensure that the sum of the\n     * expected and observed counts are equal.</p>\n     * \n     * @param observed array of observed frequency counts\n     * @param expected array of expected frequency counts\n     * @return chi-square test statistic\n     * @throws IllegalArgumentException if preconditions are not met\n     * or length is less than 2\n     */\n    public double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException {\n        if ((expected.length < 2) || (expected.length != observed.length)) {\n            throw new IllegalArgumentException(\n                    \"observed, expected array lengths incorrect\");\n        }\n        if (!isPositive(expected) || !isNonNegative(observed)) {\n            throw new IllegalArgumentException(\n                \"observed counts must be non-negative and expected counts must be postive\");\n        }\n        double sumObserved = 0;\n        double sumExpected = 0;\n        for (int i = 0; i < observed.length; i++) {\n            sumObserved += observed[i];\n            sumExpected += expected[i];\n        }\n        if (sumObserved != sumExpected) {\n            double scale = sumObserved / sumExpected;\n            for (int i = 0; i < expected.length; i++) {\n                expected[i] *= scale;\n            }\n        }\n        double sumSq = 0.0d;\n        double dev = 0.0d;\n        for (int i = 0; i < observed.length; i++) {\n            dev = ((double) observed[i] - expected[i]);\n            sumSq += dev * dev / expected[i];\n        }\n        return sumSq;\n    }\n",
        "index": 59,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 6,
        "passing_trigger": 6,
        "total_relevant": 4,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.inference.ChiSquareFactoryTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.ChiSquareFactoryTest::testChiSquare",
          "org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquare",
          "org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquare"
        ],
        "failing_tests": [],
        "sum_entropy": -7.330726530424495,
        "mean_entropy": -0.01944489795868566,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n     /**\n     * {@inheritDoc}\n     * <p><strong>Note: </strong>This implementation rescales the \n     * <code>expected</code> array if necessary to ensure that the sum of the\n     * expected and observed counts are equal.</p>\n     * \n     * @param observed array of observed frequency counts\n     * @param expected array of expected frequency counts\n     * @return chi-square test statistic\n     * @throws IllegalArgumentException if preconditions are not met\n     * or length is less than 2\n     */\n    public double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException {\n        if ((expected.length < 2) || (expected.length != observed.length)) {\n            throw new IllegalArgumentException(\n                    \"observed, expected array lengths incorrect\");\n        }\n        if (!isPositive(expected) || !isNonNegative(observed)) {\n            throw new IllegalArgumentException(\n                \"observed counts must be non-negative and expected counts must be postive\");\n        }\n        double sumObserved = 0;\n        double sumExpected = 0;\n        for (int i = 0; i < observed.length; i++) {\n            sumObserved += observed[i];\n            sumExpected += expected[i];\n        }\n        if (sumObserved != sumExpected) {\n            double rescaleFactor = sumObserved / sumExpected;\n            for (int i = 0; i < expected.length; i++) {\n                expected[i] *= rescaleFactor;\n            }\n        }\n        double sumSq = 0.0d;\n        double dev = 0.0d;\n        for (int i = 0; i < observed.length; i++) {\n            dev = ((double) observed[i] - expected[i]);\n            sumSq += dev * dev / expected[i];\n        }\n        return sumSq;\n    }\n",
        "index": 30,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 6,
        "passing_trigger": 6,
        "total_relevant": 4,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.inference.ChiSquareFactoryTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.ChiSquareFactoryTest::testChiSquare",
          "org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquare",
          "org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquare"
        ],
        "failing_tests": [],
        "sum_entropy": -7.51668175767424,
        "mean_entropy": -0.01972882351095601,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * {@inheritDoc}\n     * <p><strong>Note: </strong>This implementation rescales the \n     * <code>expected</code> array if necessary to ensure that the sum of the\n     * expected and observed counts are equal.</p>\n     * \n     * @param observed array of observed frequency counts\n     * @param expected array of expected frequency counts\n     * @return chi-square test statistic\n     * @throws IllegalArgumentException if preconditions are not met\n     * or length is less than 2\n     */\n    public double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException {\n        if ((expected.length < 2) || (expected.length != observed.length)) {\n            throw new IllegalArgumentException(\n                    \"observed, expected array lengths incorrect\");\n        }\n        if (!isPositive(expected) || !isNonNegative(observed)) {\n            throw new IllegalArgumentException(\n                \"observed counts must be non-negative and expected counts must be positive\");\n        }\n        double sumObserved = 0;\n        for (long obs : observed) {\n            sumObserved += obs;\n        }\n        double sumExpected = 0;\n        for (double exp : expected) {\n            sumExpected += exp;\n        }\n        if (sumObserved != sumExpected) {\n            double rescaleFactor = sumObserved / sumExpected;\n            for (int i = 0; i < expected.length; i++) {\n                expected[i] *= rescaleFactor;\n            }\n        }\n        double sumSq = 0.0d;\n        double dev = 0.0d;\n        for (int i = 0; i < observed.length; i++) {\n            dev = ((double) observed[i] - expected[i]);\n            sumSq += dev * dev / expected[i];\n        }\n        return sumSq;\n    }\n",
        "index": 16,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 6,
        "passing_trigger": 6,
        "total_relevant": 4,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.inference.ChiSquareFactoryTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.ChiSquareFactoryTest::testChiSquare",
          "org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquare",
          "org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquare"
        ],
        "failing_tests": [],
        "sum_entropy": -7.77069459276639,
        "mean_entropy": -0.020395523865528585,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * {@inheritDoc}\n     * <p><strong>Note: </strong>This implementation rescales the \n     * <code>expected</code> array if necessary to ensure that the sum of the\n     * expected and observed counts are equal.</p>\n     * \n     * @param observed array of observed frequency counts\n     * @param expected array of expected frequency counts\n     * @return chi-square test statistic\n     * @throws IllegalArgumentException if preconditions are not met\n     * or length is less than 2\n     */\n    public double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException {\n        if ((expected.length < 2) || (expected.length != observed.length)) {\n            throw new IllegalArgumentException(\n                    \"observed, expected array lengths incorrect\");\n        }\n        if (!isPositive(expected) || !isNonNegative(observed)) {\n            throw new IllegalArgumentException(\n                \"observed counts must be non-negative and expected counts must be postive\");\n        }\n        double sumObserved = 0;\n        double sumExpected = 0;\n        for (int i = 0; i < observed.length; i++) {\n            sumObserved += observed[i];\n            sumExpected += expected[i];\n        }\n        if (sumObserved != sumExpected) {\n            double rescaleFactor = sumObserved / sumExpected;\n            for (int i = 0; i < expected.length; i++) {\n                expected[i] *= rescaleFactor;\n            }\n        }\n        double sumSq = 0.0d;\n        double dev = 0.0d;\n        for (int i = 0; i < observed.length; i++) {\n            dev = ((double) observed[i] - expected[i]);\n            sumSq += dev * dev / expected[i];\n        }\n        return sumSq;\n    }\n",
        "index": 41,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 6,
        "passing_trigger": 6,
        "total_relevant": 4,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.inference.ChiSquareFactoryTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.ChiSquareFactoryTest::testChiSquare",
          "org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquare",
          "org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquare"
        ],
        "failing_tests": [],
        "sum_entropy": -7.814883727337449,
        "mean_entropy": -0.02051150584603005,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * {@inheritDoc}\n     * <p><strong>Note: </strong>This implementation rescales the \n     * <code>expected</code> array if necessary to ensure that the sum of the\n     * expected and observed counts are equal.</p>\n     * \n     * @param observed array of observed frequency counts\n     * @param expected array of expected frequency counts\n     * @return chi-square test statistic\n     * @throws IllegalArgumentException if preconditions are not met\n     * or length is less than 2\n     */\n    public double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException {\n        if ((expected.length < 2) || (expected.length != observed.length)) {\n            throw new IllegalArgumentException(\n                    \"observed, expected array lengths incorrect\");\n        }\n        if (!isPositive(expected) || !isNonNegative(observed)) {\n            throw new IllegalArgumentException(\n                \"observed counts must be non-negative and expected counts must be positive\");\n        }\n        \n        double sumObserved = 0;\n        for (long obs : observed) {\n            sumObserved += obs;\n        }\n        \n        double sumExpected = 0;\n        for (double exp : expected) {\n            sumExpected += exp;\n        }\n        \n        if (sumObserved != sumExpected) {\n            double rescaleFactor = sumObserved / sumExpected;\n            for (int i = 0; i < expected.length; i++) {\n                expected[i] *= rescaleFactor;\n            }\n        }\n        \n        double sumSq = 0.0d;\n        double dev = 0.0d;\n        for (int i = 0; i < observed.length; i++) {\n            dev = ((double) observed[i] - expected[i]);\n            sumSq += dev * dev / expected[i];\n        }\n        return sumSq;\n    }\n",
        "index": 49,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 6,
        "passing_trigger": 6,
        "total_relevant": 4,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.inference.ChiSquareFactoryTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.ChiSquareFactoryTest::testChiSquare",
          "org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquare",
          "org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquare"
        ],
        "failing_tests": [],
        "sum_entropy": -8.160340062468306,
        "mean_entropy": -0.021195688473943652,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * {@inheritDoc}\n     * <p><strong>Note: </strong>This implementation rescales the \n     * <code>expected</code> array if necessary to ensure that the sum of the\n     * expected and observed counts are equal.</p>\n     * \n     * @param observed array of observed frequency counts\n     * @param expected array of expected frequency counts\n     * @return chi-square test statistic\n     * @throws IllegalArgumentException if preconditions are not met\n     * or length is less than 2\n     */\n    public double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException {\n        if ((expected.length < 2) || (expected.length != observed.length)) {\n            throw new IllegalArgumentException(\n                    \"observed, expected array lengths incorrect\");\n        }\n        if (!isPositive(expected) || !isNonNegative(observed)) {\n            throw new IllegalArgumentException(\n                \"observed counts must be non-negative and expected counts must be positive\");\n        }\n        \n        double sumObserved = 0;\n        for (long obs : observed) {\n            sumObserved += obs;\n        }\n        \n        double sumExpected = 0;\n        for (double exp : expected) {\n            sumExpected += exp;\n        }\n        \n        if (sumObserved != sumExpected) {\n            double scale = sumObserved / sumExpected;\n            for (int i = 0; i < expected.length; i++) {\n                expected[i] *= scale;\n            }\n        }\n        \n        double sumSq = 0.0d;\n        double dev = 0.0d;\n        for (int i = 0; i < observed.length; i++) {\n            dev = ((double) observed[i] - expected[i]);\n            sumSq += dev * dev / expected[i];\n        }\n        \n        return sumSq;\n    }\n",
        "index": 5,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 6,
        "passing_trigger": 6,
        "total_relevant": 4,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.inference.ChiSquareFactoryTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.ChiSquareFactoryTest::testChiSquare",
          "org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquare",
          "org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquare"
        ],
        "failing_tests": [],
        "sum_entropy": -8.422398509826394,
        "mean_entropy": -0.02204816363828899,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n     /**\n     * {@inheritDoc}\n     * <p><strong>Note: </strong>This implementation rescales the \n     * <code>expected</code> array if necessary to ensure that the sum of the\n     * expected and observed counts are equal.</p>\n     * \n     * @param observed array of observed frequency counts\n     * @param expected array of expected frequency counts\n     * @return chi-square test statistic\n     * @throws IllegalArgumentException if preconditions are not met\n     * or length is less than 2\n     */\n    public double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException {\n        if ((expected.length < 2) || (expected.length != observed.length)) {\n            throw new IllegalArgumentException(\n                    \"observed, expected array lengths incorrect\");\n        }\n        if (!isPositive(expected) || !isNonNegative(observed)) {\n            throw new IllegalArgumentException(\n                \"observed counts must be non-negative and expected counts must be postive\");\n        }\n        double sumObserved = 0;\n        for (long obs : observed) {\n            sumObserved += obs;\n        }\n        double sumExpected = 0;\n        for (double exp : expected) {\n            sumExpected += exp;\n        }\n        if (sumObserved != sumExpected) {\n            double scale = sumObserved / sumExpected;\n            for (int i = 0; i < expected.length; i++) {\n                expected[i] *= scale;\n            }\n        }\n        double sumSq = 0.0d;\n        double dev = 0.0d;\n        for (int i = 0; i < observed.length; i++) {\n            dev = ((double) observed[i] - expected[i]);\n            sumSq += dev * dev / expected[i];\n        }\n        return sumSq;\n    }\n",
        "index": 28,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 6,
        "passing_trigger": 6,
        "total_relevant": 4,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.inference.ChiSquareFactoryTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.ChiSquareFactoryTest::testChiSquare",
          "org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquare",
          "org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquare"
        ],
        "failing_tests": [],
        "sum_entropy": -8.442376818346947,
        "mean_entropy": -0.022334330207267057,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * {@inheritDoc}\n     * <p><strong>Note: </strong>This implementation rescales the \n     * <code>expected</code> array if necessary to ensure that the sum of the\n     * expected and observed counts are equal.</p>\n     * \n     * @param observed array of observed frequency counts\n     * @param expected array of expected frequency counts\n     * @return chi-square test statistic\n     * @throws IllegalArgumentException if preconditions are not met\n     * or length is less than 2\n     */\n    public double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException {\n        if ((expected.length < 2) || (expected.length != observed.length)) {\n            throw new IllegalArgumentException(\n                    \"observed, expected array lengths incorrect\");\n        }\n        if (!isPositive(expected) || !isNonNegative(observed)) {\n            throw new IllegalArgumentException(\n                \"observed counts must be non-negative and expected counts must be postive\");\n        }\n        double sumObserved = 0;\n        for (long obs : observed) {\n            sumObserved += obs;\n        }\n        double sumExpected = 0;\n        for (double exp : expected) {\n            sumExpected += exp;\n        }\n        if (sumObserved != sumExpected) {\n            for (int i = 0; i < expected.length; i++) {\n                expected[i] = expected[i] * sumObserved / sumExpected;\n            }\n        }\n        double sumSq = 0.0d;\n        double dev = 0.0d;\n        for (int i = 0; i < observed.length; i++) {\n            dev = ((double) observed[i] - expected[i]);\n            sumSq += dev * dev / expected[i];\n        }\n        return sumSq;\n    }\n",
        "index": 42,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 6,
        "passing_trigger": 6,
        "total_relevant": 4,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.inference.ChiSquareFactoryTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.ChiSquareFactoryTest::testChiSquare",
          "org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquare",
          "org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquare"
        ],
        "failing_tests": [],
        "sum_entropy": -8.555524769255403,
        "mean_entropy": -0.02275405523738139,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * {@inheritDoc}\n     * <p><strong>Note: </strong>This implementation rescales the \n     * <code>expected</code> array if necessary to ensure that the sum of the\n     * expected and observed counts are equal.</p>\n     * \n     * @param observed array of observed frequency counts\n     * @param expected array of expected frequency counts\n     * @return chi-square test statistic\n     * @throws IllegalArgumentException if preconditions are not met\n     * or length is less than 2\n     */\n    public double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException {\n        if ((expected.length < 2) || (expected.length != observed.length)) {\n            throw new IllegalArgumentException(\n                    \"observed, expected array lengths incorrect\");\n        }\n        if (!isPositive(expected) || !isNonNegative(observed)) {\n            throw new IllegalArgumentException(\n                \"observed counts must be non-negative and expected counts must be positive\");\n        }\n        \n        double sumObserved = 0;\n        for (long obs : observed) {\n            sumObserved += obs;\n        }\n        \n        double sumExpected = 0;\n        for (double exp : expected) {\n            sumExpected += exp;\n        }\n        \n        if (sumObserved != sumExpected) {\n            double ratio = sumObserved / sumExpected;\n            for (int i = 0; i < expected.length; i++) {\n                expected[i] *= ratio;\n            }\n        }\n        \n        double sumSq = 0.0d;\n        double dev = 0.0d;\n        for (int i = 0; i < observed.length; i++) {\n            dev = ((double) observed[i] - expected[i]);\n            sumSq += dev * dev / expected[i];\n        }\n        return sumSq;\n    }\n",
        "index": 14,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 6,
        "passing_trigger": 6,
        "total_relevant": 4,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.inference.ChiSquareFactoryTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.ChiSquareFactoryTest::testChiSquare",
          "org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquare",
          "org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquare"
        ],
        "failing_tests": [],
        "sum_entropy": -8.672674384241347,
        "mean_entropy": -0.022762924893021907,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * {@inheritDoc}\n     * <p><strong>Note: </strong>This implementation rescales the \n     * <code>expected</code> array if necessary to ensure that the sum of the\n     * expected and observed counts are equal.</p>\n     * \n     * @param observed array of observed frequency counts\n     * @param expected array of expected frequency counts\n     * @return chi-square test statistic\n     * @throws IllegalArgumentException if preconditions are not met\n     * or length is less than 2\n     */\n    public double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException {\n        if ((expected.length < 2) || (expected.length != observed.length)) {\n            throw new IllegalArgumentException(\n                    \"observed, expected array lengths incorrect\");\n        }\n        if (!isPositive(expected) || !isNonNegative(observed)) {\n            throw new IllegalArgumentException(\n                \"observed counts must be non-negative and expected counts must be positive\");\n        }\n        \n        double sumObserved = 0;\n        double sumExpected = 0;\n        for (int i = 0; i < observed.length; i++) {\n            sumObserved += observed[i];\n            sumExpected += expected[i];\n        }\n        \n        if (sumObserved != sumExpected) {\n            double rescaleFactor = sumObserved / sumExpected;\n            for (int i = 0; i < expected.length; i++) {\n                expected[i] *= rescaleFactor;\n            }\n        }\n        \n        double sumSq = 0.0d;\n        double dev = 0.0d;\n        for (int i = 0; i < observed.length; i++) {\n            dev = ((double) observed[i] - expected[i]);\n            sumSq += dev * dev / expected[i];\n        }\n        \n        return sumSq;\n    }\n",
        "index": 51,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 6,
        "passing_trigger": 6,
        "total_relevant": 4,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.inference.ChiSquareFactoryTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.ChiSquareFactoryTest::testChiSquare",
          "org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquare",
          "org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquare"
        ],
        "failing_tests": [],
        "sum_entropy": -8.970325047981104,
        "mean_entropy": -0.023360221479117458,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * {@inheritDoc}\n     * <p><strong>Note: </strong>This implementation rescales the \n     * <code>expected</code> array if necessary to ensure that the sum of the\n     * expected and observed counts are equal.</p>\n     * \n     * @param observed array of observed frequency counts\n     * @param expected array of expected frequency counts\n     * @return chi-square test statistic\n     * @throws IllegalArgumentException if preconditions are not met\n     * or length is less than 2\n     */\n    public double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException {\n        if ((expected.length < 2) || (expected.length != observed.length)) {\n            throw new IllegalArgumentException(\n                    \"observed, expected array lengths incorrect\");\n        }\n        if (!isPositive(expected) || !isNonNegative(observed)) {\n            throw new IllegalArgumentException(\n                \"observed counts must be non-negative and expected counts must be positive\");\n        }\n        double sumObserved = 0.0d;\n        for (long obs : observed) {\n            sumObserved += obs;\n        }\n        double sumExpected = 0.0d;\n        for (double exp : expected) {\n            sumExpected += exp;\n        }\n        if (sumObserved != sumExpected) {\n            double rescaleFactor = sumObserved / sumExpected;\n            for (int i = 0; i < expected.length; i++) {\n                expected[i] *= rescaleFactor;\n            }\n        }\n        double sumSq = 0.0d;\n        double dev = 0.0d;\n        for (int i = 0; i < observed.length; i++) {\n            dev = ((double) observed[i] - expected[i]);\n            sumSq += dev * dev / expected[i];\n        }\n        return sumSq;\n    }\n",
        "index": 1,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 6,
        "passing_trigger": 6,
        "total_relevant": 4,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.inference.ChiSquareFactoryTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.ChiSquareFactoryTest::testChiSquare",
          "org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquare",
          "org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquare"
        ],
        "failing_tests": [],
        "sum_entropy": -9.059746807244622,
        "mean_entropy": -0.023410198468332356,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n     /**\n     * {@inheritDoc}\n     * <p><strong>Note: </strong>This implementation rescales the \n     * <code>expected</code> array if necessary to ensure that the sum of the\n     * expected and observed counts are equal.</p>\n     * \n     * @param observed array of observed frequency counts\n     * @param expected array of expected frequency counts\n     * @return chi-square test statistic\n     * @throws IllegalArgumentException if preconditions are not met\n     * or length is less than 2\n     */\n    public double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException {\n        if ((expected.length < 2) || (expected.length != observed.length)) {\n            throw new IllegalArgumentException(\n                    \"observed, expected array lengths incorrect\");\n        }\n        if (!isPositive(expected) || !isNonNegative(observed)) {\n            throw new IllegalArgumentException(\n                \"observed counts must be non-negative and expected counts must be postive\");\n        }\n        double sumObserved = 0;\n        for (long obs : observed) {\n            sumObserved += obs;\n        }\n        double sumExpected = 0;\n        for (double exp : expected) {\n            sumExpected += exp;\n        }\n        if (sumObserved != sumExpected) {\n            for (int i = 0; i < expected.length; i++) {\n                expected[i] *= sumObserved / sumExpected;\n            }\n        }\n        double sumSq = 0.0d;\n        double dev = 0.0d;\n        for (int i = 0; i < observed.length; i++) {\n            dev = ((double) observed[i] - expected[i]);\n            sumSq += dev * dev / expected[i];\n        }\n        return sumSq;\n    }\n",
        "index": 55,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 6,
        "passing_trigger": 6,
        "total_relevant": 4,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.inference.ChiSquareFactoryTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.ChiSquareFactoryTest::testChiSquare",
          "org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquare",
          "org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquare"
        ],
        "failing_tests": [],
        "sum_entropy": -9.298946335226372,
        "mean_entropy": -0.02499716756781283,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * {@inheritDoc}\n     * <p><strong>Note: </strong>This implementation rescales the \n     * <code>expected</code> array if necessary to ensure that the sum of the\n     * expected and observed counts are equal.</p>\n     * \n     * @param observed array of observed frequency counts\n     * @param expected array of expected frequency counts\n     * @return chi-square test statistic\n     * @throws IllegalArgumentException if preconditions are not met\n     * or length is less than 2\n     */\n    public double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException {\n        if ((expected.length < 2) || (expected.length != observed.length)) {\n            throw new IllegalArgumentException(\n                    \"observed, expected array lengths incorrect\");\n        }\n        if (!isPositive(expected) || !isNonNegative(observed)) {\n            throw new IllegalArgumentException(\n                \"observed counts must be non-negative and expected counts must be positive\");\n        }\n        \n        double sumObserved = 0;\n        double sumExpected = 0;\n        \n        for (int i = 0; i < observed.length; i++) {\n            sumObserved += observed[i];\n            sumExpected += expected[i];\n        }\n        \n        if (sumObserved != sumExpected) {\n            double ratio = sumObserved / sumExpected;\n            for (int i = 0; i < expected.length; i++) {\n                expected[i] *= ratio;\n            }\n        }\n        \n        double sumSq = 0.0d;\n        double dev = 0.0d;\n        for (int i = 0; i < observed.length; i++) {\n            dev = ((double) observed[i] - expected[i]);\n            sumSq += dev * dev / expected[i];\n        }\n        \n        return sumSq;\n    }\n",
        "index": 40,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 6,
        "passing_trigger": 6,
        "total_relevant": 4,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.inference.ChiSquareFactoryTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.ChiSquareFactoryTest::testChiSquare",
          "org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquare",
          "org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquare"
        ],
        "failing_tests": [],
        "sum_entropy": -9.633608744337424,
        "mean_entropy": -0.025285062321095602,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * {@inheritDoc}\n     * <p><strong>Note: </strong>This implementation rescales the \n     * <code>expected</code> array if necessary to ensure that the sum of the\n     * expected and observed counts are equal.</p>\n     * \n     * @param observed array of observed frequency counts\n     * @param expected array of expected frequency counts\n     * @return chi-square test statistic\n     * @throws IllegalArgumentException if preconditions are not met\n     * or length is less than 2\n     */\n    public double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException {\n        if ((expected.length < 2) || (expected.length != observed.length)) {\n            throw new IllegalArgumentException(\n                    \"observed, expected array lengths incorrect\");\n        }\n        if (!isPositive(expected) || !isNonNegative(observed)) {\n            throw new IllegalArgumentException(\n                \"observed counts must be non-negative and expected counts must be positive\");\n        }\n        \n        double sumObserved = 0;\n        for (long obs : observed) {\n            sumObserved += obs;\n        }\n        \n        double sumExpected = 0;\n        for (double exp : expected) {\n            sumExpected += exp;\n        }\n        \n        if (sumObserved != sumExpected) {\n            for (int i = 0; i < expected.length; i++) {\n                expected[i] *= sumObserved / sumExpected;\n            }\n        }\n        \n        double sumSq = 0.0d;\n        double dev = 0.0d;\n        for (int i = 0; i < observed.length; i++) {\n            dev = ((double) observed[i] - expected[i]);\n            sumSq += dev * dev / expected[i];\n        }\n        \n        return sumSq;\n    }\n",
        "index": 56,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 6,
        "passing_trigger": 6,
        "total_relevant": 4,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.inference.ChiSquareFactoryTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.ChiSquareFactoryTest::testChiSquare",
          "org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquare",
          "org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquare"
        ],
        "failing_tests": [],
        "sum_entropy": -9.585178836043655,
        "mean_entropy": -0.02549249690437142,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * {@inheritDoc}\n     * <p><strong>Note: </strong>This implementation rescales the \n     * <code>expected</code> array if necessary to ensure that the sum of the\n     * expected and observed counts are equal.</p>\n     * \n     * @param observed array of observed frequency counts\n     * @param expected array of expected frequency counts\n     * @return chi-square test statistic\n     * @throws IllegalArgumentException if preconditions are not met\n     * or length is less than 2\n     */\n    public double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException {\n        if ((expected.length < 2) || (expected.length != observed.length)) {\n            throw new IllegalArgumentException(\n                    \"observed, expected array lengths incorrect\");\n        }\n        if (!isPositive(expected) || !isNonNegative(observed)) {\n            throw new IllegalArgumentException(\n                \"observed counts must be non-negative and expected counts must be positive\");\n        }\n        \n        // Rescale the expected array if necessary\n        double sumObserved = 0;\n        double sumExpected = 0;\n        for (int i = 0; i < observed.length; i++) {\n            sumObserved += observed[i];\n            sumExpected += expected[i];\n        }\n        if (sumObserved != sumExpected) {\n            double rescaleFactor = sumObserved / sumExpected;\n            for (int i = 0; i < expected.length; i++) {\n                expected[i] *= rescaleFactor;\n            }\n        }\n        \n        double sumSq = 0.0d;\n        double dev = 0.0d;\n        for (int i = 0; i < observed.length; i++) {\n            dev = ((double) observed[i] - expected[i]);\n            sumSq += dev * dev / expected[i];\n        }\n        \n        return sumSq;\n    }\n",
        "index": 17,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 6,
        "passing_trigger": 6,
        "total_relevant": 4,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.inference.ChiSquareFactoryTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.ChiSquareFactoryTest::testChiSquare",
          "org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquare",
          "org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquare"
        ],
        "failing_tests": [],
        "sum_entropy": -10.245346160027987,
        "mean_entropy": -0.02606958310439691,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * {@inheritDoc}\n     * <p><strong>Note: </strong>This implementation rescales the \n     * <code>expected</code> array if necessary to ensure that the sum of the\n     * expected and observed counts are equal.</p>\n     * \n     * @param observed array of observed frequency counts\n     * @param expected array of expected frequency counts\n     * @return chi-square test statistic\n     * @throws IllegalArgumentException if preconditions are not met\n     * or length is less than 2\n     */\n    public double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException {\n        if ((expected.length < 2) || (expected.length != observed.length)) {\n            throw new IllegalArgumentException(\n                    \"observed, expected array lengths incorrect\");\n        }\n        if (!isPositive(expected) || !isNonNegative(observed)) {\n            throw new IllegalArgumentException(\n                \"observed counts must be non-negative and expected counts must be postive\");\n        }\n        double sumSq = 0.0d;\n        double dev = 0.0d;\n        \n        // Rescale expected array if necessary\n        double sumObserved = 0;\n        double sumExpected = 0;\n        for (int i = 0; i < observed.length; i++) {\n            sumObserved += observed[i];\n            sumExpected += expected[i];\n        }\n        \n        if (sumObserved != sumExpected) {\n            double scale = sumObserved / sumExpected;\n            for (int i = 0; i < observed.length; i++) {\n                expected[i] *= scale;\n            }\n        }\n        \n        for (int i = 0; i < observed.length; i++) {\n            dev = ((double) observed[i] - expected[i]);\n            sumSq += dev * dev / expected[i];\n        }\n        \n        return sumSq;\n    }\n",
        "index": 35,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 6,
        "passing_trigger": 6,
        "total_relevant": 4,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.inference.ChiSquareFactoryTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.ChiSquareFactoryTest::testChiSquare",
          "org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquare",
          "org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquare"
        ],
        "failing_tests": [],
        "sum_entropy": -16.124732514266963,
        "mean_entropy": -0.04134546798529991,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    public double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException {\n        if ((expected.length < 2) || (expected.length != observed.length)) {\n            throw new IllegalArgumentException(\n                    \"observed, expected array lengths incorrect\");\n        }\n        if (!isPositive(expected) || !isNonNegative(observed)) {\n            throw new IllegalArgumentException(\n                \"observed counts must be non-negative and expected counts must be positive\");\n        }\n        \n        // Rescale the expected array if necessary\n        double sumObserved = 0;\n        double sumExpected = 0;\n        for (int i = 0; i < observed.length; i++) {\n            sumObserved += observed[i];\n            sumExpected += expected[i];\n        }\n        \n        if (sumObserved != sumExpected) {\n            for (int i = 0; i < expected.length; i++) {\n                expected[i] *= sumObserved / sumExpected;\n            }\n        }\n        \n        double sumSq = 0.0d;\n        double dev = 0.0d;\n        for (int i = 0; i < observed.length; i++) {\n            dev = ((double) observed[i] - expected[i]);\n            sumSq += dev * dev / expected[i];\n        }\n        return sumSq;\n    }\n",
        "index": 15,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 6,
        "passing_trigger": 6,
        "total_relevant": 4,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.inference.ChiSquareFactoryTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.ChiSquareFactoryTest::testChiSquare",
          "org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquare",
          "org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquare"
        ],
        "failing_tests": [],
        "sum_entropy": -13.666079216798252,
        "mean_entropy": -0.05042833659335148,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * {@inheritDoc}\n     * <p><strong>Note: </strong>This implementation rescales the \n     * <code>expected</code> array if necessary to ensure that the sum of the\n     * expected and observed counts are equal.</p>\n     * \n     * @param observed array of observed frequency counts\n     * @param expected array of expected frequency counts\n     * @return chi-square test statistic\n     * @throws IllegalArgumentException if preconditions are not met\n     * or length is less than 2\n     */\n    public double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException {\n        if ((expected.length < 2) || (expected.length != observed.length)) {\n            throw new IllegalArgumentException(\n                    \"observed, expected array lengths incorrect\");\n        }\n        if (!isPositive(expected) || !isNonNegative(observed)) {\n            throw new IllegalArgumentException(\n                \"observed counts must be non-negative and expected counts must be positive\");\n        }\n\n        // Rescaling the expected array if sum(observed) is not equal to sum(expected)\n        double observedSum = 0;\n        for (long obs : observed) {\n            observedSum += obs;\n        }\n\n        double expectedSum = 0;\n        for (double exp : expected) {\n            expectedSum += exp;\n        }\n\n        if (Math.abs(observedSum - expectedSum) > 1E-10) {\n            double scale = observedSum / expectedSum;\n            for (int i = 0; i < expected.length; i++) {\n                expected[i] *= scale;\n            }\n        }\n\n        double sumSq = 0.0d;\n        double dev = 0.0d;\n        for (int i = 0; i < observed.length; i++) {\n            dev = ((double) observed[i] - expected[i]);\n            sumSq += dev * dev / expected[i];\n        }\n        return sumSq;\n    }\n",
        "index": 21,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 6,
        "passing_trigger": 6,
        "total_relevant": 4,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.inference.ChiSquareFactoryTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.ChiSquareFactoryTest::testChiSquare",
          "org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquare",
          "org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquare"
        ],
        "failing_tests": [],
        "sum_entropy": -22.47458046354098,
        "mean_entropy": -0.05590691657597259,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    /**\n     * {@inheritDoc}\n     * <p><strong>Note: </strong>This implementation rescales the \n     * <code>expected</code> array if necessary to ensure that the sum of the\n     * expected and observed counts are equal.</p>\n     * \n     * @param observed array of observed frequency counts\n     * @param expected array of expected frequency counts\n     * @return chi-square test statistic\n     * @throws IllegalArgumentException if preconditions are not met\n     * or length is less than 2\n     */\n    public double chiSquare(double[] expected, long[] observed)\n            throws IllegalArgumentException {\n        if ((expected.length < 2) || (expected.length != observed.length)) {\n            throw new IllegalArgumentException(\n                    \"observed, expected array lengths incorrect\");\n        }\n        if (!isPositive(expected) || !isNonNegative(observed)) {\n            throw new IllegalArgumentException(\n                \"observed counts must be non-negative and expected counts must be positive\");\n        }\n        double sumExpected = 0.0d;\n        double sumObserved = 0.0d;\n        for (int i = 0; i < observed.length; i++) {\n            sumExpected += expected[i];\n            sumObserved += observed[i];\n        }\n        \n        if (sumExpected != sumObserved) {\n            // Rescale expected array\n            double scale = sumObserved / sumExpected;\n            for (int i = 0; i < expected.length; i++) {\n                expected[i] *= scale;\n            }\n        }\n\n        double sumSq = 0.0d;\n        double dev = 0.0d;\n        for (int i = 0; i < observed.length; i++) {\n            dev = ((double) observed[i] - expected[i]);\n            sumSq += dev * dev / expected[i];\n        }\n        return sumSq;\n    }\n",
        "index": 4,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 6,
        "passing_trigger": 6,
        "total_relevant": 4,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.inference.ChiSquareFactoryTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.ChiSquareFactoryTest::testChiSquare",
          "org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquare",
          "org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquare"
        ],
        "failing_tests": [],
        "sum_entropy": -22.06741988849485,
        "mean_entropy": -0.05658312791921757,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "wrong"
      },
      {
        "patch": "\n    public double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException {\n        if ((expected.length < 2) || (expected.length != observed.length)) {\n            throw new IllegalArgumentException(\n                    \"observed, expected array lengths incorrect\");\n        }\n        if (!isPositive(expected) || !isNonNegative(observed)) {\n            throw new IllegalArgumentException(\n                \"observed counts must be non-negative and expected counts must be postive\");\n        }\n        double sumObserved = 0;\n        double sumExpected = 0;\n        \n        for (int i = 0; i < observed.length; i++) {\n            sumObserved += observed[i];\n            sumExpected += expected[i];\n        }\n        \n        if (sumObserved != sumExpected) {\n            // Rescale the expected array\n            for (int i = 0; i < expected.length; i++) {\n                expected[i] = expected[i] * sumObserved / sumExpected;\n            }\n        }\n        \n        double sumSq = 0.0d;\n        double dev = 0.0d;\n        \n        for (int i = 0; i < observed.length; i++) {\n            dev = observed[i] - expected[i];\n            sumSq += dev * dev / expected[i];\n        }\n        \n        return sumSq;\n    }\n",
        "index": 18,
        "validation": "plausible",
        "errors": [],
        "total_trigger": 6,
        "passing_trigger": 6,
        "total_relevant": 4,
        "failing_relevant": 0,
        "passing_tests": [
          "org.apache.commons.math.stat.inference.ChiSquareFactoryTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.ChiSquareFactoryTest::testChiSquare",
          "org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquare",
          "org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquareLargeTestStatistic",
          "org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquare"
        ],
        "failing_tests": [],
        "sum_entropy": -17.621930207967793,
        "mean_entropy": -0.06454919490098093,
        "pass_FIB_num": 0,
        "pass_FIB": [],
        "validation_wo": "plausible",
        "correctness": "wrong"
      }
    ]
  }
}