public void testLevenbergMarquardtOptimizer() {
        LevenbergMarquardtOptimizer optimizer =
            new LevenbergMarquardtOptimizer();

        // this test requires a default convergence checker that will never
        // be used (because the user has provided another one)
        optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-20, 1.0e-20));
        optimizer.setMaxEvaluations(500);
        optimizer.setMaxIterations(500);
        optimizer.setInitialStepBoundFactor(100);

        CircleVectorial circle = new CircleVectorial();
        double[] target = { 1, 1, 1 };
        CircleModelProblem problem = new CircleModelProblem(target, circle);

        VectorialPointValuePair optimum =
            optimizer.optimize(problem.getModelFunction(),
                               problem.getModelFunctionJacobian(),
                               new MaxEval(500),
                               problem.getTarget(),
                               new double[] { 0, 0, 0 });
        assert