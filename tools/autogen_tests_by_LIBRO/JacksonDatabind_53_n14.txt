public void testDeserializeMapAsSubclassWithInterfaceType() throws JsonProcessingException {
    Map<UUID, Foo> value = new HashMap<UUID, Foo>();
    value.put(UUID.randomUUID(), new Foo("a value"));
    String json = new ObjectMapper().writeValueAsString(value);
    MyMap<UUID, Foo> deserializedValue = new ObjectMapper().readValue(json, new TypeReference<MyMap<UUID, Foo>>() {});
    Assert.assertEquals(value, deserializedValue);
}

interface MyCustomIdInterface {
    String getId();
}

interface MyMap<K,V> extends Map<K,V> {
}

class MyHashMap<K,V> extends HashMap<K,V> implements MyMap<K,V> {
}

class Foo implements MyCustomIdInterface {
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getProperty()