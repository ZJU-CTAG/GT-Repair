public void testLevenbergMarquardtOptimizer() {
    final int n = 10;
    final double[] startPoint = new double[n];
    final MultivariateVectorFunction f = new MultivariateVectorFunction() {
        public double[] value(double[] point) throws DimensionMismatchException {
            DimensionMismatchException.checkDimension(n, point.length);
            double[] r = new double[n];
            for (int i = 0; i < n; i++) {
                r[i] = Math.exp(point[i]) - 1;
            }
            return r;
        }
    };

    final MultivariateMatrixFunction jacobian = new MultivariateMatrixFunction() {
        public double[][] value(double[] point) throws DimensionMismatchException, FunctionEvaluationException {
            DimensionMismatchException.checkDimension(n, point.length);
            double[][] jac = new double[n][n];
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {