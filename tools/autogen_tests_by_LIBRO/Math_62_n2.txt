public void testOptimization() {
    double[] startPoint = new double[] { -1.0, 1.0, 5.0 };
    double[] target = new double[] { 0.0, 0.0, 0.0 };
    MultivariateVectorialOptimizer optimizer
        = new NonLinearConjugateGradientOptimizer(
            NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,
            new SimpleValueChecker(1e-6, 1e-6));
    PointVectorValuePair optimum
        = optimizer.optimize(new MaxEval(100),
                             new ObjectiveFunction(new MultivariateDifferentiableVectorFunction() {
            public double[] value(double[] point) {
                double[] values = new double[point.length];
                for (int i = 0; i < point.length; ++i) {
                    values[i] = point[i] * point[i];
                }
                return values;
            }
            public DerivativeStructure[] value(DerivativeStructure[] point) {
                Der