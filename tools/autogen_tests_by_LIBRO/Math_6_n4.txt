public void testGetIterations () {
    LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
    double[] target = new double[] { 1 };
    double[] weights = new double[] { 1 };
    double[] guess = new double[] { 3 };
    MultivariateVectorFunction f = new MultivariateVectorFunction() {
        @Override
        public double[] value(double[] point) {
            return new double[] { FastMath.pow(point[0], 4) };
        }
    };
    MultivariateMatrixFunction j = new MultivariateMatrixFunction() {
        @Override
        public double[][] value(double[] point) {
            return new double[][] { { 0.25 * FastMath.pow(point[0], 3) } };
        }
    };
    optimizer.optimize(new MaxEval(100), new Target(target), new Weight(weights), new InitialGuess(guess), f, j);
    assertTrue(optimizer.getEvaluations() > 0);
    assertEquals(0, optimizer