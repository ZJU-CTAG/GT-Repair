public void testEmbeddedRungeKuttaInitialization() {
    double maxError = 0;
    for (int i = 0; i < 50; ++i) {
        final double   t0 = (2 * i - 1) * 0.5;
        final double[] y0 = new double[] { FastMath.sin(t0) };
        final double[] y  = new double[] { y0[0] };
        EmbeddedRungeKuttaIntegrator integ = new DormandPrince853Integrator(1.0e-8, 100.0, 1.0e-10, 1.0e-10);
        integ.integrate(new FirstOrderDifferentialEquations() {
            public void init(double t0, double[] y0, double t) {
            }
            public int getDimension() {
                return 1;
            }
            public void computeDerivatives(double t, double[] y, double[] yDot) {
                yDot[0] = -y[0];
            }
        }, t0, y, t0 + 0.5, y);