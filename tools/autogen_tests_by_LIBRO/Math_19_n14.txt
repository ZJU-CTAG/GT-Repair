public void testWideBounds() {
    final double[] target = {0.8, 1.1};
    final double[] weights = {1, 1};

    MultivariateDifferentiableVectorMultiStartOptimizer optimizer = new CMAESOptimizer(false, 0, false, 0, 0, 0, new MersenneTwister(), false, 0);
    final PointValuePair result = optimizer.optimize(
            new MaxEval(1000),
            new InitialGuess(new double[] {0, 0}),
            new ObjectiveFunction(new MultivariateVectorFunction() {
                public double[] value(double[] point) {
                    return new double[] {
                            Math.abs(target[0] - point[0]) * weights[0],
                            Math.abs(target[1] - point[1]) * weights[1]
                    };
                }
            }),
            new ObjectiveFunctionGradient(new MultivariateVectorFunction() {
                public double[] value(double[] point) {
                    return new double[] {
                            weights[0] * (point[0] > target[0]