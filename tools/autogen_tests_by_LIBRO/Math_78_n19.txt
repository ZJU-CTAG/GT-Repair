public void testIssueDuringODEIntegration() {
    double minStep = 0;
    double maxStep = 1000;
    ODEIntegrator integrator = new DormandPrince853Integrator(minStep, maxStep, 1.0e-8, 1.0e-10);
    double[] y = new double[] { 0.0 };
    double[] yDot = new double[] { 0.0 };
    FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {
        public void computeDerivatives(double t, double[] y, double[] yDot) {
            yDot[0] = Math.sin(t);
        }
        public int getDimension() {
            return 1;
        }
    };
    integrator.addEventHandler(new EventHandler() {
        private boolean increasing;
        public void init(double t0, double[] y0, double t) {
            increasing = y0[0] <= 1.0;
        }
        public double g(double t, double[] y) {
            if (increasing) {
                return y