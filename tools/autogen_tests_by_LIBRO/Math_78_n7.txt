public void testIssue108() {
    TestProblem3 pb = new TestProblem3(0.9);
    double minStep   = 0;
    double maxStep   = pb.getFinalTime() - pb.getInitialTime();
    double[] vecAbsoluteTolerance = { 1.0e-15, 1.0e-16 };
    double[] vecRelativeTolerance = { 1.0e-15, 1.0e-16 };

    FirstOrderIntegrator integ = new DormandPrince853Integrator(minStep, maxStep,
                                                            vecAbsoluteTolerance,
                                                            vecRelativeTolerance);
    integ.addStepHandler(new ContinuousOutputModel());
    integ.addEventHandler(pb, 1.0e-8 * maxStep, 1.0e-8, 1000);
    EventHandler[] functions = integ.getEventHandlers();
    Assert.assertEquals(1, functions.length);
    Assert.assertEquals(pb, functions[0]);
    integ.integrate(pb,
                    pb.getInitialTime(), pb.