public void testValuedEnum() {

    class Test1 extends AbstractEnum {
        private static final List<Test1> list = new ArrayList<Test1>();
        private static final Map<Integer, Test1> map = new HashMap<Integer, Test1>();
        static {
            list.add(new Test1(1));
            list.add(new Test1(2));
            for (Test1 e : list) {
                map.put(e.getValue(), e);
            }
        }
        private Test1(int i) {
            super(i);
        }
        public static Test1 getEnum(Integer i) {
            return map.get(i);
        }
        public static List<Test1> getEnumList() {
            return Collections.unmodifiableList(list);
        }

    }

    class Test2 extends AbstractEnum {
        private static final List<Test2> list = new ArrayList<Test2>();
        private static final Map<Integer, Test2> map = new HashMap<Integer, Test2>();
        static {
