public void testOptimizer() {
    MultivariateDifferentiableVectorMultiStartOptimizer optimizer = new LevenbergMarquardtMultiStartOptimizer();
    MultivariateDifferentiableVectorFunction f = new MultivariateDifferentiableVectorFunction() {
        @Override
        public Pair<RealVector, RealMatrix> value(final RealVector point) {
            return new Pair<RealVector, RealMatrix>(point, new DiagonalMatrix(point.getDimension()));
        }
    };
    double[] min = new double[]{0, 0};
    double[] max = new double[]{1, 1};
    double[] startPoint = new double[]{0.1, 0.1};
    double[] target = new double[]{0, 0};
    VectorialPointValuePair optimum = optimizer.optimize(100, f, GoalType.MINIMIZE, startPoint);
    assertTrue(DoubleArrayMath.contains(optimum.getPoint(), target));
}
