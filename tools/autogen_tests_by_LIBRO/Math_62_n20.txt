public void testConvergenceChecker() {
    final MultivariateDifferentiableFunction f = new MultivariateDifferentiableFunction() {
        public double value(double[] point) {
            return 0;
        }
        public MultivariateMatrixFunction gradient() {
            return new MultivariateMatrixFunction() {
                public double[][] value(double[] point) {
                    return new double[][] {{0}, {0}};
                }
            };
        }
    };
    final ConvergenceChecker<PointVectorValuePair> checker = new ConvergenceChecker<PointVectorValuePair>() {
        public boolean converged(int iteration, PointVectorValuePair previous, PointVectorValuePair current) {
            return false;
        }
    };
    final NonLinearConjugateGradientOptimizer optimizer = new NonLinearConjugateGradientOptimizer(Formula.POLAK_RIBIERE, checker);
    optimizer.optimize(new MaxEval(100),new ObjectiveFunction(f), GoalType.MINIMIZE,new double[] {0});
}
