public void testBrent() {
    final UnivariateRealFunction f = new UnivariateRealFunction() {
        @Override
        public double value(double x) {
            return x*x + 4;
        }
    };
    final double a = -1.25;
    final double b = -0.75;
    final double c = -0.25;
    final double min = -1;
    final double tol = 1e-10;
    final double m = 1e-20;
    final double[] points = new double[] {
            a, b, c, min
    };
    final int[] expected = new int[] {
            0, 1, 3, 3
    };
    final BrentOptimizer opt = new BrentOptimizer(tol, m);
    for (int i = 0; i < points.length; ++i) {
        final double x = points[i];
        final int expectedIndex = expected[i];
        final int actualIndex = opt.bracket(x, f);
        assertEquals(expectedIndex, actualIndex);
    }
}
``