public void testCannotDecodeTypeHierarchyAdapterAtRuntime() {
    ObjectMapper mapper = new ObjectMapper();
    mapper.registerModule(new JodaModule());
    mapper.addMixInAnnotations(DateTime.class, DateTimeMixin.class);
    mapper.addMixInAnnotations(Vehicle.class, VehicleMixin.class);
    try {
	Vehicle vehicle = mapper.readValue(
		"{\"@class\" : \"org.joda.time.DateTime\"}",
		Vehicle.class);
	fail("Should have thrown exception");
    } catch (JsonMappingException e) {
	// expected
	assertEquals(Vehicle.class, e.getTargetType());
    }
}

public abstract class Vehicle {
}

public class Car extends Vehicle {
}

public class Truck extends Vehicle {
}

@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = "@class")
@JsonTypeIdResolver(Type