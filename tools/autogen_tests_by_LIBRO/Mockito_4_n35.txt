public void test() {
    final String className = this.getClass().getName();
    final Answer<Object> answer = new Answer<Object>() {
        @Override
        public Object answer(InvocationOnMock invocation) throws Throwable {
            Object[] args = invocation.getArguments();
            if (args.length == 0) {
                return className;
            }
            return args[0].toString();
        }
    };
    final Object mock = mock(Object.class, answer);
    assertEquals(className, mock.toString());
    assertEquals(className, mock.toString());
    assertEquals(className, mock.toString());
    assertEquals(className, mock.toString());
    assertEquals(className, mock.toString());
    assertEquals(className, mock.toString());
    assertEquals(className, mock.toString());
    assertEquals(className, mock.toString());
    verify(mock, times(8)).toString();
    verifyZeroInteractions(mock);
}
