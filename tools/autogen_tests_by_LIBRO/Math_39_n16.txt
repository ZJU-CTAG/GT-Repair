public void testDoubleStep() {
    // a short integration range
    double startT = 0.0;
    double endT   = 1.0;
    // a large integration interval
    double dt = endT - startT;
    // an embedded Runge-Kutta integrator
    FirstOrderIntegrator integrator = new DormandPrince853Integrator(1.0e-8, dt, 1.0e-20, 1.0e-20);
    FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {
        public double[] computeDerivatives(double t, double[] y) {
            // the function is not continuous, it returns NaN at t = 0.5
            if (t == 0.5) {
                return new double[] { Double.NaN };
            } else {
                return new double[] { -t };
            }
        }
        public int getDimension() {
            return 1;
        }
    };
    // the initial state
    double[] y0 = new double[] {0.0};
    // the initial derivatives