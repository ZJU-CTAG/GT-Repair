public void testSwitchingFunctionBug()
throws DerivativeException, IntegratorException {
    TestProblem1 pb = new TestProblem1();
    double minStep = 0;
    double maxStep = pb.getFinalTime() - pb.getInitialTime();
    double[] vecAbsoluteTolerance = { 1.0e-15, 1.0e-16 };
    double[] vecRelativeTolerance = { 1.0e-15, 1.0e-16 };

    FirstOrderIntegrator integ = new DormandPrince853Integrator(minStep, maxStep, vecAbsoluteTolerance, vecRelativeTolerance);
    integ.addStepHandler(new StepHandler() {
        public void init(double t0, double[] y0, double t) {
        }
        public void handleStep(StepInterpolator interpolator, boolean isLast)
        throws DerivativeException {
            if (isLast) {
                double[] interpolatedY = interpolator.getInterpolatedState ();
                double interpolatedT = interpolator.getCurrentTime ();
                double[] theoreticalY = interpolator.