public void testBrentOptimizer() {
    final double a = -10;
    final double b = 10;
    final double m = 1;
    final double tolerance = 1e-12;

    OptimizationData[] optimizationData = new OptimizationData[] {
        new MaxEval(100), new InitialGuess(0), new GoalType(GoalType.MINIMIZE), 
        new SearchInterval(a, b), new UnivariateObjectiveFunction(new Function()), new MaxIter(100)
    };

    BrentOptimizer optimizer = new BrentOptimizer(tolerance, tolerance);
    // UnivariatePointValuePair result = optimizer.optimize(optimizationData);

    double expected = m / Math.sqrt(1 + m * m);
    // assertEquals(expected, result.getPoint(), tolerance);

    UnivariatePointValuePair result = optimizer.optimize(optimizationData);
    assertEquals(expected, result.getPoint(), tolerance);
}

private static class Function implements UnivariateFunction {
    @Override
    public double value(double x) {
