public void testDeserializationWithDeserializationProblemHandler() throws IOException {
    String json = "{\"type\":\"java.lang.String\",\"value\":\"abc\"}";
    ObjectMapper mapper = new ObjectMapper();
    mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE, JsonTypeInfo.As.PROPERTY);
    mapper.addHandler(new DeserializationProblemHandler() {
        @Override
        public JavaType handleUnknownTypeId(DeserializationContext ctxt, JavaType baseType, String subTypeId, TypeIdResolver idResolver, String failureMsg) throws IOException {
            return TypeFactory.defaultInstance().constructType(Void.class);
        }
    });
    final JsonNode node = mapper.readTree(json);
    final Object deserialized = mapper.readerFor(Object.class).withRootName("root").treeToValue(node);
    assertTrue(deserialized instanceof String);
    assertEquals("abc", deserialized);
}
