public void testBSPTree() {
    // create a cube as a Brep
    float[] p = new float[] {//
        0f, 0f, 0f, //
        1f, 0f, 0f, //
        1f, 1f, 0f, //
        0f, 1f, 0f, //
        0f, 0f, 1f, //
        1f, 0f, 1f, //
        1f, 1f, 1f, //
        0f, 1f, 1f //
    };
    int[] i = new int[] {//
        0, 1, 2, //
        0, 2, 3, //
        0, 3, 7, //
        0, 7, 4, //
        0, 4, 5, //
        0, 5, 1, //
        1, 5, 6, //
        1, 6, 2, //
        2, 6, 7, //
        2, 7, 3, //
        3, 7, 4, //
        3, 4, 0 //
    };
    BSPTree<Euclidean