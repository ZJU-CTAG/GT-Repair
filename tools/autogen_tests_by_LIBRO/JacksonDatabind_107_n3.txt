public void testDeserializationWithDeserializationProblemHandler() throws Exception {
    ObjectMapper mapper = new ObjectMapper();
    mapper.registerModule(new JavaTimeModule());
    mapper.disable(MapperFeature.DEFAULT_VIEW_INCLUSION);
    mapper.enableDefaultTyping();

    mapper.addHandler(new DeserializationProblemHandler() {
        @Override
        public JavaType handleUnknownTypeId(DeserializationContext ctxt, JavaType baseType, String subTypeId, TypeIdResolver idResolver, String failureMsg) throws IOException {
            return TypeFactory.defaultInstance().constructType(Void.class);
        }
    });

    Foo foo = new Foo(LocalDateTime.now());

    String json = mapper.writerWithView(Foo.Views.Internal.class).writeValueAsString(foo);
    Foo deserializedFoo = mapper.readValue(json, Foo.class);
    assertNotNull(deserializedFoo.getTime());
}

static class Foo {
    private String id = UUID.randomUUID().