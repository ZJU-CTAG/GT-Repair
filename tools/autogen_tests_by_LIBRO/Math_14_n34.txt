public void testIssue108() {
    double[] weights = new double[1020000];
    for (int i = 0; i < weights.length; i++) {
        weights[i] = 1.0;
    }
    Weight w = new Weight(weights);
    double[] y = new double[weights.length];
    for (int i = 0; i < y.length; i++) {
        y[i] = (i + 1) / (double) weights.length;
    }
    CurveFitter<PolynomialFunction> fitter = new CurveFitter<PolynomialFunction>(new LevenbergMarquardtOptimizer());
    fitter.addObservedPoint(1.0, y[0]);
    fitter.addWeightedObservedPoint(1.0, y[0], w.getWeight(0));
    for (int i = 1; i < y.length; i++) {
        fitter.addObservedPoint(1.0, y[i]);
        fitter.addWeightedObservedPoint(1.0, y[i], w.getWeight(