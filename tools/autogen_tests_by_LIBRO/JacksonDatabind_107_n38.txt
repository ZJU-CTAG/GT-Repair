public void testDeserializationWithDeserializationProblemHandler() throws Exception {
    ObjectMapper mapper = new ObjectMapper()
            .registerModule(new SimpleModule()
                                    .addDeserializer(Void.class, new JsonDeserializer<Void>() {
                                        @Override
                                        public Void deserialize(JsonParser p, DeserializationContext ctxt) throws IOException, JsonProcessingException {
                                            return null;
                                        }
                                    }));
    mapper.registerModule(new Jdk8Module());
    mapper.registerModule(new JavaTimeModule());
    mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
    mapper.addHandler(new DeserializationProblemHandler() {
        @Override
        public JavaType handleUnknownTypeId(DeserializationContext ctxt, JavaType baseType, String subTypeId, TypeIdResolver idResolver, String failureMsg) throws IOException {
            return TypeFactory.unknownType();
        }
    });
    mapper.enableDefaultTyping(Object