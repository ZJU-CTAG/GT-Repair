{
  "patch": "\n    /**\n     * Returns the <a href=\"http://www.xycoon.com/SumOfSquares.htm\">\n     * sum of squared errors</a> (SSE) associated with the regression \n     * model.\n     * <p>\n     * The sum is computed using the computational formula\n     * <p>\n     * <code>SSE = SYY - (SXY * SXY / SXX)</code>\n     * <p>\n     * where <code>SYY</code> is the sum of the squared deviations of the y\n     * values about their mean, <code>SXX</code> is similarly defined and\n     * <code>SXY</code> is the sum of the products of x and y mean deviations.\n     * <p>\n     * The sums are accumulated using the updating algorithm referenced in \n     * {@link #addData}.  \n     * <p>\n     * The return value is constrained to be non-negative - i.e., if due to \n     * rounding errors the computational formula returns a negative result, \n     * 0 is returned.\n     * <p>\n     * <strong>Preconditions</strong>: <ul>\n     * <li>At least two observations (with at least two different x values)\n     * must have been added before invoking this method. If this method is \n     * invoked before a model can be estimated, <code>Double,NaN</code> is\n     * returned.\n     * </li></ul>\n     *\n     * @return sum of squared errors associated with the regression model\n     */\n    public double getSumSquaredErrors() {\n        double sse = sumYY - sumXY * sumXY / sumXX;\n        return Math.max(0, sse);\n    }\n",
  "index": 6,
  "validation": "plausible",
  "validation_wo": "plausible",
  "errors": [],
  "total_trigger": 1,
  "passing_trigger": 1,
  "total_relevant": 1,
  "failing_relevant": 0,
  "passing_tests": [
    "org.apache.commons.math.stat.regression.SimpleRegressionTest::testSSENonNegative"
  ],
  "failing_tests": [],
  "sum_entropy": -8.199096947908401,
  "mean_entropy": -0.01952165939978191,
  "pass_FIB_num": 44,
  "pass_FIB": [
    "Math_105_n4.txt",
    "Math_105_n30.txt",
    "Math_105_n44.txt",
    "Math_105_n13.txt",
    "Math_105_n37.txt",
    "Math_105_n10.txt",
    "Math_105_n29.txt",
    "Math_105_n32.txt",
    "Math_105_n3.txt",
    "Math_105_n25.txt",
    "Math_105_n7.txt",
    "Math_105_n12.txt",
    "Math_105_n0.txt",
    "Math_105_n21.txt",
    "Math_105_n46.txt",
    "Math_105_n11.txt",
    "Math_105_n18.txt",
    "Math_105_n42.txt",
    "Math_105_n26.txt",
    "Math_105_n23.txt",
    "Math_105_n36.txt",
    "Math_105_n1.txt",
    "Math_105_n17.txt",
    "Math_105_n45.txt",
    "Math_105_n28.txt",
    "Math_105_n15.txt",
    "Math_105_n6.txt",
    "Math_105_n5.txt",
    "Math_105_n14.txt",
    "Math_105_n35.txt",
    "Math_105_n34.txt",
    "Math_105_n8.txt",
    "Math_105_n20.txt",
    "Math_105_n33.txt",
    "Math_105_n2.txt",
    "Math_105_n27.txt",
    "Math_105_n48.txt",
    "Math_105_n31.txt",
    "Math_105_n41.txt",
    "Math_105_n24.txt",
    "Math_105_n39.txt",
    "Math_105_n49.txt",
    "Math_105_n40.txt",
    "Math_105_n43.txt"
  ]
}