{
  "patch": "\n    /** Compute the maximum of two values\n     * @param a first value\n     * @param b second value\n     * @return b if a is lesser or equal to b, a otherwise\n     */\n    public static float max(final float a, final float b) {\n        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : a);\n    }\n",
  "index": 0,
  "validation": "plausible",
  "validation_wo": "plausible",
  "errors": [],
  "total_trigger": 1,
  "passing_trigger": 1,
  "total_relevant": 183,
  "failing_relevant": 0,
  "passing_tests": [
    "org.apache.commons.math.util.FastMathTest::testMinMaxFloat"
  ],
  "failing_tests": [],
  "sum_entropy": -2.41270462423563,
  "mean_entropy": -0.025396890781427685,
  "pass_FIB_num": 38,
  "pass_FIB": [
    "Math_59_n33.txt",
    "Math_59_n31.txt",
    "Math_59_n43.txt",
    "Math_59_n20.txt",
    "Math_59_n36.txt",
    "Math_59_n40.txt",
    "Math_59_n25.txt",
    "Math_59_n4.txt",
    "Math_59_n34.txt",
    "Math_59_n10.txt",
    "Math_59_n9.txt",
    "Math_59_n32.txt",
    "Math_59_n38.txt",
    "Math_59_n30.txt",
    "Math_59_n27.txt",
    "Math_59_n23.txt",
    "Math_59_n28.txt",
    "Math_59_n12.txt",
    "Math_59_n39.txt",
    "Math_59_n26.txt",
    "Math_59_n1.txt",
    "Math_59_n7.txt",
    "Math_59_n21.txt",
    "Math_59_n13.txt",
    "Math_59_n37.txt",
    "Math_59_n0.txt",
    "Math_59_n46.txt",
    "Math_59_n14.txt",
    "Math_59_n5.txt",
    "Math_59_n44.txt",
    "Math_59_n3.txt",
    "Math_59_n11.txt",
    "Math_59_n2.txt",
    "Math_59_n35.txt",
    "Math_59_n48.txt",
    "Math_59_n45.txt",
    "Math_59_n49.txt",
    "Math_59_n22.txt"
  ]
}