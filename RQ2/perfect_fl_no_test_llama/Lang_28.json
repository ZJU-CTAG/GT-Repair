{
  "patch": "\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        // TODO: Protect from ArrayIndexOutOfBounds\n        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n            boolean isHex = false;\n\n            char firstChar = input.charAt(start);\n            if(firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n            }\n\n            int end = start;\n            while(input.charAt(end) != ';') {\n                end++;\n            }\n\n            int entityValue;\n            try {\n                if(isHex) {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n                } else {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n                }\n            } catch(NumberFormatException nfe) {\n                return 0;\n            }\n\n            // Handle supplementary characters\n            if (entityValue > 0xffff) {\n                int codePoint = entityValue;\n                char[] surrogates = Character.toChars(codePoint);\n                out.write(surrogates[0]);\n                out.write(surrogates[1]);\n                return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n            } else {\n                out.write(entityValue);\n                return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n            }\n        }\n        return 0;\n    }\n",
  "index": 13,
  "validation": "plausible",
  "validation_wo": "plausible",
  "errors": [],
  "total_trigger": 1,
  "passing_trigger": 1,
  "total_relevant": 2,
  "failing_relevant": 0,
  "passing_tests": [
    "org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testSupplementaryUnescaping"
  ],
  "failing_tests": [],
  "sum_entropy": -13.682813368737698,
  "mean_entropy": -0.03167317909430022,
  "pass_FIB_num": 0,
  "pass_FIB": []
}