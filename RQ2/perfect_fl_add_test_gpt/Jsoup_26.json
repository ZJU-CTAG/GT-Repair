{
  "patch": "\n    /**\n     * Creates a new, clean document, from the original dirty document, containing only elements allowed by the whitelist.\n     * The original document is not modified. Only elements from the dirty document's <code>body</code> are used.\n     * @param dirtyDocument Untrusted base document to clean.\n     * @return cleaned document.\n     */\n    public Document clean(Document dirtyDocument) {\n        Validate.notNull(dirtyDocument);\n\n        Document clean = Document.createShell(dirtyDocument.baseUri());\n        if (dirtyDocument.body() != null) {\n            copySafeNodes(dirtyDocument.body(), clean.body());\n        }\n\n        return clean;\n    }\n",
  "index": 0,
  "validation": "plausible",
  "errors": [],
  "total_trigger": 1,
  "passing_trigger": 1,
  "total_relevant": 1,
  "failing_relevant": 0,
  "passing_tests": [
    "org.jsoup.safety.CleanerTest::handlesFramesets"
  ],
  "failing_tests": [],
  "sum_entropy": -1.6804771186194,
  "mean_entropy": -0.012540874019547761,
  "test_for_prompt": "Jsoup_26_n30.txt",
  "pass_FIB_num": 27,
  "pass_FIB": [
    "Jsoup_26_n30.txt",
    "Jsoup_26_n11.txt",
    "Jsoup_26_n28.txt",
    "Jsoup_26_n47.txt",
    "Jsoup_26_n37.txt",
    "Jsoup_26_n0.txt",
    "Jsoup_26_n26.txt",
    "Jsoup_26_n21.txt",
    "Jsoup_26_n39.txt",
    "Jsoup_26_n27.txt",
    "Jsoup_26_n29.txt",
    "Jsoup_26_n40.txt",
    "Jsoup_26_n2.txt",
    "Jsoup_26_n1.txt",
    "Jsoup_26_n24.txt",
    "Jsoup_26_n41.txt",
    "Jsoup_26_n25.txt",
    "Jsoup_26_n43.txt",
    "Jsoup_26_n8.txt",
    "Jsoup_26_n16.txt",
    "Jsoup_26_n19.txt",
    "Jsoup_26_n33.txt",
    "Jsoup_26_n18.txt",
    "Jsoup_26_n6.txt",
    "Jsoup_26_n4.txt",
    "Jsoup_26_n38.txt",
    "Jsoup_26_n15.txt"
  ]
}