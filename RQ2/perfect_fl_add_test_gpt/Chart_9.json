{
  "patch": "\n    /**\n     * Creates a new timeseries by copying a subset of the data in this time\n     * series.\n     *\n     * @param start  the first time period to copy (<code>null</code> not\n     *         permitted).\n     * @param end  the last time period to copy (<code>null</code> not\n     *         permitted).\n     *\n     * @return A time series containing a copy of this time series from start\n     *         until end.\n     *\n     * @throws CloneNotSupportedException if there is a cloning problem.\n     */\n    public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)\n        throws CloneNotSupportedException {\n\n        if (start == null) {\n            throw new IllegalArgumentException(\"Null 'start' argument.\");\n        }\n        if (end == null) {\n            throw new IllegalArgumentException(\"Null 'end' argument.\");\n        }\n        if (start.compareTo(end) > 0) {\n            throw new IllegalArgumentException(\n                    \"Requires start on or before end.\");\n        }\n        boolean emptyRange = false;\n        int startIndex = getIndex(start);\n        if (startIndex < 0) {\n            startIndex = -(startIndex + 1);\n            if (startIndex == this.data.size()) {\n                emptyRange = true;  // start is after last data item\n            }\n        }\n        int endIndex = getIndex(end);\n        if (endIndex < 0) {             // end period is not in original series\n            endIndex = -(endIndex + 1); // this is first item AFTER end period\n            endIndex = endIndex - 1;    // so this is last item BEFORE end\n        }\n        if (endIndex < 0 || startIndex > endIndex) {\n            emptyRange = true;\n        }\n        if (emptyRange) {\n            TimeSeries copy = (TimeSeries) super.clone();\n            copy.data = new java.util.ArrayList();\n            return copy;\n        }\n        else {\n            return createCopy(startIndex, endIndex);\n        }\n\n    }\n",
  "index": 1,
  "validation": "plausible",
  "errors": [],
  "total_trigger": 1,
  "passing_trigger": 1,
  "total_relevant": 5,
  "failing_relevant": 0,
  "passing_tests": [
    "org.jfree.data.time.junit.TimeSeriesTests::testBug1864222"
  ],
  "failing_tests": [],
  "sum_entropy": -7.292347595528616,
  "mean_entropy": -0.01778621364763077,
  "test_for_prompt": "Chart_9_n46.txt",
  "pass_FIB_num": 31,
  "pass_FIB": [
    "Chart_9_n46.txt",
    "Chart_9_n44.txt",
    "Chart_9_n28.txt",
    "Chart_9_n9.txt",
    "Chart_9_n36.txt",
    "Chart_9_n29.txt",
    "Chart_9_n40.txt",
    "Chart_9_n7.txt",
    "Chart_9_n39.txt",
    "Chart_9_n24.txt",
    "Chart_9_n1.txt",
    "Chart_9_n32.txt",
    "Chart_9_n6.txt",
    "Chart_9_n41.txt",
    "Chart_9_n12.txt",
    "Chart_9_n3.txt",
    "Chart_9_n48.txt",
    "Chart_9_n2.txt",
    "Chart_9_n31.txt",
    "Chart_9_n10.txt",
    "Chart_9_n38.txt",
    "Chart_9_n17.txt",
    "Chart_9_n5.txt",
    "Chart_9_n47.txt",
    "Chart_9_n26.txt",
    "Chart_9_n33.txt",
    "Chart_9_n13.txt",
    "Chart_9_n27.txt",
    "Chart_9_n4.txt",
    "Chart_9_n25.txt",
    "Chart_9_n0.txt"
  ]
}