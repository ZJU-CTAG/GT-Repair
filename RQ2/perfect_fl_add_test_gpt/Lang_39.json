{
  "patch": "\n    private static String replaceEach(String text, String[] searchList, String[] replacementList, \n                                      boolean repeat, int timeToLive) \n    {\n\n        if (text == null || text.length() == 0 || searchList == null || \n            searchList.length == 0 || replacementList == null || replacementList.length == 0) \n        {\n            return text;\n        }\n\n        if (timeToLive < 0) {\n            throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \" + text);\n        }\n\n        int searchLength = searchList.length;\n        int replacementLength = replacementList.length;\n\n        if (searchLength != replacementLength) {\n            throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \"\n                + searchLength\n                + \" vs \"\n                + replacementLength);\n        }\n\n        boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];\n\n        int textIndex = -1;\n        int replaceIndex = -1;\n        int tempIndex = -1;\n\n        for (int i = 0; i < searchLength; i++) {\n            if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n                searchList[i].length() == 0 || replacementList[i] == null) \n            {\n                continue;\n            }\n            tempIndex = text.indexOf(searchList[i]);\n\n            if (tempIndex == -1) {\n                noMoreMatchesForReplIndex[i] = true;\n            } else {\n                if (textIndex == -1 || tempIndex < textIndex) {\n                    textIndex = tempIndex;\n                    replaceIndex = i;\n                }\n            }\n        }\n\n        if (textIndex == -1) {\n            return text;\n        }\n\n        int start = 0;\n        int increase = 0;\n\n        for (int i = 0; i < searchList.length; i++) {\n            if (searchList[i] != null && replacementList[i] != null) {\n                int greater = replacementList[i].length() - searchList[i].length();\n                if (greater > 0) {\n                    increase += 3 * greater; \n                }\n            }\n        }\n        increase = Math.min(increase, text.length() / 5);\n\n        StringBuilder buf = new StringBuilder(text.length() + increase);\n\n        while (textIndex != -1) {\n\n            for (int i = start; i < textIndex; i++) {\n                buf.append(text.charAt(i));\n            }\n            if (searchList[replaceIndex] != null && replacementList[replaceIndex] != null) {\n                buf.append(replacementList[replaceIndex]);\n            }\n\n            start = textIndex + searchList[replaceIndex].length();\n\n            textIndex = -1;\n            replaceIndex = -1;\n            tempIndex = -1;\n\n            for (int i = 0; i < searchLength; i++) {\n                if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n                    searchList[i].length() == 0 || replacementList[i] == null) \n                {\n                    continue;\n                }\n                tempIndex = text.indexOf(searchList[i], start);\n\n                if (tempIndex == -1) {\n                    noMoreMatchesForReplIndex[i] = true;\n                } else {\n                    if (textIndex == -1 || tempIndex < textIndex) {\n                        textIndex = tempIndex;\n                        replaceIndex = i;\n                    }\n                }\n            }\n\n        }\n        int textLength = text.length();\n        for (int i = start; i < textLength; i++) {\n            buf.append(text.charAt(i));\n        }\n        String result = buf.toString();\n        if (!repeat) {\n            return result;\n        }\n\n        return replaceEach(result, searchList, replacementList, repeat, timeToLive - 1);\n    }\n",
  "index": 18,
  "validation": "plausible",
  "errors": [],
  "total_trigger": 1,
  "passing_trigger": 1,
  "total_relevant": 19,
  "failing_relevant": 0,
  "passing_tests": [
    "org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray"
  ],
  "failing_tests": [],
  "sum_entropy": -10.543620246287425,
  "mean_entropy": -0.013000764791969698,
  "test_for_prompt": "Lang_39_n29.txt",
  "pass_FIB_num": 19,
  "pass_FIB": [
    "Lang_39_n17.txt",
    "Lang_39_n5.txt",
    "Lang_39_n46.txt",
    "Lang_39_n14.txt",
    "Lang_39_n31.txt",
    "Lang_39_n2.txt",
    "Lang_39_n24.txt",
    "Lang_39_n8.txt",
    "Lang_39_n30.txt",
    "Lang_39_n35.txt",
    "Lang_39_n4.txt",
    "Lang_39_n10.txt",
    "Lang_39_n23.txt",
    "Lang_39_n16.txt",
    "Lang_39_n21.txt",
    "Lang_39_n41.txt",
    "Lang_39_n11.txt",
    "Lang_39_n42.txt",
    "Lang_39_n34.txt"
  ]
}