{
  "patch": "\n    /**\n     * Multiply two values throwing an exception if overflow occurs.\n     * \n     * @param val1  the first value\n     * @param val2  the second value\n     * @return the new total\n     * @throws ArithmeticException if the value is too big or too small\n     * @since 1.2\n     */\n    public static long safeMultiply(long val1, int val2) {\n        if (val1 == Long.MIN_VALUE && val2 == -1) {\n            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        switch (val2) {\n            case -1:\n                return -val1;\n            case 0:\n                return 0L;\n            case 1:\n                return val1;\n        }\n        long total = val1 * val2;\n        if (total / val2 != val1) {\n            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        return total;\n    }\n",
  "index": 1,
  "validation": "plausible",
  "errors": [],
  "total_trigger": 1,
  "passing_trigger": 1,
  "total_relevant": 108,
  "failing_relevant": 0,
  "passing_tests": [
    "org.joda.time.field.TestFieldUtils::testSafeMultiplyLongInt"
  ],
  "failing_tests": [],
  "sum_entropy": -4.121351864602584,
  "mean_entropy": -0.017918921150446018,
  "test_for_prompt": "Time_15_n15.txt",
  "pass_FIB_num": 12,
  "pass_FIB": [
    "Time_15_n45.txt",
    "Time_15_n36.txt",
    "Time_15_n32.txt",
    "Time_15_n21.txt",
    "Time_15_n33.txt",
    "Time_15_n41.txt",
    "Time_15_n23.txt",
    "Time_15_n4.txt",
    "Time_15_n16.txt",
    "Time_15_n6.txt",
    "Time_15_n46.txt",
    "Time_15_n1.txt"
  ]
}