{
  "patch": "\n/**\n * Parses a string to produce a {@link Complex} object.\n *\n * @param source the string to parse\n * @param pos input/ouput parsing parameter.\n * @return the parsed {@link Complex} object.\n */\npublic Complex parse(String source, ParsePosition pos) {\n    int initialIndex = pos.getIndex();\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n\n    // parse real\n    Number re = parseNumber(source, getRealFormat(), pos);\n    if (re == null) {\n        // invalid real number\n        // set index back to initial, error index should already be set\n        // character examined.\n        pos.setIndex(initialIndex);\n        return null;\n    }\n\n    // parse sign\n    int startIndex = pos.getIndex();\n    char c = parseNextCharacter(source, pos);\n    int sign = 0;\n    switch (c) {\n    case 0 :\n        // no sign\n        // return real only complex number\n        return new Complex(re.doubleValue(), 0.0);\n    case '-' :\n        sign = -1;\n        break;\n    case '+' :\n        sign = 1;\n        break;\n    default :\n        // invalid sign\n        // set index back to initial, error index should be the last\n        // character examined.\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(startIndex);\n        return null;\n    }\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n\n    // check if source contains imaginary character\n    int n = 0;\n    if (source.contains(getImaginaryCharacter())) {\n        n = getImaginaryCharacter().length();\n    }\n\n    // parse imaginary\n    Number im = parseNumber(source, getRealFormat(), pos);\n    if (im == null) {\n        // invalid imaginary number\n        // set index back to initial, error index should already be set\n        // character examined.\n        pos.setIndex(initialIndex);\n        return null;\n    }\n\n    // parse imaginary character\n    startIndex = pos.getIndex();\n    int endIndex = startIndex + n;\n    if (endIndex > source.length() || !source.substring(startIndex, endIndex).equals(getImaginaryCharacter())) {\n        // set index back to initial, error index should be the start index\n        // character examined.\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(startIndex);\n        return null;\n    }\n    pos.setIndex(endIndex);\n\n    return new Complex(re.doubleValue(), im.doubleValue() * sign);\n}\n",
  "index": 1,
  "validation": "plausible",
  "errors": [],
  "total_trigger": 2,
  "passing_trigger": 2,
  "total_relevant": 2,
  "failing_relevant": 0,
  "passing_tests": [
    "org.apache.commons.math.complex.ComplexFormatTest::testForgottenImaginaryCharacter",
    "org.apache.commons.math.complex.FrenchComplexFormatTest::testForgottenImaginaryCharacter"
  ],
  "failing_tests": [],
  "sum_entropy": -10.278505903820955,
  "mean_entropy": -0.01980444297460685,
  "test_for_prompt": "Math_101_n33.txt",
  "pass_FIB_num": 0,
  "pass_FIB": []
}