{
  "patch": "\n    /**\n     * Method overridden to support more reliable deserialization of\n     * String collections.\n     */\n    @Override\n    public String nextTextValue() throws IOException\n    {\n        _binaryValue = null;\n        if (_nextToken != null) {\n            JsonToken t = _nextToken;\n            _currToken = t;\n            _nextToken = null;\n\n            // expected case; yes, got a String\n            if (t == JsonToken.VALUE_STRING) {\n                return _currText;\n            }\n            _updateState(t);\n            return null;\n        }\n\n        int token = _xmlTokens.next();\n\n        // mostly copied from 'nextToken()'\n        while (token == XmlTokenStream.XML_START_ELEMENT) {\n            if (_mayBeLeaf) {\n                _nextToken = JsonToken.FIELD_NAME;\n                _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n                _currToken = JsonToken.START_OBJECT;\n                return null;\n            }\n            if (_parsingContext.inArray()) {\n                token = _xmlTokens.next();\n                _mayBeLeaf = true;\n                continue;\n            }\n            String name = _xmlTokens.getLocalName();\n            _parsingContext.setCurrentName(name);\n            if (_namesToWrap != null && _namesToWrap.contains(name)) {\n                _xmlTokens.repeatStartElement();\n            }\n            _mayBeLeaf = true;\n            _currToken = JsonToken.FIELD_NAME;\n            return null;\n        }\n\n        // Ok; beyond start element, what do we get?\n        switch (token) {\n            case XmlTokenStream.XML_END_ELEMENT:\n                if (_mayBeLeaf) {\n                    // NOTE: this is different from nextToken() -- produce \"\", NOT null\n                    _mayBeLeaf = false;\n                    _currToken = JsonToken.VALUE_STRING;\n                    return (_currText = \"\");\n                }\n                _currToken = _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;\n                _parsingContext = _parsingContext.getParent();\n                _namesToWrap = _parsingContext.getNamesToWrap();\n                break;\n            case XmlTokenStream.XML_ATTRIBUTE_NAME:\n                // If there was a chance of leaf node, no more...\n                if (_mayBeLeaf) {\n                    _mayBeLeaf = false;\n                    _nextToken = JsonToken.FIELD_NAME;\n                    _currText = _xmlTokens.getText();\n                    _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n                    _currToken = JsonToken.START_OBJECT;\n                    return _currText;\n                } else {\n                    _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n                    _currToken = JsonToken.FIELD_NAME;\n                    return null;\n                }\n            case XmlTokenStream.XML_ATTRIBUTE_VALUE:\n                _currText = _xmlTokens.getText();\n                _currToken = JsonToken.VALUE_STRING;\n                return _currText;\n            case XmlTokenStream.XML_TEXT:\n                _currText = _xmlTokens.getText();\n                if (_mayBeLeaf) {\n                    _mayBeLeaf = false;\n                    // Also: must skip following END_ELEMENT\n                    _xmlTokens.skipEndElement();\n\n                    // NOTE: this is different from nextToken() -- NO work-around\n                    // for otherwise empty List/array\n                    _currToken = JsonToken.VALUE_STRING;\n                    return _currText;\n                }\n                // If not a leaf, need to transform into property...\n                _parsingContext.setCurrentName(_cfgNameForTextElement);\n                _nextToken = JsonToken.VALUE_STRING;\n                _currToken = JsonToken.FIELD_NAME;\n                return null;\n            case XmlTokenStream.XML_END:\n                _currToken = null;\n        }\n        return null;\n    }\n",
  "index": 1,
  "validation": "plausible",
  "errors": [],
  "total_trigger": 1,
  "passing_trigger": 1,
  "total_relevant": 50,
  "failing_relevant": 0,
  "passing_tests": [
    "com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest::testXmlAttributesWithNextTextValue"
  ],
  "failing_tests": [],
  "sum_entropy": -5.521052261435406,
  "mean_entropy": -0.007207640027983559
}