{
  "patch": "\n    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n        \n        long instantMillis = instant.getMillis();\n        Chronology chrono = instant.getChronology();\n        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n        chrono = selectChronology(chrono);\n        \n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantLocal, chrono, iLocale, iPivotYear, chrono.year().get(instantLocal));\n        int newPos = parser.parseInto(bucket, text, position);\n        instant.setMillis(bucket.computeMillis(false, text));\n        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            chrono = chrono.withZone(parsedZone);\n        } else if (bucket.getZone() != null) {\n            chrono = chrono.withZone(bucket.getZone());\n        }\n        instant.setChronology(chrono);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n        return newPos;\n    }\n",
  "index": 7,
  "validation": "plausible",
  "errors": [],
  "total_trigger": 7,
  "passing_trigger": 7,
  "total_relevant": 62,
  "failing_relevant": 0,
  "passing_tests": [
    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthOnly_baseStartYear",
    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthOnly_parseStartYear",
    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthOnly_baseEndYear",
    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthOnly",
    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_withDefaultYear_feb29",
    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29",
    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthOnly_parseEndYear"
  ],
  "failing_tests": [],
  "sum_entropy": -4.011339277125198,
  "mean_entropy": -0.015547826655524023
}