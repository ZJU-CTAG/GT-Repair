{
  "patch": "\n    /**\n     * Translate an input onto a Writer. This is intentionally final as its algorithm is \n     * tightly coupled with the abstract method of this class. \n     *\n     * @param input CharSequence that is being translated\n     * @param out Writer to translate the text to\n     * @throws IOException if and only if the Writer produces an IOException\n     */\n    public final void translate(CharSequence input, Writer out) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (input == null) {\n            return;\n        }\n        int len = input.length();\n        for (int pos = 0; pos < len; ) {\n            int consumed = translate(input, pos, out);\n            if (consumed == 0) {\n                char[] c = Character.toChars(Character.codePointAt(input, pos));\n                out.write(c);\n                pos += Character.charCount(Character.codePointAt(input, pos));\n            } else {\n                for (int pt = 0; pt < consumed; pt++) {\n                    pos += Character.charCount(Character.codePointAt(input, pos));\n                }\n            }\n        }\n    }\n",
  "index": 15,
  "validation": "plausible",
  "errors": [],
  "total_trigger": 1,
  "passing_trigger": 1,
  "total_relevant": 8,
  "failing_relevant": 0,
  "passing_tests": [
    "org.apache.commons.lang3.StringEscapeUtilsTest::testLang720"
  ],
  "failing_tests": [],
  "sum_entropy": -5.95401603200717,
  "mean_entropy": -0.024302106253090486
}