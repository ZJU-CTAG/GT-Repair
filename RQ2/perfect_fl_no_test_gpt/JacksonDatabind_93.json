{
  "patch": "\n    public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException\n    {\n        final Class<?> raw = type.getRawClass();\n        String full = raw.getName();\n\n        main_check:\n        do {\n            if (_cfgIllegalClassNames.contains(full)) {\n                break;\n            }\n\n            // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling\n            //    for some Spring framework types\n            // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces\n            if (full.startsWith(PREFIX_STRING)) {\n                if (!raw.isInterface()) {  // Added check to handle interface types\n                    for (Class<?> cls = raw; cls != Object.class; cls = cls.getSuperclass()) {\n                        String name = cls.getSimpleName();\n                        // looking for \"AbstractBeanFactoryPointcutAdvisor\" but no point to allow any is there?\n                        if (\"AbstractPointcutAdvisor\".equals(name)\n                                // ditto  for \"FileSystemXmlApplicationContext\": block all ApplicationContexts\n                                || \"AbstractApplicationContext\".equals(name)) {\n                            break main_check;\n                        }\n                    }\n                }\n            }\n            return;\n        } while (false);\n\n        throw JsonMappingException.from(ctxt,\n                String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n    }\n",
  "index": 1,
  "validation": "plausible",
  "errors": [],
  "total_trigger": 1,
  "passing_trigger": 1,
  "total_relevant": 209,
  "failing_relevant": 0,
  "passing_tests": [
    "com.fasterxml.jackson.databind.interop.IllegalTypesCheckTest::testJDKTypes1872"
  ],
  "failing_tests": [],
  "sum_entropy": -16.36353309017727,
  "mean_entropy": -0.05642597617302507
}