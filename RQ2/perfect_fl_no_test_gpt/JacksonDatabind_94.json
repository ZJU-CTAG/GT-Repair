{
  "patch": "\n    public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException\n    {\n        // There are certain nasty classes that could cause problems, mostly\n        // via default typing -- catch them here.\n        final Class<?> raw = type.getRawClass();\n        String full = raw.getName();\n\n        main_check:\n        do {\n            if (_cfgIllegalClassNames.contains(full)) {\n                break;\n            }\n\n            // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling\n            //    for some Spring framework types\n            // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces\n            if (raw.isInterface()) {\n                ;\n            } else if (full.startsWith(PREFIX_SPRING)) {\n                for (Class<?> cls = raw; (cls != null) && (cls != Object.class); cls = cls.getSuperclass()){\n                    String name = cls.getSimpleName();\n                    // looking for \"AbstractBeanFactoryPointcutAdvisor\" but no point to allow any is there?\n                    if (\"AbstractPointcutAdvisor\".equals(name)\n                            // ditto  for \"FileSystemXmlApplicationContext\": block all ApplicationContexts\n                            || \"AbstractApplicationContext\".equals(name)) {\n                        break main_check;\n                    }\n                }\n            }\n            // Block two more c3p0 classes from exploiting default typing issue\n            if (full.startsWith(\"com.mchange.v2.c3p0.\") && !full.equals(\"com.mchange.v2.c3p0.JndiRefForwardingDataSource\")\n                    && !full.equals(\"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\")\n                    && !full.equals(\"com.mchange.v2.c3p0.ComboPooledDataSource\")\n                    && !full.equals(\"com.mchange.v2.c3p0.debug.AfterCloseLoggingComboPooledDataSource\")) {\n                break main_check;\n            }\n            return;\n        } while (false);\n\n        throw JsonMappingException.from(ctxt,\n                String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n    }\n",
  "index": 65,
  "validation": "plausible",
  "errors": [],
  "total_trigger": 1,
  "passing_trigger": 1,
  "total_relevant": 182,
  "failing_relevant": 0,
  "passing_tests": [
    "com.fasterxml.jackson.databind.interop.IllegalTypesCheckTest::testC3P0Types"
  ],
  "failing_tests": [],
  "sum_entropy": -22.798051251706237,
  "mean_entropy": -0.0515793014744485
}