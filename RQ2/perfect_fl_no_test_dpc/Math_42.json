{
  "patch": "\n    /**\n     * Get the current solution.\n     *\n     * @return current solution\n     */\n    protected RealPointValuePair getSolution() {\n      int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);\n      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;\n      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n\n      Set<Integer> basicRows = new HashSet<Integer>();\n      double[] coefficients = new double[getOriginalNumDecisionVariables()];\n      for (int i = 0; i < coefficients.length; i++) {\n          int colIndex = columnLabels.indexOf(\"x\" + i);\n          if (colIndex < 0) {\n            coefficients[i] = 0;\n            continue;\n          }\n          Integer basicRow = getBasicRow(colIndex);\n              // if the basic row is found to be the objective function row\n              // set the coefficient to 0 -> this case handles unconstrained \n              // variables that are still part of the objective function\n          if (basicRows.contains(basicRow)) {\n              // if multiple variables can take a given value\n              // then we choose the first and set the rest equal to 0\n              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);\n          } else {\n              basicRows.add(basicRow);\n              double entry = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n              coefficients[i] = entry - (restrictToNonNegative ? 0 : mostNegative);\n              if (restrictToNonNegative && coefficients[i] < 0) {\n                  coefficients[i] = 0;\n              }\n          }\n      }\n      return new RealPointValuePair(coefficients, f.getValue(coefficients));\n    }\n",
  "index": 12,
  "validation": "plausible",
  "validation_wo": "plausible",
  "errors": [],
  "total_trigger": 1,
  "passing_trigger": 1,
  "total_relevant": 2,
  "failing_relevant": 0,
  "passing_tests": [
    "org.apache.commons.math.optimization.linear.SimplexSolverTest::testMath713NegativeVariable"
  ],
  "failing_tests": [],
  "sum_entropy": -7.0821243822574615,
  "mean_entropy": -0.015395922570124917
}