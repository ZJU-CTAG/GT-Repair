{
  "patch": "\n  /**\n   * Gets the source line for the indicated line number.\n   *\n   * @param lineNumber the line number, 1 being the first line of the file.\n   * @return The line indicated. Does not include the newline at the end\n   *     of the file. Returns {@code null} if it does not exist,\n   *     or if there was an IO exception.\n   */\n  public String getLine(int lineNumber) {\n    String js = \"\";\n    try {\n      // NOTE(nicksantos): Right now, this is optimized for few warnings.\n      // This is probably the right trade-off, but will be slow if there\n      // are lots of warnings in one file.\n      js = getCode();\n    } catch (IOException e) {\n      return null;\n    }\n\n    int pos = 0;\n    int startLine = 1;\n\n    // If we've saved a previous offset and it's for a line less than the\n    // one we're searching for, then start at that point.\n    if (lineNumber >= lastLine) {\n      pos = lastOffset;\n      startLine = lastLine;\n    }\n\n    for (int n = startLine; n < lineNumber; n++) {\n      int nextpos = js.indexOf('\\n', pos);\n      if (nextpos == -1) {\n        return null;\n      }\n      pos = nextpos + 1;\n    }\n\n    // Remember this offset for the next search we do.\n    lastOffset = pos;\n    lastLine = lineNumber;\n\n    if (pos >= js.length()) {\n      // If pos is at the end of file, then null should be returned\n      return null;\n    } else if (js.indexOf('\\n', pos) == -1) {\n      // If next new line cannot be found, return the contents between pos and the end of file.\n      return js.substring(pos);\n    } else {\n      return js.substring(pos, js.indexOf('\\n', pos));\n    }\n  }\n",
  "index": 93,
  "validation": "plausible",
  "validation_wo": "plausible",
  "errors": [],
  "total_trigger": 3,
  "passing_trigger": 3,
  "total_relevant": 167,
  "failing_relevant": 0,
  "passing_tests": [
    "com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest::testExceptNoNewLine",
    "com.google.javascript.jscomp.JsMessageExtractorTest::testSyntaxError1",
    "com.google.javascript.jscomp.JsMessageExtractorTest::testSyntaxError2"
  ],
  "failing_tests": [],
  "sum_entropy": -8.151227723807096,
  "mean_entropy": -0.01687624787537701,
  "test_for_prompt": "Closure_56_n1.txt"
}